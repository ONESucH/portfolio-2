+function(e,t,r){"use strict";t.spiedEventsKey=function(e,t){return[r(e).selector,t].toString()},t.getFixtures=function(){return t.currentFixtures_=t.currentFixtures_||new t.Fixtures},t.getStyleFixtures=function(){return t.currentStyleFixtures_=t.currentStyleFixtures_||new t.StyleFixtures},t.Fixtures=function(){this.containerId="jasmine-fixtures",this.fixturesCache_={},this.fixturesPath="spec/javascripts/fixtures"},t.Fixtures.prototype.set=function(e){return this.cleanUp(),this.createContainer_(e)},t.Fixtures.prototype.appendSet=function(e){this.addToContainer_(e)},t.Fixtures.prototype.preload=function(){this.read.apply(this,arguments)},t.Fixtures.prototype.load=function(){this.cleanUp(),this.createContainer_(this.read.apply(this,arguments))},t.Fixtures.prototype.appendLoad=function(){this.addToContainer_(this.read.apply(this,arguments))},t.Fixtures.prototype.read=function(){for(var e=[],t=arguments,r=t.length,n=0;n<r;n++)e.push(this.getFixtureHtml_(t[n]));return e.join("")},t.Fixtures.prototype.clearCache=function(){this.fixturesCache_={}},t.Fixtures.prototype.cleanUp=function(){r("#"+this.containerId).remove()},t.Fixtures.prototype.sandbox=function(e){var t=e||{};return r('<div id="sandbox" />').attr(t)},t.Fixtures.prototype.createContainer_=function(e){var t=r("<div>").attr("id",this.containerId).html(e);return r(document.body).append(t),t},t.Fixtures.prototype.addToContainer_=function(e){var t=r(document.body).find("#"+this.containerId).append(e);t.length||this.createContainer_(e)},t.Fixtures.prototype.getFixtureHtml_=function(e){return"undefined"==typeof this.fixturesCache_[e]&&this.loadFixtureIntoCache_(e),this.fixturesCache_[e]},t.Fixtures.prototype.loadFixtureIntoCache_=function(e){var t=this,n=this.makeFixtureUrl_(e),o="",s=(r.ajax({async:!1,cache:!1,url:n,success:function(e,t,r){o=r.responseText}}).fail(function(){throw new Error("Fixture could not be loaded: "+n+" (status: "+status+", message: "+errorThrown.message+")")}),r(r.parseHTML(o,!0)).find("script[src]")||[]);s.each(function(){r.ajax({async:!1,cache:!1,dataType:"script",url:r(this).attr("src"),success:function(e,t,r){o+="<script>"+r.responseText+"</script>"},error:function(e,t,r){throw new Error("Script could not be loaded: "+scriptSrc+" (status: "+t+", message: "+r.message+")")}})}),t.fixturesCache_[e]=o},t.Fixtures.prototype.makeFixtureUrl_=function(e){return this.fixturesPath.match("/$")?this.fixturesPath+e:this.fixturesPath+"/"+e},t.Fixtures.prototype.proxyCallTo_=function(e,t){return this[e].apply(this,t)},t.StyleFixtures=function(){this.fixturesCache_={},this.fixturesNodes_=[],this.fixturesPath="spec/javascripts/fixtures"},t.StyleFixtures.prototype.set=function(e){this.cleanUp(),this.createStyle_(e)},t.StyleFixtures.prototype.appendSet=function(e){this.createStyle_(e)},t.StyleFixtures.prototype.preload=function(){this.read_.apply(this,arguments)},t.StyleFixtures.prototype.load=function(){this.cleanUp(),this.createStyle_(this.read_.apply(this,arguments))},t.StyleFixtures.prototype.appendLoad=function(){this.createStyle_(this.read_.apply(this,arguments))},t.StyleFixtures.prototype.cleanUp=function(){for(;this.fixturesNodes_.length;)this.fixturesNodes_.pop().remove()},t.StyleFixtures.prototype.createStyle_=function(e){var t=r("<div></div>").html(e).text(),n=r("<style>"+t+"</style>");this.fixturesNodes_.push(n),r("head").append(n)},t.StyleFixtures.prototype.clearCache=t.Fixtures.prototype.clearCache,t.StyleFixtures.prototype.read_=t.Fixtures.prototype.read,t.StyleFixtures.prototype.getFixtureHtml_=t.Fixtures.prototype.getFixtureHtml_,t.StyleFixtures.prototype.loadFixtureIntoCache_=t.Fixtures.prototype.loadFixtureIntoCache_,t.StyleFixtures.prototype.makeFixtureUrl_=t.Fixtures.prototype.makeFixtureUrl_,t.StyleFixtures.prototype.proxyCallTo_=t.Fixtures.prototype.proxyCallTo_,t.getJSONFixtures=function(){return t.currentJSONFixtures_=t.currentJSONFixtures_||new t.JSONFixtures},t.JSONFixtures=function(){this.fixturesCache_={},this.fixturesPath="spec/javascripts/fixtures/json"},t.JSONFixtures.prototype.load=function(){return this.read.apply(this,arguments),this.fixturesCache_},t.JSONFixtures.prototype.read=function(){for(var e=arguments,t=e.length,r=0;r<t;r++)this.getFixtureData_(e[r]);return this.fixturesCache_},t.JSONFixtures.prototype.clearCache=function(){this.fixturesCache_={}},t.JSONFixtures.prototype.getFixtureData_=function(e){return this.fixturesCache_[e]||this.loadFixtureIntoCache_(e),this.fixturesCache_[e]},t.JSONFixtures.prototype.loadFixtureIntoCache_=function(e){var t=this,n=this.fixturesPath.match("/$")?this.fixturesPath+e:this.fixturesPath+"/"+e;r.ajax({async:!1,cache:!1,dataType:"json",url:n,success:function(r){t.fixturesCache_[e]=r},error:function(e,t,r){throw new Error("JSONFixture could not be loaded: "+n+" (status: "+t+", message: "+r.message+")")}})},t.JSONFixtures.prototype.proxyCallTo_=function(e,t){return this[e].apply(this,t)},t.jQuery=function(){},t.jQuery.browserTagCaseIndependentHtml=function(e){return r("<div/>").append(e).html()},t.jQuery.elementToString=function(e){return r(e).map(function(){return this.outerHTML}).toArray().join(", ")};var n={spiedEvents:{},handlers:[]};t.jQuery.events={spyOn:function(e,o){var s=function(r){n.spiedEvents[t.spiedEventsKey(e,o)]=t.util.argsToArray(arguments)};return r(e).on(o,s),n.handlers.push(s),{selector:e,eventName:o,handler:s,reset:function(){delete n.spiedEvents[t.spiedEventsKey(e,o)]}}},args:function(e,r){var o=n.spiedEvents[t.spiedEventsKey(e,r)];if(!o)throw"There is no spy for "+r+" on "+e.toString()+". Make sure to create a spy using spyOnEvent.";return o},wasTriggered:function(e,r){return!!n.spiedEvents[t.spiedEventsKey(e,r)]},wasTriggeredWith:function(e,r,n,o,s){var i=t.jQuery.events.args(e,r).slice(1);return"[object Array]"!==Object.prototype.toString.call(n)&&(i=i[0]),o.equals(n,i,s)},wasPrevented:function(e,r){var o=n.spiedEvents[t.spiedEventsKey(e,r)],s=o?o[0]:void 0;return s&&s.isDefaultPrevented()},wasStopped:function(e,r){var o=n.spiedEvents[t.spiedEventsKey(e,r)],s=o?o[0]:void 0;return s&&s.isPropagationStopped()},cleanUp:function(){n.spiedEvents={},n.handlers=[]}};var o=function(e,t){return void 0===t?void 0!==e:e===t};beforeEach(function(){t.addMatchers({toHaveClass:function(){return{compare:function(e,t){return{pass:r(e).hasClass(t)}}}},toHaveCss:function(){return{compare:function(e,t){for(var n in t){var o=t[n];if(("auto"!==o||"auto"!==r(e).get(0).style[n])&&r(e).css(n)!==o)return{pass:!1}}return{pass:!0}}}},toBeVisible:function(){return{compare:function(e){return{pass:r(e).is(":visible")}}}},toBeHidden:function(){return{compare:function(e){return{pass:r(e).is(":hidden")}}}},toBeSelected:function(){return{compare:function(e){return{pass:r(e).is(":selected")}}}},toBeChecked:function(){return{compare:function(e){return{pass:r(e).is(":checked")}}}},toBeEmpty:function(){return{compare:function(e){return{pass:r(e).is(":empty")}}}},toBeInDOM:function(){return{compare:function(e){return{pass:r.contains(document.documentElement,r(e)[0])}}}},toExist:function(){return{compare:function(e){return{pass:r(e).length}}}},toHaveLength:function(){return{compare:function(e,t){return{pass:r(e).length===t}}}},toHaveAttr:function(){return{compare:function(e,t,n){return{pass:o(r(e).attr(t),n)}}}},toHaveProp:function(){return{compare:function(e,t,n){return{pass:o(r(e).prop(t),n)}}}},toHaveId:function(){return{compare:function(e,t){return{pass:r(e).attr("id")==t}}}},toHaveHtml:function(){return{compare:function(e,n){return{pass:r(e).html()==t.jQuery.browserTagCaseIndependentHtml(n)}}}},toContainHtml:function(){return{compare:function(e,n){var o=r(e).html(),s=t.jQuery.browserTagCaseIndependentHtml(n);return{pass:o.indexOf(s)>=0}}}},toHaveText:function(){return{compare:function(e,t){var n=r.trim(r(e).text());return t&&r.isFunction(t.test)?{pass:t.test(n)}:{pass:n==t}}}},toContainText:function(){return{compare:function(e,t){var n=r.trim(r(e).text());return t&&r.isFunction(t.test)?{pass:t.test(n)}:{pass:n.indexOf(t)!=-1}}}},toHaveValue:function(){return{compare:function(e,t){return{pass:r(e).val()===t}}}},toHaveData:function(){return{compare:function(e,t,n){return{pass:o(r(e).data(t),n)}}}},toContainElement:function(){return{compare:function(t,n){return e.debug,{pass:r(t).find(n).length}}}},toBeMatchedBy:function(){return{compare:function(e,t){return{pass:r(e).filter(t).length}}}},toBeDisabled:function(){return{compare:function(e,t){return{pass:r(e).is(":disabled")}}}},toBeFocused:function(e){return{compare:function(e,t){return{pass:r(e)[0]===r(e)[0].ownerDocument.activeElement}}}},toHandle:function(){return{compare:function(e,t){var n=r._data(r(e).get(0),"events");if(!n||!t||"string"!=typeof t)return{pass:!1};var o=t.split("."),s=o.shift(),i=o.slice(0).sort(),a=new RegExp("(^|\\.)"+i.join("\\.(?:.*\\.)?")+"(\\.|$)");if(!n[s]||!o.length)return{pass:n[s]&&n[s].length>0};for(var u=0;u<n[s].length;u++){var p=n[s][u].namespace;if(a.test(p))return{pass:!0}}return{pass:!1}}}},toHandleWith:function(){return{compare:function(e,t,n){for(var o=t.split(".")[0],s=r._data(r(e).get(0),"events")[o],i=0;i<s.length;i++)if(s[i].handler==n)return{pass:!0};return{pass:!1}}}},toHaveBeenTriggeredOn:function(){return{compare:function(e,n){var o={pass:t.jQuery.events.wasTriggered(n,e)};return o.message=o.pass?"Expected event "+r(e)+" not to have been triggered on "+n:"Expected event "+r(e)+" to have been triggered on "+n,o}}},toHaveBeenTriggered:function(){return{compare:function(e){var r=e.eventName,n=e.selector,o={pass:t.jQuery.events.wasTriggered(n,r)};return o.message=o.pass?"Expected event "+r+" not to have been triggered on "+n:"Expected event "+r+" to have been triggered on "+n,o}}},toHaveBeenTriggeredOnAndWith:function(e,r){return{compare:function(n,o,s){var i=t.jQuery.events.wasTriggered(o,n),a={pass:i&&t.jQuery.events.wasTriggeredWith(o,n,s,e,r)};if(i){var u=t.jQuery.events.args(o,n,s)[1];a.message=a.pass?"Expected event "+n+" not to have been triggered with "+t.pp(s)+" but it was triggered with "+t.pp(u):"Expected event "+n+" to have been triggered with "+t.pp(s)+"  but it was triggered with "+t.pp(u)}else a.message=a.pass?"Expected event "+n+" not to have been triggered on "+o:"Expected event "+n+" to have been triggered on "+o;return a}}},toHaveBeenPreventedOn:function(){return{compare:function(e,r){var n={pass:t.jQuery.events.wasPrevented(r,e)};return n.message=n.pass?"Expected event "+e+" not to have been prevented on "+r:"Expected event "+e+" to have been prevented on "+r,n}}},toHaveBeenPrevented:function(){return{compare:function(e){var r=e.eventName,n=e.selector,o={pass:t.jQuery.events.wasPrevented(n,r)};return o.message=o.pass?"Expected event "+r+" not to have been prevented on "+n:"Expected event "+r+" to have been prevented on "+n,o}}},toHaveBeenStoppedOn:function(){return{compare:function(e,r){var n={pass:t.jQuery.events.wasStopped(r,e)};return n.message=n.pass?"Expected event "+e+" not to have been stopped on "+r:"Expected event "+e+" to have been stopped on "+r,n}}},toHaveBeenStopped:function(){return{compare:function(e){var r=e.eventName,n=e.selector,o={pass:t.jQuery.events.wasStopped(n,r)};return o.message=o.pass?"Expected event "+r+" not to have been stopped on "+n:"Expected event "+r+" to have been stopped on "+n,o}}}}),t.getEnv().addCustomEqualityTester(function(e,n){if(e&&n){if(e instanceof r||t.isDomNode(e)){var o=r(e);return n instanceof r?o.length==n.length&&e.is(n):o.is(n)}if(n instanceof r||t.isDomNode(n)){var s=r(n);return e instanceof jQuery?e.length==s.length&&s.is(e):r(n).is(e)}}}),t.getEnv().addCustomEqualityTester(function(e,t){if(e instanceof jQuery&&t instanceof jQuery&&e.size()==t.size())return e.is(t)})}),afterEach(function(){t.getFixtures().cleanUp(),t.getStyleFixtures().cleanUp(),t.jQuery.events.cleanUp()}),e.readFixtures=function(){return t.getFixtures().proxyCallTo_("read",arguments)},e.preloadFixtures=function(){t.getFixtures().proxyCallTo_("preload",arguments)},e.loadFixtures=function(){t.getFixtures().proxyCallTo_("load",arguments)},e.appendLoadFixtures=function(){t.getFixtures().proxyCallTo_("appendLoad",arguments)},e.setFixtures=function(e){return t.getFixtures().proxyCallTo_("set",arguments)},e.appendSetFixtures=function(){t.getFixtures().proxyCallTo_("appendSet",arguments)},e.sandbox=function(e){return t.getFixtures().sandbox(e)},e.spyOnEvent=function(e,r){return t.jQuery.events.spyOn(e,r)},e.preloadStyleFixtures=function(){t.getStyleFixtures().proxyCallTo_("preload",arguments)},e.loadStyleFixtures=function(){t.getStyleFixtures().proxyCallTo_("load",arguments)},e.appendLoadStyleFixtures=function(){t.getStyleFixtures().proxyCallTo_("appendLoad",arguments)},e.setStyleFixtures=function(e){t.getStyleFixtures().proxyCallTo_("set",arguments)},e.appendSetStyleFixtures=function(e){t.getStyleFixtures().proxyCallTo_("appendSet",arguments)},e.loadJSONFixtures=function(){return t.getJSONFixtures().proxyCallTo_("load",arguments)},e.getJSONFixture=function(e){return t.getJSONFixtures().proxyCallTo_("read",arguments)[e]}}(window,window.jasmine,window.jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
