module.exports=function(s){mainTasks=["coffee","growl:coffee","jasmine","growl:jasmine","uglify"],s.initConfig({pkg:s.file.readJSON("package.json"),uglify:{dist:{files:{"dist/<%= pkg.name %>.min.js":"dist/<%= pkg.name %>.js"}},options:{banner:'/*! <%= pkg.title || pkg.name %> - v<%= pkg.version %> - <%= grunt.template.today("yyyy-mm-dd") %>\n<%= pkg.homepage ? "* " + pkg.homepage + "\\n" : "" %>* Copyright (c) <%= grunt.template.today("yyyy") %> <%= pkg.author.name %>; Licensed <%= _.pluck(pkg.licenses, "type").join(", ") %> */',report:"gzip"}},coffee:{plugin:{files:[{expand:!0,cwd:"src/",src:"*.coffee",dest:"dist/",ext:".js"}]},specs:{files:[{expand:!0,cwd:"spec/coffeescripts/",src:"*.coffee",dest:"spec/javascripts/",ext:".js"}]},helpers:{files:[{expand:!0,cwd:"spec/coffeescripts/helpers/",src:"*.coffee",dest:"spec/javascripts/helpers/",ext:".js"}]}},jasmine:{src:["spec/javascripts/libs/*.js","dist/<%= pkg.name %>.js"],options:{specs:"spec/javascripts/**/*.js",helpers:"spec/javascripts/helpers/**/*.js"}},watch:{files:["src/*","spec/coffeescripts/**/*.coffee"],tasks:mainTasks},growl:{coffee:{title:"CoffeeScript",message:"Compiled successfully"},jasmine:{title:"Jasmine",message:"Tests passed successfully"}}}),s.loadNpmTasks("grunt-growl"),s.loadNpmTasks("grunt-contrib-jasmine"),s.loadNpmTasks("grunt-contrib-coffee"),s.loadNpmTasks("grunt-contrib-watch"),s.loadNpmTasks("grunt-contrib-uglify"),s.registerTask("default",mainTasks),s.registerTask("travis",["coffee","jasmine"])};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
