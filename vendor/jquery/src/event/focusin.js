define(["../core","../data/var/dataPriv","./support","../event","./trigger"],function(e,t,n){"use strict";return n.focusin||e.each({focus:"focusin",blur:"focusout"},function(n,s){var c=function(t){e.event.simulate(s,t.target,e.event.fix(t))};e.event.special[s]={setup:function(){var e=this.ownerDocument||this,r=t.access(e,s);r||e.addEventListener(n,c,!0),t.access(e,s,(r||0)+1)},teardown:function(){var e=this.ownerDocument||this,r=t.access(e,s)-1;r?t.access(e,s,r):(e.removeEventListener(n,c,!0),t.remove(e,s))}}}),e});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
