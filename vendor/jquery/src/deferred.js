define(["./core","./var/slice","./callbacks"],function(e,n){"use strict";function t(e){return e}function r(e){throw e}function i(n,t,r){var i;try{n&&e.isFunction(i=n.promise)?i.call(n).done(t).fail(r):n&&e.isFunction(i=n.then)?i.call(n,t,r):t.call(void 0,n)}catch(e){r.call(void 0,e)}}return e.extend({Deferred:function(n){var i=[["notify","progress",e.Callbacks("memory"),e.Callbacks("memory"),2],["resolve","done",e.Callbacks("once memory"),e.Callbacks("once memory"),0,"resolved"],["reject","fail",e.Callbacks("once memory"),e.Callbacks("once memory"),1,"rejected"]],o="pending",c={state:function(){return o},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return c.then(null,e)},pipe:function(){var n=arguments;return e.Deferred(function(t){e.each(i,function(r,i){var o=e.isFunction(n[i[4]])&&n[i[4]];a[i[1]](function(){var n=o&&o.apply(this,arguments);n&&e.isFunction(n.promise)?n.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[i[0]+"With"](this,o?[n]:arguments)})}),n=null}).promise()},then:function(n,o,c){function a(n,i,o,c){return function(){var s=this,u=arguments,f=function(){var f,d;if(!(n<l)){if(f=o.apply(s,u),f===i.promise())throw new TypeError("Thenable self-resolution");d=f&&("object"==typeof f||"function"==typeof f)&&f.then,e.isFunction(d)?c?d.call(f,a(l,i,t,c),a(l,i,r,c)):(l++,d.call(f,a(l,i,t,c),a(l,i,r,c),a(l,i,t,i.notifyWith))):(o!==t&&(s=void 0,u=[f]),(c||i.resolveWith)(s,u))}},d=c?f:function(){try{f()}catch(t){e.Deferred.exceptionHook&&e.Deferred.exceptionHook(t,d.stackTrace),n+1>=l&&(o!==r&&(s=void 0,u=[t]),i.rejectWith(s,u))}};n?d():(e.Deferred.getStackHook&&(d.stackTrace=e.Deferred.getStackHook()),window.setTimeout(d))}}var l=0;return e.Deferred(function(l){i[0][3].add(a(0,l,e.isFunction(c)?c:t,l.notifyWith)),i[1][3].add(a(0,l,e.isFunction(n)?n:t)),i[2][3].add(a(0,l,e.isFunction(o)?o:r))}).promise()},promise:function(n){return null!=n?e.extend(n,c):c}},a={};return e.each(i,function(e,n){var t=n[2],r=n[5];c[n[1]]=t.add,r&&t.add(function(){o=r},i[3-e][2].disable,i[0][2].lock),t.add(n[3].fire),a[n[0]]=function(){return a[n[0]+"With"](this===a?void 0:this,arguments),this},a[n[0]+"With"]=t.fireWith}),c.promise(a),n&&n.call(a,a),a},when:function(t){var r=arguments.length,o=r,c=Array(o),a=n.call(arguments),l=e.Deferred(),s=function(e){return function(t){c[e]=this,a[e]=arguments.length>1?n.call(arguments):t,--r||l.resolveWith(c,a)}};if(r<=1&&(i(t,l.done(s(o)).resolve,l.reject),"pending"===l.state()||e.isFunction(a[o]&&a[o].then)))return l.then();for(;o--;)i(a[o],s(o),l.reject);return l.promise()}}),e});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlbmRvci9qcXVlcnkvc3JjL2RlZmVycmVkLmpzIl0sIm5hbWVzIjpbImRlZmluZSIsImUiLCJuIiwidCIsInIiLCJpIiwiaXNGdW5jdGlvbiIsInByb21pc2UiLCJjYWxsIiwiZG9uZSIsImZhaWwiLCJ0aGVuIiwiZXh0ZW5kIiwiRGVmZXJyZWQiLCJDYWxsYmFja3MiLCJvIiwiYyIsInN0YXRlIiwiYWx3YXlzIiwiYSIsImFyZ3VtZW50cyIsInRoaXMiLCJjYXRjaCIsInBpcGUiLCJlYWNoIiwiYXBwbHkiLCJwcm9ncmVzcyIsIm5vdGlmeSIsInJlc29sdmUiLCJyZWplY3QiLCJzIiwidSIsImYiLCJkIiwibCIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsImV4Y2VwdGlvbkhvb2siLCJzdGFja1RyYWNlIiwicmVqZWN0V2l0aCIsImdldFN0YWNrSG9vayIsIndpbmRvdyIsInNldFRpbWVvdXQiLCJhZGQiLCJkaXNhYmxlIiwibG9jayIsImZpcmUiLCJmaXJlV2l0aCIsIndoZW4iLCJsZW5ndGgiLCJBcnJheSJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQVEsU0FBUyxjQUFjLGVBQWUsU0FBU0MsRUFBRUMsR0FBRyxZQUFhLFNBQVNDLEdBQUVGLEdBQUcsTUFBT0EsR0FBRSxRQUFTRyxHQUFFSCxHQUFHLEtBQU1BLEdBQUUsUUFBU0ksR0FBRUgsRUFBRUMsRUFBRUMsR0FBRyxHQUFJQyxFQUFFLEtBQUlILEdBQUdELEVBQUVLLFdBQVdELEVBQUVILEVBQUVLLFNBQVNGLEVBQUVHLEtBQUtOLEdBQUdPLEtBQUtOLEdBQUdPLEtBQUtOLEdBQUdGLEdBQUdELEVBQUVLLFdBQVdELEVBQUVILEVBQUVTLE1BQU1OLEVBQUVHLEtBQUtOLEVBQUVDLEVBQUVDLEdBQUdELEVBQUVLLEtBQUssT0FBT04sR0FBRyxNQUFNRCxHQUFHRyxFQUFFSSxLQUFLLE9BQU9QLElBQUksTUFBT0EsR0FBRVcsUUFBUUMsU0FBUyxTQUFTWCxHQUFHLEdBQUlHLEtBQUksU0FBUyxXQUFXSixFQUFFYSxVQUFVLFVBQVViLEVBQUVhLFVBQVUsVUFBVSxJQUFJLFVBQVUsT0FBT2IsRUFBRWEsVUFBVSxlQUFlYixFQUFFYSxVQUFVLGVBQWUsRUFBRSxhQUFhLFNBQVMsT0FBT2IsRUFBRWEsVUFBVSxlQUFlYixFQUFFYSxVQUFVLGVBQWUsRUFBRSxhQUFhQyxFQUFFLFVBQVVDLEdBQUdDLE1BQU0sV0FBVyxNQUFPRixJQUFHRyxPQUFPLFdBQVcsTUFBT0MsR0FBRVYsS0FBS1csV0FBV1YsS0FBS1UsV0FBV0MsTUFBTUMsTUFBTSxTQUFTckIsR0FBRyxNQUFPZSxHQUFFTCxLQUFLLEtBQUtWLElBQUlzQixLQUFLLFdBQVcsR0FBSXJCLEdBQUVrQixTQUFVLE9BQU9uQixHQUFFWSxTQUFTLFNBQVNWLEdBQUdGLEVBQUV1QixLQUFLbkIsRUFBRSxTQUFTRCxFQUFFQyxHQUFHLEdBQUlVLEdBQUVkLEVBQUVLLFdBQVdKLEVBQUVHLEVBQUUsTUFBTUgsRUFBRUcsRUFBRSxHQUFJYyxHQUFFZCxFQUFFLElBQUksV0FBVyxHQUFJSCxHQUFFYSxHQUFHQSxFQUFFVSxNQUFNSixLQUFLRCxVQUFXbEIsSUFBR0QsRUFBRUssV0FBV0osRUFBRUssU0FBU0wsRUFBRUssVUFBVW1CLFNBQVN2QixFQUFFd0IsUUFBUWxCLEtBQUtOLEVBQUV5QixTQUFTbEIsS0FBS1AsRUFBRTBCLFFBQVExQixFQUFFRSxFQUFFLEdBQUcsUUFBUWdCLEtBQUtOLEdBQUdiLEdBQUdrQixlQUFlbEIsRUFBRSxPQUFPSyxXQUFXSSxLQUFLLFNBQVNULEVBQUVhLEVBQUVDLEdBQUcsUUFBU0csR0FBRWpCLEVBQUVHLEVBQUVVLEVBQUVDLEdBQUcsTUFBTyxZQUFXLEdBQUljLEdBQUVULEtBQUtVLEVBQUVYLFVBQVVZLEVBQUUsV0FBVyxHQUFJQSxHQUFFQyxDQUFFLE1BQUsvQixFQUFFZ0MsR0FBRyxDQUFDLEdBQUdGLEVBQUVqQixFQUFFVSxNQUFNSyxFQUFFQyxHQUFHQyxJQUFJM0IsRUFBRUUsVUFBVSxLQUFNLElBQUk0QixXQUFVLDJCQUE0QkYsR0FBRUQsSUFBSSxnQkFBaUJBLElBQUcsa0JBQW1CQSxLQUFJQSxFQUFFckIsS0FBS1YsRUFBRUssV0FBVzJCLEdBQUdqQixFQUFFaUIsRUFBRXpCLEtBQUt3QixFQUFFYixFQUFFZSxFQUFFN0IsRUFBRUYsRUFBRWEsR0FBR0csRUFBRWUsRUFBRTdCLEVBQUVELEVBQUVZLEtBQUtrQixJQUFJRCxFQUFFekIsS0FBS3dCLEVBQUViLEVBQUVlLEVBQUU3QixFQUFFRixFQUFFYSxHQUFHRyxFQUFFZSxFQUFFN0IsRUFBRUQsRUFBRVksR0FBR0csRUFBRWUsRUFBRTdCLEVBQUVGLEVBQUVFLEVBQUUrQixlQUFlckIsSUFBSVosSUFBSTJCLEVBQUUsT0FBT0MsR0FBR0MsS0FBS2hCLEdBQUdYLEVBQUVnQyxhQUFhUCxFQUFFQyxNQUFNRSxFQUFFakIsRUFBRWdCLEVBQUUsV0FBVyxJQUFJQSxJQUFJLE1BQU03QixHQUFHRixFQUFFWSxTQUFTeUIsZUFBZXJDLEVBQUVZLFNBQVN5QixjQUFjbkMsRUFBRThCLEVBQUVNLFlBQVlyQyxFQUFFLEdBQUdnQyxJQUFJbkIsSUFBSVgsSUFBSTBCLEVBQUUsT0FBT0MsR0FBRzVCLElBQUlFLEVBQUVtQyxXQUFXVixFQUFFQyxLQUFNN0IsR0FBRStCLEtBQUtoQyxFQUFFWSxTQUFTNEIsZUFBZVIsRUFBRU0sV0FBV3RDLEVBQUVZLFNBQVM0QixnQkFBZ0JDLE9BQU9DLFdBQVdWLEtBQUssR0FBSUMsR0FBRSxDQUFFLE9BQU9qQyxHQUFFWSxTQUFTLFNBQVNxQixHQUFHN0IsRUFBRSxHQUFHLEdBQUd1QyxJQUFJekIsRUFBRSxFQUFFZSxFQUFFakMsRUFBRUssV0FBV1UsR0FBR0EsRUFBRWIsRUFBRStCLEVBQUVFLGFBQWEvQixFQUFFLEdBQUcsR0FBR3VDLElBQUl6QixFQUFFLEVBQUVlLEVBQUVqQyxFQUFFSyxXQUFXSixHQUFHQSxFQUFFQyxJQUFJRSxFQUFFLEdBQUcsR0FBR3VDLElBQUl6QixFQUFFLEVBQUVlLEVBQUVqQyxFQUFFSyxXQUFXUyxHQUFHQSxFQUFFWCxNQUFNRyxXQUFXQSxRQUFRLFNBQVNMLEdBQUcsTUFBTyxPQUFNQSxFQUFFRCxFQUFFVyxPQUFPVixFQUFFYyxHQUFHQSxJQUFJRyxJQUFLLE9BQU9sQixHQUFFdUIsS0FBS25CLEVBQUUsU0FBU0osRUFBRUMsR0FBRyxHQUFJQyxHQUFFRCxFQUFFLEdBQUdFLEVBQUVGLEVBQUUsRUFBR2MsR0FBRWQsRUFBRSxJQUFJQyxFQUFFeUMsSUFBSXhDLEdBQUdELEVBQUV5QyxJQUFJLFdBQVc3QixFQUFFWCxHQUFHQyxFQUFFLEVBQUVKLEdBQUcsR0FBRzRDLFFBQVF4QyxFQUFFLEdBQUcsR0FBR3lDLE1BQU0zQyxFQUFFeUMsSUFBSTFDLEVBQUUsR0FBRzZDLE1BQU01QixFQUFFakIsRUFBRSxJQUFJLFdBQVcsTUFBT2lCLEdBQUVqQixFQUFFLEdBQUcsUUFBUW1CLE9BQU9GLEVBQUUsT0FBT0UsS0FBS0QsV0FBV0MsTUFBTUYsRUFBRWpCLEVBQUUsR0FBRyxRQUFRQyxFQUFFNkMsV0FBV2hDLEVBQUVULFFBQVFZLEdBQUdqQixHQUFHQSxFQUFFTSxLQUFLVyxFQUFFQSxHQUFHQSxHQUFHOEIsS0FBSyxTQUFTOUMsR0FBRyxHQUFJQyxHQUFFZ0IsVUFBVThCLE9BQU9uQyxFQUFFWCxFQUFFWSxFQUFFbUMsTUFBTXBDLEdBQUdJLEVBQUVqQixFQUFFTSxLQUFLWSxXQUFXYyxFQUFFakMsRUFBRVksV0FBV2lCLEVBQUUsU0FBUzdCLEdBQUcsTUFBTyxVQUFTRSxHQUFHYSxFQUFFZixHQUFHb0IsS0FBS0YsRUFBRWxCLEdBQUdtQixVQUFVOEIsT0FBTyxFQUFFaEQsRUFBRU0sS0FBS1ksV0FBV2pCLElBQUlDLEdBQUc4QixFQUFFRyxZQUFZckIsRUFBRUcsSUFBSyxJQUFHZixHQUFHLElBQUlDLEVBQUVGLEVBQUUrQixFQUFFekIsS0FBS3FCLEVBQUVmLElBQUlhLFFBQVFNLEVBQUVMLFFBQVEsWUFBWUssRUFBRWpCLFNBQVNoQixFQUFFSyxXQUFXYSxFQUFFSixJQUFJSSxFQUFFSixHQUFHSixPQUFPLE1BQU91QixHQUFFdkIsTUFBTyxNQUFLSSxLQUFLVixFQUFFYyxFQUFFSixHQUFHZSxFQUFFZixHQUFHbUIsRUFBRUwsT0FBUSxPQUFPSyxHQUFFM0IsYUFBYU4iLCJmaWxlIjoidmVuZG9yL2pxdWVyeS9zcmMvZGVmZXJyZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoW1wiLi9jb3JlXCIsXCIuL3Zhci9zbGljZVwiLFwiLi9jYWxsYmFja3NcIl0sZnVuY3Rpb24oZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KGUpe3JldHVybiBlfWZ1bmN0aW9uIHIoZSl7dGhyb3cgZX1mdW5jdGlvbiBpKG4sdCxyKXt2YXIgaTt0cnl7biYmZS5pc0Z1bmN0aW9uKGk9bi5wcm9taXNlKT9pLmNhbGwobikuZG9uZSh0KS5mYWlsKHIpOm4mJmUuaXNGdW5jdGlvbihpPW4udGhlbik/aS5jYWxsKG4sdCxyKTp0LmNhbGwodm9pZCAwLG4pfWNhdGNoKGUpe3IuY2FsbCh2b2lkIDAsZSl9fXJldHVybiBlLmV4dGVuZCh7RGVmZXJyZWQ6ZnVuY3Rpb24obil7dmFyIGk9W1tcIm5vdGlmeVwiLFwicHJvZ3Jlc3NcIixlLkNhbGxiYWNrcyhcIm1lbW9yeVwiKSxlLkNhbGxiYWNrcyhcIm1lbW9yeVwiKSwyXSxbXCJyZXNvbHZlXCIsXCJkb25lXCIsZS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxlLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLDAsXCJyZXNvbHZlZFwiXSxbXCJyZWplY3RcIixcImZhaWxcIixlLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLGUuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksMSxcInJlamVjdGVkXCJdXSxvPVwicGVuZGluZ1wiLGM9e3N0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIG99LGFsd2F5czpmdW5jdGlvbigpe3JldHVybiBhLmRvbmUoYXJndW1lbnRzKS5mYWlsKGFyZ3VtZW50cyksdGhpc30sY2F0Y2g6ZnVuY3Rpb24oZSl7cmV0dXJuIGMudGhlbihudWxsLGUpfSxwaXBlOmZ1bmN0aW9uKCl7dmFyIG49YXJndW1lbnRzO3JldHVybiBlLkRlZmVycmVkKGZ1bmN0aW9uKHQpe2UuZWFjaChpLGZ1bmN0aW9uKHIsaSl7dmFyIG89ZS5pc0Z1bmN0aW9uKG5baVs0XV0pJiZuW2lbNF1dO2FbaVsxXV0oZnVuY3Rpb24oKXt2YXIgbj1vJiZvLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtuJiZlLmlzRnVuY3Rpb24obi5wcm9taXNlKT9uLnByb21pc2UoKS5wcm9ncmVzcyh0Lm5vdGlmeSkuZG9uZSh0LnJlc29sdmUpLmZhaWwodC5yZWplY3QpOnRbaVswXStcIldpdGhcIl0odGhpcyxvP1tuXTphcmd1bWVudHMpfSl9KSxuPW51bGx9KS5wcm9taXNlKCl9LHRoZW46ZnVuY3Rpb24obixvLGMpe2Z1bmN0aW9uIGEobixpLG8sYyl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIHM9dGhpcyx1PWFyZ3VtZW50cyxmPWZ1bmN0aW9uKCl7dmFyIGYsZDtpZighKG48bCkpe2lmKGY9by5hcHBseShzLHUpLGY9PT1pLnByb21pc2UoKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIpO2Q9ZiYmKFwib2JqZWN0XCI9PXR5cGVvZiBmfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBmKSYmZi50aGVuLGUuaXNGdW5jdGlvbihkKT9jP2QuY2FsbChmLGEobCxpLHQsYyksYShsLGkscixjKSk6KGwrKyxkLmNhbGwoZixhKGwsaSx0LGMpLGEobCxpLHIsYyksYShsLGksdCxpLm5vdGlmeVdpdGgpKSk6KG8hPT10JiYocz12b2lkIDAsdT1bZl0pLChjfHxpLnJlc29sdmVXaXRoKShzLHUpKX19LGQ9Yz9mOmZ1bmN0aW9uKCl7dHJ5e2YoKX1jYXRjaCh0KXtlLkRlZmVycmVkLmV4Y2VwdGlvbkhvb2smJmUuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayh0LGQuc3RhY2tUcmFjZSksbisxPj1sJiYobyE9PXImJihzPXZvaWQgMCx1PVt0XSksaS5yZWplY3RXaXRoKHMsdSkpfX07bj9kKCk6KGUuRGVmZXJyZWQuZ2V0U3RhY2tIb29rJiYoZC5zdGFja1RyYWNlPWUuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCkpLHdpbmRvdy5zZXRUaW1lb3V0KGQpKX19dmFyIGw9MDtyZXR1cm4gZS5EZWZlcnJlZChmdW5jdGlvbihsKXtpWzBdWzNdLmFkZChhKDAsbCxlLmlzRnVuY3Rpb24oYyk/Yzp0LGwubm90aWZ5V2l0aCkpLGlbMV1bM10uYWRkKGEoMCxsLGUuaXNGdW5jdGlvbihuKT9uOnQpKSxpWzJdWzNdLmFkZChhKDAsbCxlLmlzRnVuY3Rpb24obyk/bzpyKSl9KS5wcm9taXNlKCl9LHByb21pc2U6ZnVuY3Rpb24obil7cmV0dXJuIG51bGwhPW4/ZS5leHRlbmQobixjKTpjfX0sYT17fTtyZXR1cm4gZS5lYWNoKGksZnVuY3Rpb24oZSxuKXt2YXIgdD1uWzJdLHI9bls1XTtjW25bMV1dPXQuYWRkLHImJnQuYWRkKGZ1bmN0aW9uKCl7bz1yfSxpWzMtZV1bMl0uZGlzYWJsZSxpWzBdWzJdLmxvY2spLHQuYWRkKG5bM10uZmlyZSksYVtuWzBdXT1mdW5jdGlvbigpe3JldHVybiBhW25bMF0rXCJXaXRoXCJdKHRoaXM9PT1hP3ZvaWQgMDp0aGlzLGFyZ3VtZW50cyksdGhpc30sYVtuWzBdK1wiV2l0aFwiXT10LmZpcmVXaXRofSksYy5wcm9taXNlKGEpLG4mJm4uY2FsbChhLGEpLGF9LHdoZW46ZnVuY3Rpb24odCl7dmFyIHI9YXJndW1lbnRzLmxlbmd0aCxvPXIsYz1BcnJheShvKSxhPW4uY2FsbChhcmd1bWVudHMpLGw9ZS5EZWZlcnJlZCgpLHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe2NbZV09dGhpcyxhW2VdPWFyZ3VtZW50cy5sZW5ndGg+MT9uLmNhbGwoYXJndW1lbnRzKTp0LC0tcnx8bC5yZXNvbHZlV2l0aChjLGEpfX07aWYocjw9MSYmKGkodCxsLmRvbmUocyhvKSkucmVzb2x2ZSxsLnJlamVjdCksXCJwZW5kaW5nXCI9PT1sLnN0YXRlKCl8fGUuaXNGdW5jdGlvbihhW29dJiZhW29dLnRoZW4pKSlyZXR1cm4gbC50aGVuKCk7Zm9yKDtvLS07KWkoYVtvXSxzKG8pLGwucmVqZWN0KTtyZXR1cm4gbC5wcm9taXNlKCl9fSksZX0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJblpsYm1SdmNpOXFjWFZsY25rdmMzSmpMMlJsWm1WeWNtVmtMbXB6SWwwc0ltNWhiV1Z6SWpwYkltUmxabWx1WlNJc0ltVWlMQ0p1SWl3aWRDSXNJbklpTENKcElpd2lhWE5HZFc1amRHbHZiaUlzSW5CeWIyMXBjMlVpTENKallXeHNJaXdpWkc5dVpTSXNJbVpoYVd3aUxDSjBhR1Z1SWl3aVpYaDBaVzVrSWl3aVJHVm1aWEp5WldRaUxDSkRZV3hzWW1GamEzTWlMQ0p2SWl3aVl5SXNJbk4wWVhSbElpd2lZV3gzWVhseklpd2lZU0lzSW1GeVozVnRaVzUwY3lJc0luUm9hWE1pTENKallYUmphQ0lzSW5CcGNHVWlMQ0psWVdOb0lpd2lZWEJ3YkhraUxDSndjbTluY21WemN5SXNJbTV2ZEdsbWVTSXNJbkpsYzI5c2RtVWlMQ0p5WldwbFkzUWlMQ0p6SWl3aWRTSXNJbVlpTENKa0lpd2liQ0lzSWxSNWNHVkZjbkp2Y2lJc0ltNXZkR2xtZVZkcGRHZ2lMQ0p5WlhOdmJIWmxWMmwwYUNJc0ltVjRZMlZ3ZEdsdmJraHZiMnNpTENKemRHRmphMVJ5WVdObElpd2ljbVZxWldOMFYybDBhQ0lzSW1kbGRGTjBZV05yU0c5dmF5SXNJbmRwYm1SdmR5SXNJbk5sZEZScGJXVnZkWFFpTENKaFpHUWlMQ0prYVhOaFlteGxJaXdpYkc5amF5SXNJbVpwY21VaUxDSm1hWEpsVjJsMGFDSXNJbmRvWlc0aUxDSnNaVzVuZEdnaUxDSkJjbkpoZVNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVGQkxGRkJRVkVzVTBGQlV5eGpRVUZqTEdWQlFXVXNVMEZCVTBNc1JVRkJSVU1zUjBGQlJ5eFpRVUZoTEZOQlFWTkRMRWRCUVVWR0xFZEJRVWNzVFVGQlQwRXNSMEZCUlN4UlFVRlRSeXhIUVVGRlNDeEhRVUZITEV0QlFVMUJMRWRCUVVVc1VVRkJVMGtzUjBGQlJVZ3NSVUZCUlVNc1JVRkJSVU1zUjBGQlJ5eEhRVUZKUXl4RlFVRkZMRXRCUVVsSUxFZEJRVWRFTEVWQlFVVkxMRmRCUVZkRUxFVkJRVVZJTEVWQlFVVkxMRk5CUVZOR0xFVkJRVVZITEV0QlFVdE9MRWRCUVVkUExFdEJRVXRPTEVkQlFVZFBMRXRCUVV0T0xFZEJRVWRHTEVkQlFVZEVMRVZCUVVWTExGZEJRVmRFTEVWQlFVVklMRVZCUVVWVExFMUJRVTFPTEVWQlFVVkhMRXRCUVV0T0xFVkJRVVZETEVWQlFVVkRMRWRCUVVkRUxFVkJRVVZMTEV0QlFVc3NUMEZCVDA0c1IwRkJSeXhOUVVGTlJDeEhRVUZIUnl4RlFVRkZTU3hMUVVGTExFOUJRVTlRTEVsQlFVa3NUVUZCVDBFc1IwRkJSVmNzVVVGQlVVTXNVMEZCVXl4VFFVRlRXQ3hIUVVGSExFZEJRVWxITEV0QlFVa3NVMEZCVXl4WFFVRlhTaXhGUVVGRllTeFZRVUZWTEZWQlFWVmlMRVZCUVVWaExGVkJRVlVzVlVGQlZTeEpRVUZKTEZWQlFWVXNUMEZCVDJJc1JVRkJSV0VzVlVGQlZTeGxRVUZsWWl4RlFVRkZZU3hWUVVGVkxHVkJRV1VzUlVGQlJTeGhRVUZoTEZOQlFWTXNUMEZCVDJJc1JVRkJSV0VzVlVGQlZTeGxRVUZsWWl4RlFVRkZZU3hWUVVGVkxHVkJRV1VzUlVGQlJTeGhRVUZoUXl4RlFVRkZMRlZCUVZWRExFZEJRVWRETEUxQlFVMHNWMEZCVnl4TlFVRlBSaXhKUVVGSFJ5eFBRVUZQTEZkQlFWY3NUVUZCVDBNc1IwRkJSVllzUzBGQlMxY3NWMEZCVjFZc1MwRkJTMVVzVjBGQlYwTXNUVUZCVFVNc1RVRkJUU3hUUVVGVGNrSXNSMEZCUnl4TlFVRlBaU3hIUVVGRlRDeExRVUZMTEV0QlFVdFdMRWxCUVVselFpeExRVUZMTEZkQlFWY3NSMEZCU1hKQ0xFZEJRVVZyUWl4VFFVRlZMRTlCUVU5dVFpeEhRVUZGV1N4VFFVRlRMRk5CUVZOV0xFZEJRVWRHTEVWQlFVVjFRaXhMUVVGTGJrSXNSVUZCUlN4VFFVRlRSQ3hGUVVGRlF5eEhRVUZITEVkQlFVbFZMRWRCUVVWa0xFVkJRVVZMTEZkQlFWZEtMRVZCUVVWSExFVkJRVVVzVFVGQlRVZ3NSVUZCUlVjc1JVRkJSU3hIUVVGSll5eEhRVUZGWkN4RlFVRkZMRWxCUVVrc1YwRkJWeXhIUVVGSlNDeEhRVUZGWVN4SFFVRkhRU3hGUVVGRlZTeE5RVUZOU2l4TFFVRkxSQ3hWUVVGWGJFSXNTVUZCUjBRc1JVRkJSVXNzVjBGQlYwb3NSVUZCUlVzc1UwRkJVMHdzUlVGQlJVc3NWVUZCVlcxQ0xGTkJRVk4yUWl4RlFVRkZkMElzVVVGQlVXeENMRXRCUVV0T0xFVkJRVVY1UWl4VFFVRlRiRUlzUzBGQlMxQXNSVUZCUlRCQ0xGRkJRVkV4UWl4RlFVRkZSU3hGUVVGRkxFZEJRVWNzVVVGQlVXZENMRXRCUVV0T0xFZEJRVWRpTEVkQlFVZHJRaXhsUVVGbGJFSXNSVUZCUlN4UFFVRlBTeXhYUVVGWFNTeExRVUZMTEZOQlFWTlVMRVZCUVVWaExFVkJRVVZETEVkQlFVY3NVVUZCVTBjc1IwRkJSV3BDTEVWQlFVVkhMRVZCUVVWVkxFVkJRVVZETEVkQlFVY3NUVUZCVHl4WlFVRlhMRWRCUVVsakxFZEJRVVZVTEV0QlFVdFZMRVZCUVVWWUxGVkJRVlZaTEVWQlFVVXNWMEZCVnl4SFFVRkpRU3hIUVVGRlF5eERRVUZGTEUxQlFVc3ZRaXhGUVVGRlowTXNSMEZCUnl4RFFVRkRMRWRCUVVkR0xFVkJRVVZxUWl4RlFVRkZWU3hOUVVGTlN5eEZRVUZGUXl4SFFVRkhReXhKUVVGSk0wSXNSVUZCUlVVc1ZVRkJWU3hMUVVGTkxFbEJRVWswUWl4WFFVRlZMREpDUVVFMFFrWXNSMEZCUlVRc1NVRkJTU3huUWtGQmFVSkJMRWxCUVVjc2EwSkJRVzFDUVN4TFFVRkpRU3hGUVVGRmNrSXNTMEZCUzFZc1JVRkJSVXNzVjBGQlZ6SkNMRWRCUVVkcVFpeEZRVUZGYVVJc1JVRkJSWHBDTEV0QlFVdDNRaXhGUVVGRllpeEZRVUZGWlN4RlFVRkZOMElzUlVGQlJVWXNSVUZCUldFc1IwRkJSMGNzUlVGQlJXVXNSVUZCUlRkQ0xFVkJRVVZFTEVWQlFVVlpMRXRCUVV0clFpeEpRVUZKUkN4RlFVRkZla0lzUzBGQlMzZENMRVZCUVVWaUxFVkJRVVZsTEVWQlFVVTNRaXhGUVVGRlJpeEZRVUZGWVN4SFFVRkhSeXhGUVVGRlpTeEZRVUZGTjBJc1JVRkJSVVFzUlVGQlJWa3NSMEZCUjBjc1JVRkJSV1VzUlVGQlJUZENMRVZCUVVWR0xFVkJRVVZGTEVWQlFVVXJRaXhsUVVGbGNrSXNTVUZCU1Zvc1NVRkJTVEpDTEVWQlFVVXNUMEZCVDBNc1IwRkJSME1zUzBGQlMyaENMRWRCUVVkWUxFVkJRVVZuUXl4aFFVRmhVQ3hGUVVGRlF5eE5RVUZOUlN4RlFVRkZha0lzUlVGQlJXZENMRVZCUVVVc1YwRkJWeXhKUVVGSlFTeEpRVUZKTEUxQlFVMDNRaXhIUVVGSFJpeEZRVUZGV1N4VFFVRlRlVUlzWlVGQlpYSkRMRVZCUVVWWkxGTkJRVk41UWl4alFVRmpia01zUlVGQlJUaENMRVZCUVVWTkxGbEJRVmx5UXl4RlFVRkZMRWRCUVVkblF5eEpRVUZKYmtJc1NVRkJTVmdzU1VGQlNUQkNMRVZCUVVVc1QwRkJUME1zUjBGQlJ6VkNMRWxCUVVsRkxFVkJRVVZ0UXl4WFFVRlhWaXhGUVVGRlF5eExRVUZOTjBJc1IwRkJSU3RDTEV0QlFVdG9ReXhGUVVGRldTeFRRVUZUTkVJc1pVRkJaVklzUlVGQlJVMHNWMEZCVjNSRExFVkJRVVZaTEZOQlFWTTBRaXhuUWtGQlowSkRMRTlCUVU5RExGZEJRVmRXTEV0QlFVc3NSMEZCU1VNc1IwRkJSU3hEUVVGRkxFOUJRVTlxUXl4SFFVRkZXU3hUUVVGVExGTkJRVk54UWl4SFFVRkhOMElzUlVGQlJTeEhRVUZITEVkQlFVZDFReXhKUVVGSmVrSXNSVUZCUlN4RlFVRkZaU3hGUVVGRmFrTXNSVUZCUlVzc1YwRkJWMVVzUjBGQlIwRXNSVUZCUldJc1JVRkJSU3RDTEVWQlFVVkZMR0ZCUVdFdlFpeEZRVUZGTEVkQlFVY3NSMEZCUjNWRExFbEJRVWw2UWl4RlFVRkZMRVZCUVVWbExFVkJRVVZxUXl4RlFVRkZTeXhYUVVGWFNpeEhRVUZIUVN4RlFVRkZReXhKUVVGSlJTeEZRVUZGTEVkQlFVY3NSMEZCUjNWRExFbEJRVWw2UWl4RlFVRkZMRVZCUVVWbExFVkJRVVZxUXl4RlFVRkZTeXhYUVVGWFV5eEhRVUZIUVN4RlFVRkZXQ3hOUVVGTlJ5eFhRVUZYUVN4UlFVRlJMRk5CUVZOTUxFZEJRVWNzVFVGQlR5eFBRVUZOUVN4RlFVRkZSQ3hGUVVGRlZ5eFBRVUZQVml4RlFVRkZZeXhIUVVGSFFTeEpRVUZKUnl4SlFVRkxMRTlCUVU5c1FpeEhRVUZGZFVJc1MwRkJTMjVDTEVWQlFVVXNVMEZCVTBvc1JVRkJSVU1zUjBGQlJ5eEhRVUZKUXl4SFFVRkZSQ3hGUVVGRkxFZEJRVWRGTEVWQlFVVkdMRVZCUVVVc1JVRkJSMk1zUjBGQlJXUXNSVUZCUlN4SlFVRkpReXhGUVVGRmVVTXNTVUZCU1hoRExFZEJRVWRFTEVWQlFVVjVReXhKUVVGSkxGZEJRVmMzUWl4RlFVRkZXQ3hIUVVGSFF5eEZRVUZGTEVWQlFVVktMRWRCUVVjc1IwRkJSelJETEZGQlFWRjRReXhGUVVGRkxFZEJRVWNzUjBGQlIzbERMRTFCUVUwelF5eEZRVUZGZVVNc1NVRkJTVEZETEVWQlFVVXNSMEZCUnpaRExFMUJRVTAxUWl4RlFVRkZha0lzUlVGQlJTeEpRVUZKTEZkQlFWY3NUVUZCVDJsQ0xFZEJRVVZxUWl4RlFVRkZMRWRCUVVjc1VVRkJVVzFDTEU5QlFVOUdMRVZCUVVVc1QwRkJUMFVzUzBGQlMwUXNWMEZCVjBNc1RVRkJUVVlzUlVGQlJXcENMRVZCUVVVc1IwRkJSeXhSUVVGUlF5eEZRVUZGTmtNc1YwRkJWMmhETEVWQlFVVlVMRkZCUVZGWkxFZEJRVWRxUWl4SFFVRkhRU3hGUVVGRlRTeExRVUZMVnl4RlFVRkZRU3hIUVVGSFFTeEhRVUZIT0VJc1MwRkJTeXhUUVVGVE9VTXNSMEZCUnl4SFFVRkpReXhIUVVGRlowSXNWVUZCVlRoQ0xFOUJRVTl1UXl4RlFVRkZXQ3hGUVVGRldTeEZRVUZGYlVNc1RVRkJUWEJETEVkQlFVZEpMRVZCUVVWcVFpeEZRVUZGVFN4TFFVRkxXU3hYUVVGWFl5eEZRVUZGYWtNc1JVRkJSVmtzVjBGQlYybENMRVZCUVVVc1UwRkJVemRDTEVkQlFVY3NUVUZCVHl4VlFVRlRSU3hIUVVGSFlTeEZRVUZGWml4SFFVRkhiMElzUzBGQlMwWXNSVUZCUld4Q0xFZEJRVWR0UWl4VlFVRlZPRUlzVDBGQlR5eEZRVUZGYUVRc1JVRkJSVTBzUzBGQlMxa3NWMEZCVjJwQ0xFbEJRVWxETEVkQlFVYzRRaXhGUVVGRlJ5eFpRVUZaY2tJc1JVRkJSVWNzU1VGQlN5eEpRVUZIWml4SFFVRkhMRWxCUVVsRExFVkJRVVZHTEVWQlFVVXJRaXhGUVVGRmVrSXNTMEZCUzNGQ0xFVkJRVVZtTEVsQlFVbGhMRkZCUVZGTkxFVkJRVVZNTEZGQlFWRXNXVUZCV1Vzc1JVRkJSV3BDTEZOQlFWTm9RaXhGUVVGRlN5eFhRVUZYWVN4RlFVRkZTaXhKUVVGSlNTeEZRVUZGU2l4SFFVRkhTaXhQUVVGUExFMUJRVTkxUWl4SFFVRkZka0lzVFVGQlR5eE5RVUZMU1N4TFFVRkxWaXhGUVVGRll5eEZRVUZGU2l4SFFVRkhaU3hGUVVGRlppeEhRVUZIYlVJc1JVRkJSVXdzVDBGQlVTeFBRVUZQU3l4SFFVRkZNMElzWVVGQllVNGlMQ0ptYVd4bElqb2lkbVZ1Wkc5eUwycHhkV1Z5ZVM5emNtTXZaR1ZtWlhKeVpXUXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKa1pXWnBibVVvVzF3aUxpOWpiM0psWENJc1hDSXVMM1poY2k5emJHbGpaVndpTEZ3aUxpOWpZV3hzWW1GamEzTmNJbDBzWm5WdVkzUnBiMjRvWlN4dUtYdGNJblZ6WlNCemRISnBZM1JjSWp0bWRXNWpkR2x2YmlCMEtHVXBlM0psZEhWeWJpQmxmV1oxYm1OMGFXOXVJSElvWlNsN2RHaHliM2NnWlgxbWRXNWpkR2x2YmlCcEtHNHNkQ3h5S1h0MllYSWdhVHQwY25sN2JpWW1aUzVwYzBaMWJtTjBhVzl1S0drOWJpNXdjbTl0YVhObEtUOXBMbU5oYkd3b2Jpa3VaRzl1WlNoMEtTNW1ZV2xzS0hJcE9tNG1KbVV1YVhOR2RXNWpkR2x2YmlocFBXNHVkR2hsYmlrL2FTNWpZV3hzS0c0c2RDeHlLVHAwTG1OaGJHd29kbTlwWkNBd0xHNHBmV05oZEdOb0tHVXBlM0l1WTJGc2JDaDJiMmxrSURBc1pTbDlmWEpsZEhWeWJpQmxMbVY0ZEdWdVpDaDdSR1ZtWlhKeVpXUTZablZ1WTNScGIyNG9iaWw3ZG1GeUlHazlXMXRjSW01dmRHbG1lVndpTEZ3aWNISnZaM0psYzNOY0lpeGxMa05oYkd4aVlXTnJjeWhjSW0xbGJXOXllVndpS1N4bExrTmhiR3hpWVdOcmN5aGNJbTFsYlc5eWVWd2lLU3d5WFN4YlhDSnlaWE52YkhabFhDSXNYQ0prYjI1bFhDSXNaUzVEWVd4c1ltRmphM01vWENKdmJtTmxJRzFsYlc5eWVWd2lLU3hsTGtOaGJHeGlZV05yY3loY0ltOXVZMlVnYldWdGIzSjVYQ0lwTERBc1hDSnlaWE52YkhabFpGd2lYU3hiWENKeVpXcGxZM1JjSWl4Y0ltWmhhV3hjSWl4bExrTmhiR3hpWVdOcmN5aGNJbTl1WTJVZ2JXVnRiM0o1WENJcExHVXVRMkZzYkdKaFkydHpLRndpYjI1alpTQnRaVzF2Y25sY0lpa3NNU3hjSW5KbGFtVmpkR1ZrWENKZFhTeHZQVndpY0dWdVpHbHVaMXdpTEdNOWUzTjBZWFJsT21aMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUc5OUxHRnNkMkY1Y3pwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCaExtUnZibVVvWVhKbmRXMWxiblJ6S1M1bVlXbHNLR0Z5WjNWdFpXNTBjeWtzZEdocGMzMHNZMkYwWTJnNlpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlHTXVkR2hsYmlodWRXeHNMR1VwZlN4d2FYQmxPbVoxYm1OMGFXOXVLQ2w3ZG1GeUlHNDlZWEpuZFcxbGJuUnpPM0psZEhWeWJpQmxMa1JsWm1WeWNtVmtLR1oxYm1OMGFXOXVLSFFwZTJVdVpXRmphQ2hwTEdaMWJtTjBhVzl1S0hJc2FTbDdkbUZ5SUc4OVpTNXBjMFoxYm1OMGFXOXVLRzViYVZzMFhWMHBKaVp1VzJsYk5GMWRPMkZiYVZzeFhWMG9ablZ1WTNScGIyNG9LWHQyWVhJZ2JqMXZKaVp2TG1Gd2NHeDVLSFJvYVhNc1lYSm5kVzFsYm5SektUdHVKaVpsTG1selJuVnVZM1JwYjI0b2JpNXdjbTl0YVhObEtUOXVMbkJ5YjIxcGMyVW9LUzV3Y205bmNtVnpjeWgwTG01dmRHbG1lU2t1Wkc5dVpTaDBMbkpsYzI5c2RtVXBMbVpoYVd3b2RDNXlaV3BsWTNRcE9uUmJhVnN3WFN0Y0lsZHBkR2hjSWwwb2RHaHBjeXh2UDF0dVhUcGhjbWQxYldWdWRITXBmU2w5S1N4dVBXNTFiR3g5S1M1d2NtOXRhWE5sS0NsOUxIUm9aVzQ2Wm5WdVkzUnBiMjRvYml4dkxHTXBlMloxYm1OMGFXOXVJR0VvYml4cExHOHNZeWw3Y21WMGRYSnVJR1oxYm1OMGFXOXVLQ2w3ZG1GeUlITTlkR2hwY3l4MVBXRnlaM1Z0Wlc1MGN5eG1QV1oxYm1OMGFXOXVLQ2w3ZG1GeUlHWXNaRHRwWmlnaEtHNDhiQ2twZTJsbUtHWTlieTVoY0hCc2VTaHpMSFVwTEdZOVBUMXBMbkJ5YjIxcGMyVW9LU2wwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0Z3aVZHaGxibUZpYkdVZ2MyVnNaaTF5WlhOdmJIVjBhVzl1WENJcE8yUTlaaVltS0Z3aWIySnFaV04wWENJOVBYUjVjR1Z2WmlCbWZIeGNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUJtS1NZbVppNTBhR1Z1TEdVdWFYTkdkVzVqZEdsdmJpaGtLVDlqUDJRdVkyRnNiQ2htTEdFb2JDeHBMSFFzWXlrc1lTaHNMR2tzY2l4aktTazZLR3dyS3l4a0xtTmhiR3dvWml4aEtHd3NhU3gwTEdNcExHRW9iQ3hwTEhJc1l5a3NZU2hzTEdrc2RDeHBMbTV2ZEdsbWVWZHBkR2dwS1NrNktHOGhQVDEwSmlZb2N6MTJiMmxrSURBc2RUMWJabDBwTENoamZIeHBMbkpsYzI5c2RtVlhhWFJvS1NoekxIVXBLWDE5TEdROVl6OW1PbVoxYm1OMGFXOXVLQ2w3ZEhKNWUyWW9LWDFqWVhSamFDaDBLWHRsTGtSbFptVnljbVZrTG1WNFkyVndkR2x2YmtodmIyc21KbVV1UkdWbVpYSnlaV1F1WlhoalpYQjBhVzl1U0c5dmF5aDBMR1F1YzNSaFkydFVjbUZqWlNrc2Jpc3hQajFzSmlZb2J5RTlQWEltSmloelBYWnZhV1FnTUN4MVBWdDBYU2tzYVM1eVpXcGxZM1JYYVhSb0tITXNkU2twZlgwN2JqOWtLQ2s2S0dVdVJHVm1aWEp5WldRdVoyVjBVM1JoWTJ0SWIyOXJKaVlvWkM1emRHRmphMVJ5WVdObFBXVXVSR1ZtWlhKeVpXUXVaMlYwVTNSaFkydEliMjlyS0NrcExIZHBibVJ2ZHk1elpYUlVhVzFsYjNWMEtHUXBLWDE5ZG1GeUlHdzlNRHR5WlhSMWNtNGdaUzVFWldabGNuSmxaQ2htZFc1amRHbHZiaWhzS1h0cFd6QmRXek5kTG1Ga1pDaGhLREFzYkN4bExtbHpSblZ1WTNScGIyNG9ZeWsvWXpwMExHd3VibTkwYVdaNVYybDBhQ2twTEdsYk1WMWJNMTB1WVdSa0tHRW9NQ3hzTEdVdWFYTkdkVzVqZEdsdmJpaHVLVDl1T25RcEtTeHBXekpkV3pOZExtRmtaQ2hoS0RBc2JDeGxMbWx6Um5WdVkzUnBiMjRvYnlrL2J6cHlLU2w5S1M1d2NtOXRhWE5sS0NsOUxIQnliMjFwYzJVNlpuVnVZM1JwYjI0b2JpbDdjbVYwZFhKdUlHNTFiR3doUFc0L1pTNWxlSFJsYm1Rb2JpeGpLVHBqZlgwc1lUMTdmVHR5WlhSMWNtNGdaUzVsWVdOb0tHa3NablZ1WTNScGIyNG9aU3h1S1h0MllYSWdkRDF1V3pKZExISTlibHMxWFR0alcyNWJNVjFkUFhRdVlXUmtMSEltSm5RdVlXUmtLR1oxYm1OMGFXOXVLQ2w3YnoxeWZTeHBXek10WlYxYk1sMHVaR2x6WVdKc1pTeHBXekJkV3pKZExteHZZMnNwTEhRdVlXUmtLRzViTTEwdVptbHlaU2tzWVZ0dVd6QmRYVDFtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJoVzI1Yk1GMHJYQ0pYYVhSb1hDSmRLSFJvYVhNOVBUMWhQM1p2YVdRZ01EcDBhR2x6TEdGeVozVnRaVzUwY3lrc2RHaHBjMzBzWVZ0dVd6QmRLMXdpVjJsMGFGd2lYVDEwTG1acGNtVlhhWFJvZlNrc1l5NXdjbTl0YVhObEtHRXBMRzRtSm00dVkyRnNiQ2hoTEdFcExHRjlMSGRvWlc0NlpuVnVZM1JwYjI0b2RDbDdkbUZ5SUhJOVlYSm5kVzFsYm5SekxteGxibWQwYUN4dlBYSXNZejFCY25KaGVTaHZLU3hoUFc0dVkyRnNiQ2hoY21kMWJXVnVkSE1wTEd3OVpTNUVaV1psY25KbFpDZ3BMSE05Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUdaMWJtTjBhVzl1S0hRcGUyTmJaVjA5ZEdocGN5eGhXMlZkUFdGeVozVnRaVzUwY3k1c1pXNW5kR2crTVQ5dUxtTmhiR3dvWVhKbmRXMWxiblJ6S1RwMExDMHRjbng4YkM1eVpYTnZiSFpsVjJsMGFDaGpMR0VwZlgwN2FXWW9janc5TVNZbUtHa29kQ3hzTG1SdmJtVW9jeWh2S1NrdWNtVnpiMngyWlN4c0xuSmxhbVZqZENrc1hDSndaVzVrYVc1blhDSTlQVDFzTG5OMFlYUmxLQ2w4ZkdVdWFYTkdkVzVqZEdsdmJpaGhXMjlkSmlaaFcyOWRMblJvWlc0cEtTbHlaWFIxY200Z2JDNTBhR1Z1S0NrN1ptOXlLRHR2TFMwN0tXa29ZVnR2WFN4ektHOHBMR3d1Y21WcVpXTjBLVHR5WlhSMWNtNGdiQzV3Y205dGFYTmxLQ2w5ZlNrc1pYMHBPMXh1THk4aklITnZkWEpqWlUxaGNIQnBibWRWVWt3OVpHRjBZVHBoY0hCc2FXTmhkR2x2Ymk5cWMyOXVPMk5vWVhKelpYUTlkWFJtT0R0aVlYTmxOalFzWlhsS01scFlTbnBoVnpsMVNXcHZla3hEU25waU0xWjVXVEpXZWtscWNHSkpibHBzWW0xU2RtTnBPWEZqV0Zac1kyNXJkbU16U21wTU1sSnNXbTFXZVdOdFZtdE1iWEI2U1d3d2MwbHROV2hpVjFaNlNXcHdZa2x0VW14YWJXeDFXbE5KYzBsdFZXbE1RMHAxU1dsM2FXUkRTWE5KYmtscFRFTktjRWxwZDJsaFdFNUhaRmMxYW1SSGJIWmlhVWx6U1c1Q2VXSXlNWEJqTWxWcFRFTkthbGxYZUhOSmFYZHBXa2M1ZFZwVFNYTkpiVnBvWVZkM2FVeERTakJoUjFaMVNXbDNhVnBZYURCYVZ6VnJTV2wzYVZKSFZtMWFXRXA1V2xkUmFVeERTa1JaVjNoeldXMUdhbUV6VFdsTVEwcDJTV2wzYVZsNVNYTkpiazR3V1ZoU2JFbHBkMmxaVjNneldWaHNla2xwZDJsWlUwbHpTVzFHZVZvelZuUmFWelV3WTNsSmMwbHVVbTloV0UxcFRFTkthbGxZVW1waFEwbHpTVzVDY0dOSFZXbE1RMHBzV1ZkT2IwbHBkMmxaV0VKM1lraHJhVXhEU25kamJUbHVZMjFXZW1ONVNYTkpiVFYyWkVkc2JXVlRTWE5KYmtwc1l6STVjMlJ0VldsTVEwcDVXbGR3YkZrelVXbE1RMHA2U1dsM2FXUlRTWE5KYlZscFRFTkthMGxwZDJsaVEwbHpTV3hTTldOSFZrWmpia3AyWTJsSmMwbHROWFprUjJ4dFpWWmtjR1JIWjJsTVEwcDVXbGhPZG1KSVdteFdNbXd3WVVOSmMwbHRWalJaTWxaM1pFZHNkbUpyYUhaaU1uTnBURU5LZW1SSFJtcGhNVko1V1ZkT2JFbHBkMmxqYlZaeFdsZE9NRll5YkRCaFEwbHpTVzFrYkdSR1RqQlpWMDV5VTBjNWRtRjVTWE5KYm1Sd1ltMVNkbVI1U1hOSmJrNXNaRVpTY0dKWFZuWmtXRkZwVEVOS2FGcEhVV2xNUTBwcllWaE9hRmx0ZUd4SmFYZHBZa2M1YW1GNVNYTkpiVnB3WTIxVmFVeERTbTFoV0Vwc1ZqSnNNR0ZEU1hOSmJtUnZXbGMwYVV4RFNuTmFWelZ1WkVkbmFVeERTa0pqYmtwb1pWTktaRXhEU25SWldFSjNZVmMxYm1ONVNUWkphMFpDVVZWR1FreEdSa0pSVmtWelZUQkdRbFY1ZUdwUlZVWnFURWRXUWxGWFZYTlZNRVpDVlRCTmMxSlZSa0pTVlUxelVqQkdRbEo1ZUZwUlZVWm9URVpPUWxGV1RrUk1SV1JDVVZWV1IweEZaRUpSVldOelZGVkdRbFF3UlhOU01FWkNVbE40VWxGVlJsUlNlWGhJVVZWR1JsTkRlRWhSVlVaSVRFVjBRbEZWTVVKTVJXUkNVVlZWYzFWVlJrSlZNR3R6VWpCR1FsSlZaM05TVlVaQ1VsVk5jMUpWUmtKU1ZVMXpVakJHUWxKNWVFaFJWVVpLVVhsNFJsRlZSa1pNUlhSQ1VWVnNTVXhGWkVKUlZXUkZURVZXUWxGVlZreE1SbVJDVVZaa1JVeEZWa0pSVlZaSlRFVldRbEZWVmt4TVJrNUNVVlpPUjB4RlZrSlJWVlpJVEVWMFFsRlZkRTlNUldSQ1VWVmtVRXhGZEVKUlZYUlBURVZrUWxGVlpGQk1SWFJDVVZWMFQweEZaRUpSVldSSFRFVmtRbEZWWkVWTVJWWkNVVlZXVEV4R1pFSlJWbVJGVEVWV1FsRlZWa2xNUlZaQ1VWVldWRXhGTVVKUlZURlBURVZXUWxGVlZraE1SWFJDVVZWMFQweEZWa0pSVlZaRVRFVldRbEZWVmtSTVJXUkNVVlZrUlV4RlZrSlJWVlpNVEVWMFFsRlZjM05VTUVaQ1ZEQTBjMUl3UmtKU2VYaE9VVlZHVGxKRGVFaFJWVVpJVW5sNFJsRlZSa1pUVTNoTVVWVkdURXhGT1VKUlZUbFJURVZzUWxGVmEzTlVWVVpDVkRCRmMxSXdSa0pTVm1OelZWVkdRbFZWVFhOVk1FWkNWWGw0VkZGVlJsUlhRM2hJVVZWR1NFeEZaRUpSVld4SVRFVjBRbEZWYTNOVk1FWkNWWGw0V0ZGVlJsaFRhWGhHVVZWR1JsbFRlRlpSVlVaV1RFWldRbEZXVm1sTVJWWkNVVlZXYUV4R1ZrSlJWbFZ6VmxWR1FsWlRlRXBSVlVaS1RFWldRbEZXVlhOVU1FWkNWREpKYzFKVlJrSlNWMFZ6VmxWR1FsWlRlR3hSVlVac1dXbDRSbEZWUmtaWlUzaFdVVlZHVmt4SFZrSlJWMVZ6VWxWR1FsSlRlR2hSVlVab1RFWk9RbEZXVFhOVU1FWkNWREpKYzFKVlJrSlNWMFZ6VmxWR1FsWlRlR3hSVlVac1dXbDRSbEZWUmtaWlUzaFdVVlZHVmt4SFZrSlJWMVZ6VWxWR1FsSlRlR2hSVlVab1VYbDRSbEZWUmtaTVJsWkNVVlpXUkV4RlpFSlJWV1JFVEVVeFFsRlZNSE5XTUVaQ1ZubDRUbEZWUmxCU2FYaEtVVlZHU0ZKNWVGQlJWVVpRVEVaa1FsRldZM05VVlVaQ1ZEQk5jMUl3UmtKU1ZsbHpVekJHUWxNeFkzTldNRVpDVmpGWmMxTXdSa0pUTVZWelZqQkdRbFl3VFhOVVZVWkNWRlZOYzFSVlJrSlVVM2hVVVZWR1ZHTnJTWE5TTUVaQ1VubDRUbEZWUmxCYVUzaElVVlZHUmxSRGVFeFJWVVpNVEVWMFFsRlZkRmRNUld4Q1VWVnNlbEZwZUV4UlZVWk1URVprUWxGV1kzTlNNRVpDVTFoS1EweEZaRUpSVlZaeVVXbDRWRkZWUmxaTVJUbENVVlU1ZFZGcGVFaFJWVVpHVjFONFZGRlZSbFJNUms1Q1VWWk9WMHhGWkVKUlZXUkhURVZXUWxGVlZqRlJhWGhNVVZWR1RHSnJTWE5TVlVaQ1VsTjRWRkZWUmxSU1EzaEdVVlZHUmxGNWVFaFJWVVpJVEVWa1FsRlZiRlpNUldSQ1VWVldhMHhGVmtKUlZWWk1URVprUWxGV1pFdE1SVlpDVVZWV1NFeEZWa0pSVlZWelZGVkdRbFJWWjNOU1ZVWkNVbFZqYzFKVlJrSlNVM2hJVVZWR1NsbDVlRWhSVlVaR1drTjRSbEZWUmtaTVJXeENVVlZyYzFZd1JrSldlWGhJVVZWR1NsTkRlRWhSVlVaR1dWTjRTRkZWUmtoUlUzaEdVVlZHUmxaVGVFNVJWVVpPVTJsNFRGRlZSa3hTUTNoV1VWVkdXR0pGU1hOVFZVWkNVakJSYzFKVlJrSlNWWE56VmpCR1FsWXdiM05TVlVaQ1VsVnpjMVV3UmtKVk1IZHpVbFZHUWxKVmMzTldWVVpDVmxjeFEweEdUa0pSVms0eVVXbDRSbEZWUmtaa01FbHpWVlZHUWxWWGVFTk1SWFJDVVZWMFQweEZWa0pSVlZZMVVXbDRWRkZWUmxSaVJVbHpVekJHUWxNeFFYTlNWVVpDVWxSQ1EweEdSa0pSVmtWNFVXbDRSbEZWUmtaU1UzaEdVVlZHUmt4RlpFSlJWV056VlZWR1FsVlhaRU5NUlhSQ1VWVjBUMHhGWkVKUlZXUnBURVZrUWxGVlpISlJhWGhzVVZWR2JHSkZTWE5TVlVaQ1VsTjRVRkZWUmxCVGVYaFlVVlZHV0ZOVGVFeFJWVVpNVEVaT1FsRldUbFZNUlZaQ1VWVldhRXhGVmtKUlZWWkVURVZrUWxGVlkzTlZWVVpDVlRCamMxSXdSa0pTVjNCRFRFVldRbEZWVmtoTVJWWkNVVlZXVmt4RlZrSlJWVlpFVEVWa1FsRlZZM05VVlVaQ1ZIbDRXbEZWUmxoTVJXUkNVVlZzYWt4RlpFSlJWVlpWVEVWMFFsRlZkRlpNUlZaQ1VWVldXVXhHVmtKUlZsWmFURVZXUWxGVlZYTldNRVpDVm5sNFNGRlZSa3BSVTNoSVVWVkdSbEY1ZUVSUlZVWkdURVV4UWxGVmMzWlJhWGhHVVZWR1Jsb3dUWE5TTUVaQ1VubDRSRkZWUmtSTVJXUkNVVlZrUjB4RlZrSlJWVlp4VVdsNFJsRlZSa1pXVTNoT1VWVkdUbE41ZUVaUlZVWkdVWGw0U0ZGVlJraFJlWGhLVVZWR1NrMHdTWE5TVlVaQ1VsVlZjMVpWUmtKV1UzaE1VVlZHVGt4RmJFSlJWV3N3VVdsNFdGRlZSbFpNUkVwRFVWVkZNRkZyV1hOU01FWkNVbFZSYzFOVlJrSlRVM2h1VVd0R1FtRlZTa0pNUld4Q1VWVmpjMkV3U2tKUlZ6RkRVVk40VEZGVlJrcFJVM2hHVVZWR1JtTnJTWE5UTUVaQ1V6RlpjMUpWUmtKU1ZYTnpWakJHUWxaNlNrTk1SV1JDVVZWa2NWRnBlRVpSVlVaR1lWVkpjMUpWUmtKU1dIQkRURVYwUWxGVmRETlJhWGhHVVZWR1JsbHBlRVpSVlVaR1dsTjRSbEZWUmtaT01FbHpVbFZHUWxKVldYTlNWVVpDVWxkRmMxSXdSa0pTTUdOelVsVkdRbEpYVlhOU1ZVWkNVbFJrUTB4RlZrSlJWVlpGVEVWV1FsRlZWbHBNUlhSQ1VWVjBjbEZwZUVwUlZVWktVa040UmxGVlJrWmxhMGx6VXpCR1FsTXpaRU5NUlZaQ1VWVldhVXhGVmtKUlZWWnNURVZXUWxGVlZUTlJhWGhHVVZWR1JsSnBlRVpSVlVaR1dWTjRTRkZWUmtoU2VYaEdVVlZHUmxwVGVFWlJWVVpHVGpCSmMxSlZSa0pTVlZGelVsVkdRbEpXYTNOU01FWkNVakJqYzFKVlJrSlNWMVZ6VWxWR1FsSlVaRU5NUlZaQ1VWVldSMHhGVmtKUlZWWkdURVZXUWxGVlZYSlJhWGhzVVZWR2JHTnJTWE5UVlVaQ1UxWnZjMU5WUmtKVFZFcERURVZXUWxGVlZYTlVNRVpDVkRCTmMxSXdSa0pTTUUxelV6QkdRbE15YUVOTVJXUkNVVlZrV1V4RlZrSlJWVlp1VVhsNGFGRlZSbWhWUTNoR1VWVkdSbEY1ZUU1UlZVWk9VbE40UmxGVlJrWmhhMGx6VWxWR1FsSlhaRU5NUlZaQ1VWVlZjMVl3UmtKV2VYaEtVVlZHU2xGVGVFcFJWVVpLVEVVeFFsRlZNRE5SYVhoSVVWVkdTRkpwZUVaUlZVWkdWMU40VkZGVlJsUmxWVWx6V2xWR1FscFlTa1JNUlZaQ1VWVldXa3hHVGtKUlZrNDFVV2w0YWxGVlJtcGlhMDF6VWxWR1FsSlVhRU5NUlZaQ1VWVldUa3hHYkVKUlZteDVVWGw0UmxGVlJrWk1SV1JDVVZWa2JsRjVlRXBSVlVaS1ltdEpjMU5WUmtKVFZtZHpVMVZHUWxOVVFrTk1SVlpDVVZWVmMxUXdSa0pVTUUxelVqQkdRbEo2VmtOTVJXeENVVlZzUmt4RlZrSlJWVlowVVhsNFdGRlZSbGhXYVhoR1VWVkdSbEY1ZUV4UlZVWk9UakJKYzFJd1JrSlNVM1JEVEVWMFFsRlZkRzlSZVhoR1VWVkdSbGRUZUZSUlZVWlVUa1ZKYzFwVlJrSmFWa2x6VWxWR1FsSlZNSE5XTUVaQ1ZqTlNSRXhGVmtKUlZWWmFURVpPUWxGV1RUQlJhWGh1VVd0R1Fsb3dTa1JNUlRsQ1VWVTVSRXhHWkVKUlZtUlhURVYwUWxGVmMzTlNNRVpDVTFWTmMxSXdSa0pTVTNoRVVWVkdSa3hGT1VKUlZUbHhVWGw0U0ZGVlJrWlhVM2hVVVZWR1ZFeEdUa0pSVms1NFVXbDRTRkZWUmtoT01FbHpVbFZHUWxKVGVFaFJWVVpJVEVWa1FsRlZaREZSZVhoS1VWVkdTbVZyU1hOU1ZVWkNVbE40UmxGVlJrWmFVM2hHVVZWR1JtRnJUWE5TVlVaQ1VsVnpjMVl3UmtKV01WVnpVakJHUWxJd1JYTlNWVVpDVWxkSmMxSlZSa0pTVTNSRFRFVldRbEZWVmtaTVIwWkNVVmRGZGxGcGVFWlJWVVpHVEVWa1FsRlZZM05TTUVaQ1VqTldSRXhGYkVKUlZXdzJVV2w0UmxGVlJrWk1SVlpDVVZWV2JFeEZWa0pSVlZaeFVYbDRSbEZWUmtaVGVYaFlVVlZHV0ZOcGVFaFJWVVpJVVZONFJsRlZSa1pSZVhoS1VWVkdTbEpUZUVaUlZVWkdURVZrUWxGVlkzTlNNRVpDVWpOV1JFeEZiRUpSVld3MlVXbDRSbEZWUmtaTVJWWkNVVlZXYkV4RlZrSlJWVlp4VVhsNFJsRlZSa1pUZVhoWVVWVkdXRlY1ZUVoUlZVWklVVk40UmxGVlJrWlhRM2hPVVZWR1RsSjVlRmhSVlVaWVVWTjRVbEZWUmxKTVJrNUNVVlpPVFV4RlpFSlJWV056VkZWR1FsUjVlRkJSVlVaT1VWTjRSbEZWUmtaU1EzaEdVVlZHUmxaNWVGQlJWVVpRVm1sNFJsRlZSa1paZVhoSVVWVkdTRkZUZUVwUlZVWktVbmw0U2xGVlJreE1SVGxDVVZVNWMxRnBlRWhSVlVaR1pGVkpjMU13UmtKVE1qVkRURVZXUWxGVlZYTlZNRVpDVlRCdmMxSlZSa0pTVlUxelVqQkdRbEo1ZUVoUlZVWktVWGw0U0ZGVlJrWlNRM2hHVVZWR1JreEZaRUpSVldSR1RFVldRbEZWVmtkTVJWWkNVVlZWYzFKVlJrSlNNazF6VWpCR1FsSlhVWE5TVlVaQ1VsTjRTbEZWUmtwUmVYaEdVVlZHUm1WVlRYTlRWVVpDVTFob1JFeEZaRUpSVldSRlRFVldRbEZWVmpWUmVYaEtVVlZHU2t4R1pFSlJWbU16VVdsNFJsRlZSa1pYUTNoSVVWVkdTRkY1ZUVaUlZVWkdURVZXUWxGVlZrdE1SV1JDVVZWamMxSXdSa0pTZWxKRVRFWkdRbEZXUmpSUmVYaEdVVlZHUmt4RlpFSlJWV056VWpCR1FsSXpiRVJNUlRGQ1VWVXdlbEY1ZUVaUlZVWkdaVlZOYzFOVlJrSlRWRVpFVEVWV1FsRlZWWE5TTUVaQ1VucGFSRXhGTVVKUlZUQXhVV2w0UmxGVlJrWmhhMGx6VWxWR1FsSlRlRXBSVlVaS1RFWmtRbEZXWTNOVVZVWkNWREpzUTB4RlpFSlJWVlp4VVdsNFJsRlZSa1pNUldSQ1VWVmpjMVZWUmtKVlZ6RkRURVU1UWxGVk9VZE1SVlpDVVZWVmMxUXdSa0pVTUZWelV6QkdRbE13VVhOV01FWkNWakJOYzFSVlJrSlVWVmx6VWxWR1FsSlhjRU5NUlZaQ1VWVlZjMUl3UmtKU2VYaFNVVlZHVWxGNWVFWlJWVVpHVG10TmMxWXdSa0pXTW1oRVRFVldRbEZWVmxWTVJrWkNVVlpHV2t4RlpFSlJWV1J4VVdsNFNGRlZSa2hSVTNoR1VWVkdSbFJUZUV4UlZVWk1Wbmw0UmxGVlJrWlJVM2hJVVZWR1NGRlRlRWhSVlVaSVQwVkpjMU13UmtKVGVYaFVVVlZHVkU5VlRYTlNNRVpDVW5sNFNGRlZSa3BSZVhoSVVWVkdSbG93U1hOV1ZVWkNWbFJvUTB4Rk9VSlJWVGwxVVhsNFJsRlZSa1pYUTNoR1VWVkdSbGRUZUVaUlZVWkdZbFZOYzFSVlJrSlVXRUpFVEVWa1FsRlZaRXBNUlZaQ1VWVldjVkZwZUVaUlZVWkdWRk40VEZGVlJreFhVM2hZVVZWR1dGbDVlRVpSVlVaR1lXdE5jMUpWUmtKU1ZtdHpWakJHUWxZeWJFTk1SVlpDVVZWVmMxVXdSa0pWZW1SRFRFVmtRbEZWWTNOVVZVWkNWSGw0VmxGVlJsUlNVM2hJVVZWR1NGbFRlRVpSVlVaR1dtbDRTRkZWUmtoaU1FbHpVekJHUWxNd1dYTlNWVVpDVWxkNFEweEZaRUpSVldSMFVXbDRWbEZWUmxaUFJVbHpWREJHUWxSNWVFWlJWVVpHWVVWUmMxSlZSa0pTVlRCelV6QkdRbE14YTNOV01FWkNWakp3UTB4RmJFSlJWV3hFVEVWa1FsRlZZelJSYVhoR1VWVkdSbEo1ZUZwUlZVWmFZMnRKYzFKVlJrSlNWV056VTFWR1FsTjVlRXBSVlVaSVdtbDRTRkZWUmtoTVJXeENVVlZzUkV4RlZrSlJWVlpIVEVWV1FsRlZWWEpSYVhoR1VWVkdSbVZyU1hOVE1FWkNVek5HUTB4RlZrSlJWVlp0VEVWc1FsRlZiR2hNUmtaQ1VWWkdUa3hGVmtKUlZWWk5URVpHUWxGV1JYTlhWVVpDVjFWemMxSlZSa0pTVjNCRFRFWk9RbEZXVG05UmFYaEdVVlZHUmxONWVGaFJWVVpZV1ZONFJsRlZSa1pUYVhoS1VWVkdTbE5UZUVaUlZVWkdVMmw0U0ZGVlJraFRhWGhRVVZWR1VFeEZNVUpSVlRreFVXbDRTRkZWUmtaa2EwbHpWRlZHUWxSNWVFNVJWVVpNVTFONFRGRlZSa3hXYVhoR1VWVkdSbGw1ZUVaUlZVWkdVMmw0U0ZGVlJraGFVM2hHVVZWR1JscHBlRWhSVlVaSVlsVkpjMUpWUmtKU1ZYZHpWREJHUWxWVGVGQlJWVVpRVTNsNFNGRlZSa1pOTUVseldWVkdRbGxWTkdsTVEwcHRZVmQ0YkVscWIybGtiVloxV2tjNWVVd3ljSGhrVjFaNVpWTTVlbU50VFhaYVIxWnRXbGhLZVZwWFVYVmhiazFwVEVOS2VtSXpWbmxaTWxaNlVUSTVkV1JIVm5Wa1EwazJWM2xLYTFwWFduQmliVlZ2VnpGM2FVeHBPV3BpTTBwc1dFTkpjMWhEU1hWTU0xcG9ZMms1ZW1KSGJHcGFWbmRwVEVaM2FVeHBPV3BaVjNoeldXMUdhbUV6VG1OSmJEQnpXbTVXZFZrelVuQmlNalJ2V2xONGRVdFlkR05KYmxaNldsTkNlbVJJU25CWk0xSmpTV3AwYldSWE5XcGtSMngyWW1sQ01FdEhWWEJsTTBwc1pFaFdlV0pwUW14bVYxb3hZbTFPTUdGWE9YVkpTRWx2V2xOc04yUkhhSGxpTTJObldsZ3hiV1JYTldwa1IyeDJZbWxDY0V0SE5ITmtRM2g1UzFoME1sbFlTV2RoVkhRd1kyNXNOMkpwV1cxYVV6VndZekJhTVdKdFRqQmhWemwxUzBkck9XSnBOWGRqYlRsMFlWaE9iRXRVT1hCTWJVNW9Za2QzYjJKcGEzVmFSemwxV2xOb01FdFROVzFaVjJ4elMwaEpjRTl0TkcxS2JWVjFZVmhPUjJSWE5XcGtSMngyWW1sb2NGQlhOSFZrUjJoc1ltbHJMMkZUTldwWlYzaHpTMGMwYzJSRGVIbExWSEF3VEcxT2FHSkhkMjlrYlRsd1drTkJkMHhITkhCbVYwNW9aRWRPYjB0SFZYQmxNMGwxV1RKR2MySkRhREppTW14clNVUkJjMXBUYkRsbVdFcHNaRWhXZVdKcFFteE1iVlkwWkVkV2RWcERhRGRTUjFadFdsaEtlVnBYVVRaYWJsWjFXVE5TY0dJeU5HOWlhV3czWkcxR2VVbEhhemxYTVhSalNXMDFkbVJIYkcxbFZuZHBURVozYVdOSVNuWmFNMHBzWXpOT1kwbHBlR3hNYTA1b1lrZDRhVmxYVG5KamVXaGpTVzB4YkdKWE9YbGxWbmRwUzFONGJFeHJUbWhpUjNocFdWZE9jbU41YUdOSmJURnNZbGM1ZVdWV2QybExVM2Q1V0ZONFlsaERTbmxhV0U1MllraGFiRmhEU1hOWVEwcHJZakkxYkZoRFNYTmFVelZFV1ZkNGMxbHRSbXBoTTAxdldFTktkbUp0VG14SlJ6RnNZbGM1ZVdWV2QybExVM2hzVEd0T2FHSkhlR2xaVjA1eVkzbG9ZMGx0T1hWWk1sVm5ZbGRXZEdJelNqVllRMGx3VEVSQmMxaERTbmxhV0U1MllraGFiRnBHZDJsWVUzaGlXRU5LZVZwWGNHeFpNMUpqU1dsNFkwbHRXbWhoVjNoalNXbDRiRXhyVG1oaVIzaHBXVmRPY21ONWFHTkpiVGwxV1RKVloySlhWblJpTTBvMVdFTkpjRXhIVlhWUk1rWnpZa2RLYUZreWRIcExSbmRwWWpJMWFscFRRblJhVnpGMlkyNXNZMGxwYTNOTlUzaGpTVzVLYkdGdFZtcGtSMVpyV0VOS1pGaFRlSFpRVm5kcFkwZFdkVnBIYkhWYU1YZHBURWROT1dVelRqQlpXRkpzVDIxYU1XSnRUakJoVnpsMVMwTnNOMk50VmpCa1dFcDFTVWM1T1V4SFJuTmtNa1kxWTNwd2JXUlhOV3BrUjJ4MlltbG5jR1V6U214a1NGWjVZbWxDYUV4dFVuWmliVlZ2V1ZoS2JtUlhNV3hpYmxKNlMxTTFiVmxYYkhOTFIwWjVXak5XZEZwWE5UQmplV3R6WkVkb2NHTXpNSE5aTWtZd1dUSm5ObHB1Vm5WWk0xSndZakkwYjFwVGJEZGpiVll3WkZoS2RVbEhUWFZrUjJoc1ltbG9kV1JYZUhOTVIxVndabE40ZDJGWVFteFBiVm94WW0xT01HRlhPWFZMUTJ3M1pHMUdlVWxITkRsWldFcHVaRmN4YkdKdVVucFBNMHBzWkVoV2VXSnBRbXhNYTFKc1dtMVdlV050Vm10TFIxb3hZbTFPTUdGWE9YVkxTRkZ3WlRKVmRWcFhSbXBoUTJod1RFZGFNV0p0VGpCaFZ6bDFTMGhKYzJGVGJEZGtiVVo1U1VjNE9WcFROWEJqTUZveFltMU9NR0ZYT1hWTFJ6VmlZVlp6TUZoV01IQkthVnAxVnpKc1lrNUdNV1JQTWtaaVlWWnplRmhXTUc5YWJsWjFXVE5TY0dJeU5HOUxXSFF5V1ZoSloySnFNWFpLYVZwMlRHMUdkMk5IZURWTFNGSnZZVmhOYzFsWVNtNWtWekZzWW01U2VrdFVkSFZLYVZwc1RHMXNlbEp1Vm5WWk0xSndZakkwYjJKcE5YZGpiVGwwWVZoT2JFdFVPWFZNYmtKNVlqSXhjR015Vlc5TFV6VjNZMjA1Ym1OdFZucGplV2d3VEcwMWRtUkhiRzFsVTJ0MVdrYzVkVnBUYURCTWJrcHNZekk1YzJSdFZYQk1iVnBvWVZkM2IyUkROWGxhVjNCc1dUTlJjRTl1VW1KaFZuTjNXRk4wWTBsc1pIQmtSMmhqU1d3d2IyUkhhSEJqZVhoMlVERjBkVmhVY0doamJXUXhZbGRXZFdSSVRYQm1VMnc1UzFONGRWQlhOVEZpUjNnNVMxTTFkMk50T1hSaFdFNXNTME5zT1V4SVVtOWFWelEyV201V2RWa3pVbkJpTWpSdlltbDRka3hIVFhCbE1sb3hZbTFPTUdGWE9YVkpSMFZ2WW1sNGNFeEhPSE5aZVd3M1kyMVdNR1JZU25WSlIxb3hZbTFPTUdGWE9YVkxRMnczWkcxR2VVbElUVGxrUjJod1kzbDRNVkJYUm5sYU0xWjBXbGMxTUdONWVHMVFWMW94WW0xT01HRlhPWFZMUTJ3M1pHMUdlVWxIV1hOYVJIUndXbWxuYUV0SE5EaGlRMnR3WlRKc2JVdEhXVGxpZVRWb1kwaENjMlZUYUhwTVNGVndURWRaT1ZCVU1YQk1ia0o1WWpJeGNHTXlWVzlMVTJ3d1lVaEtkbVI1UW5WYVdHTm5Wa2hzZDFwVlZubGpiVGw1UzBaM2FWWkhhR3hpYlVacFlrZFZaMk15Vm5OYWFURjVXbGhPZG1KSVZqQmhWemwxV0VOSmNFOHlVVGxhYVZsdFMwWjNhV0l5U25GYVYwNHdXRU5KT1ZCWVVqVmpSMVoyV21sQ2JXWkllR05KYlZveFltMU9NR0ZYT1hWWVEwazVVRmhTTldOSFZuWmFhVUp0UzFOWmJWcHBOVEJoUjFaMVRFZFZkV0ZZVGtka1Z6VnFaRWRzZG1KcGFHdExWRGxxVURKUmRWa3lSbk5pUTJodFRFZEZiMkpEZUhCTVNGRnpXWGxyYzFsVGFITk1SMnR6WTJsNGFrdFRhelpMUjNkeVMzbDRhMHh0VG1oaVIzZHZXbWw0YUV0SGQzTmhVM2d3VEVkTmNFeEhSVzlpUTNod1RFaEpjMWw1YTNOWlUyaHpURWRyYzJSRGVIQk1iVFYyWkVkc2JXVldaSEJrUjJkd1MxTnJOa3RIT0doUVZERXdTbWxaYjJONk1USmlNbXhyU1VSQmMyUlVNV0phYkRCd1RFTm9hbVpJZUhCTWJrcHNZekk1YzJSdFZsaGhXRkp2UzFOb2VreElWWEJMV0RFNVRFZFJPVmw2T1cxUGJWb3hZbTFPTUdGWE9YVkxRMnczWkVoS05XVXlXVzlMV0RGcVdWaFNhbUZEYURCTFdIUnNUR3RTYkZwdFZubGpiVlpyVEcxV05Ga3lWbmRrUjJ4MlltdG9kbUl5YzIxS2JWVjFVa2RXYlZwWVNubGFWMUYxV2xob2FscFlRakJoVnpsMVUwYzVkbUY1YURCTVIxRjFZek5TYUZreWRGVmpiVVpxV2xOcmMySnBjM2hRYWpGelNtbFpiMko1UlRsUVdFbHRTbWxvZWxCWVduWmhWMUZuVFVONE1WQldkREJZVTJ0ellWTTFlVnBYY0d4Wk0xSllZVmhTYjB0SVRYTmtVMnR3Wmxnd04ySnFPV3RMUTJzMlMwZFZkVkpIVm0xYVdFcDVXbGRSZFZveVZqQlZNMUpvV1RKMFNXSXlPWEpLYVZsdldrTTFlbVJIUm1waE1WSjVXVmRPYkZCWFZYVlNSMVp0V2xoS2VWcFhVWFZhTWxZd1ZUTlNhRmt5ZEVsaU1qbHlTME5yY0V4SVpIQmliVkoyWkhrMWVscFlVbFZoVnpGc1lqTldNRXRIVVhCTFdERTVaRzFHZVVsSGR6bE5SSFI1V2xoU01XTnROR2RhVXpWRldsZGFiR051U214YVEyaHRaRmMxYW1SSGJIWmlhV2h6UzFoMGNGZDZRbVJYZWs1a1RHMUdhMXBEYUdoTFJFRnpZa040YkV4dGJIcFNibFoxV1ROU2NHSXlORzlaZVdzdldYcHdNRXhIZDNWaWJUa3dZVmRhTlZZeWJEQmhRMnR3VEVkc1lrMVdNV0pOTVRCMVdWZFNhMHRIUlc5TlEzaHpURWRWZFdGWVRrZGtWelZxWkVkc2RtSnBhSFZMVkRsMVQyNVJjRXRUZUhCWGVrcGtWM3BPWkV4dFJtdGFRMmhvUzBSQmMySkRlR3hNYld4NlVtNVdkVmt6VW5CaU1qUnZZbmxyTDJKNmNIbExVMnc1UzFNMWQyTnRPWFJoV0U1c1MwTnNPVXhJUW5saU1qRndZekpWTmxwdVZuVlpNMUp3WWpJMGIySnBiRGRqYlZZd1pGaEtkVWxITlRGaVIzZG9VRmMwTDFwVE5XeGxTRkpzWW0xUmIySnBlR3BMVkhCcVpsZ3djMWxVTVRkbVZIUjVXbGhTTVdOdE5HZGFVelZzV1ZkT2IwdEhhM05hYmxaMVdUTlNjR0l5Tkc5YVUzaDFTMWgwTWxsWVNXZGtSREYxVjNwS1pFeElTVGxpYkhNeFdGUjBhbGN5TldKTlZqRmtVRmhSZFZsWFVtdE1TRWx0U201UmRWbFhVbXRMUjFveFltMU9NR0ZYT1hWTFEydzNZbm94ZVdaVGVIQlhlazEwV2xZeFlrMXNNSFZhUjJ4NldWZEtjMXBUZUhCWGVrSmtWM3BLWkV4dGVIWlpNbk53VEVoUmRWbFhVbXRMUnpWaVRURXdkVnB0YkhsYVUydHpXVlowZFZkNlFtUllWREZ0WkZjMWFtUkhiSFppYVdkd1pUTktiR1JJVm5saWFVSm9WekkxWWsxR01ISllRMHBZWVZoU2IxaERTbVJMU0ZKdllWaE5PVkJVTVdoUU0xcDJZVmRSWjAxRWNEQmhSMng2VEVkR2VWb3pWblJhVnpVd1kzbHJjMlJIYUhCak16QnpXVlowZFZkNlFtUkxNWGRwVmpKc01HRkdkMmxZVkRFd1RHMWFjR050VmxoaFdGSnZabE5yYzFsNU5YZGpiVGwwWVZoT2JFdEhSWEJNUnpSdFNtMDBkVmt5Um5OaVEyaG9URWRGY0V4SFJqbE1TR1J2V2xjME5scHVWblZaTTFKd1lqSTBiMlJEYkRka2JVWjVTVWhKT1ZsWVNtNWtWekZzWW01U2VreHRlR3hpYldRd1lVTjRkbEJZU1hOWmVqRkNZMjVLYUdWVGFIWkxVM2hvVUZjMGRWa3lSbk5pUTJob1kyMWtNV0pYVm5Wa1NFMXdURWQzT1ZwVE5VVmFWMXBzWTI1S2JGcERaM0JNU0UwNVdtNVdkVmt6VW5CaU1qUnZXbE5zTjJOdFZqQmtXRXAxU1VkYU1XSnRUakJoVnpsMVMwaFJjR1V5VG1KYVZqQTVaRWRvY0dONWVHaFhNbFprVUZkR2VWb3pWblJhVnpVd1kzazFjMXBYTlc1a1IyY3JUVlE1ZFV4dFRtaGlSM2R2V1ZoS2JtUlhNV3hpYmxKNlMxUndNRXhETUhSamJuZzRZa00xZVZwWVRuWmlTRnBzVmpKc01HRkRhR3BNUjBWd1psZ3dOMkZYV1c5amFuYzVUVk5aYlV0SGEyOWtRM2h6VEcxU2RtSnRWVzlqZVdoMlMxTnJkV050Vm5waU1uZ3lXbE40YzB4dVNteGhiVlpxWkVOcmMxaERTbmRhVnpWcllWYzFibGhEU1RsUVZERnpURzVPTUZsWVVteExRMnc0WmtkVmRXRllUa2RrVnpWcVpFZHNkbUpwYUdoWE1qbGtTbWxhYUZjeU9XUk1ibEp2V2xjMGNFdFRiSGxhV0ZJeFkyMDBaMkpETlRCaFIxWjFTME5yTjFwdE9YbExSSFIyVEZNd04wdFhhMjlaVm5SMldGTjRla3RIT0hCTVIzZDFZMjFXY1ZwWFRqQkxWSFI1V2xoU01XTnROR2RpUXpWM1kyMDVkR0ZZVG14TFEydzVabE5yYzFwWU1IQlBNWGgxVEhrNGFrbElUblprV0VwcVdsVXhhR05JUW5CaWJXUldWV3QzT1ZwSFJqQlpWSEJvWTBoQ2MyRlhUbWhrUjJ4MlltazVjV015T1hWUE1rNXZXVmhLZWxwWVVUbGtXRkp0VDBSMGFWbFlUbXhPYWxGeldsaHNTMDFzY0ZsVGJuQm9WbnBzTVZOWGNIWmxhM2hFVTI1d2FVMHhXalZYVkVwWFpXdHNjV05IU2twaWJIQnpXVzB4VTJSdFRuQlBXRVpxVjBaYWMxa3lOWEprYlUxNlUyMXdUVTFzU25OWGJURlhaVmRPZEZadGRFMWlXRUkyVTFkM2QyTXdiSFJPVjJocFZqRmFObE5YY0hkWmEyeDBWVzE0WVdKWGVERlhiRTVLWXpCc2RGWlhiRTFSTUhBeFUxZHNNMkZYVWtSVFdFNUtZbXRzY0ZSRlRrdGpSV3h3WkRKc2FGZEZOVWhhUm1NeFlXMVNTR0pJV21saFZXeDZVMWMxUTJWWFNYbE5XRUpxVFd4V2NGUkZUa3RoYkd4WVpVaE9TbUZZWkhCWGEyTTFaRlp3VkZOWVRrcGlWbkJ2V1Zaa00yRlZlRVJUYWtKb1VqRmFNVk5YYkROaFZuQlpZVVJDWVZaNlZuSlRWMnd6WVZaS1NGWnRNV0ZYUlhBMVYyeGtVbUZWZUVSVGExSmFWak5vZWxkWE1VZGhiVVY2VkZkc1RWRXdjREpUVjJ3ellWWnNOVk5ZVGtwaWF6UjNWMVpvVTJKRmJIQmtNbXhhVmpObmVsZFdhSE5sYTJ4d1pESnNXbFV3YkhwVFZ6RkhaVlp2ZWxadVVtRldlbFYzV1ROc1NtTXdiSFZWYlRsb1YwVXhjRlJGVGt0aGJHeFpWVzF3YUZFd2JIcFRWelZEWTBkT1NGWlhiRTFSTUhCelYxWmtUMkl3YkhCa01teGFWMFZLTTFscmFISmhWWGhFVTI1a2FtSlViSFZaTWpGWFpXMU9OVk5ZVGtwaVZGWXlXa1ZrYzJKWFZsUlRXRTVLWW10d2MxbDZTVFZqTWxKMFZsZHNUVkV3Y0RWWGJHUjNZa1pyZWxWWGJFMVJNSEEyVTFkc00yRlhVbFJUV0U1S1lsWnNjRlJGVGt0aE1HeHdaREpzYVZFd2JIcFRWM2hUVGxkT1NGWnJXbXBpYTNBeVdUSnNTbU13YkhST1dGcHJVako0ZEZwV1dtdGpSMUpJV2pKc1RWRXdjRFZYYkdoUFpHMUtTVmR0ZUZkTmJYZDNXVlZPU21Nd2JIUldhbEphVFd4YU0xcEZaSE5rYlVweVlVaGFhVTF1VG5CVVJVNUxaVzFTU0ZKdGNHaE5Wa28xVjFaa1QySkZiSEJrTW14cVlsWmFlRmRzWkU5TlJsbDVZa1JDYUZFd2JIcFRWekZyWWtkU1IxUnFRbHBXTURWNVZUQmpOV1J0UmpWVFdFNUtZbTFTZDFsdE1WTmtiVkkxVTFoT1NtSnJOWE5hUlZwVFkwZEtXRlp1V210WFJrWndWRVZPUzJGR2NFaFZWMnhOVVRCd2NsbFdhRTloUm14MFpVZDRTbUZZWkhCWmEyTTFZVzFHTlZOWVRrcGlWbkIzV1RJeFZtRlZlRVJUYlRGb1YwVndjMVpxU25OTlIwWkVVMWhPU21KdFVuWlhiR013WVZWNFJGTnVUbUZXZWxaMVdrVmtibUZWZUVSVGEwcHFZbXR3YjFwV1RrdGFSWGhFVTI1U1dsZEZTak5aVm1NeFltMU9OVk5VV2twaE1GcERWVlpXUjFGcmVFZFNhMHBTVm10V2VsWlVRa2RSYkZZMVpVZHdVbFpWV25GVVJXUlhVV3hHV0ZaWVRsWk5SVnBEVmxSQ1RtTXhTbFpTYTBwVFZsVXhlbFZxUWtkUmJFbzFaVVp3VWxaVldtOVVSVnBQVVd4R1YxUnJVazFTVjFKRFZWWldWMUl3ZUVaYVJVcFNWbGRPZWxaR1ZrZFJiRkYzVWxoT1UwMUZXa05WYkU0MFZXeEdWbEpzVWxObFdHaEpWVlpXUjFKc1RrUmxSV2hTVmxWYVNWUkZWakJSYkVaV1RWVktUVkpYVWtOVlZsWldZekZXVmxKclNsWk5SM1I2VldwQ1IxRnNTbFphTTA1VFZsVmFRMVZzVms1ak1VcFdVbXRLVTFaVk1YcFZha0pIVVd4S05XVkZhRkpXVlZwTFZWaHNORkpzUmxaU2ExcE5VbGhTUTFWV1ZuTlRWWGhHV2tWS1VsWlhVa1pVUlZaWFVXeEdWbFpyZUUxU2JWSkRWVlphYTFKVmVFWldhMHBTVmxaYVNsUkZWbGRSYkVaV1ZtdDRUVkpyTlVOVlZscFBVakI0UmxaclNsSldWbHBKVkVWV01GRnNSbFprUlRsTlVsZFNRMVZXVm10VlJYaEdaRVZLVWxaWVVsQlVSVlpyVVd4R1ZscEdRazFTV0ZKRFZWWldNRlF3ZUVaYVJVcFNWbGRTU0ZSRlZtdFJiRVpXV2tWV1RWSldXa05WVmxaWFZFVjRSMXBGU2xKV2JWSkdWRVZXVjFGc1JsWldhMnhOVWxaYVExVldWbGRXUlhoR1RWVktVbFpVUmxCVVJWWlhVV3hHVmxacmFFMVNXRkpEVlZaV01GUXdlRVpXYTBwU1ZsWmFSVlJGVmxkUmJFWldWbXRTVFZKWFVrTlZWbFpyVWxWNFJsWnJTbEpXVmxwTlZFVldNRkZzUmxaak0wNVZUVVZhUTFaRVFUQmpNVWwzVW10S1UyVllhRTlWVmxaSFZHeEtSR1ZGYUZKV1ZWcEpWVzVzTkZKc1JsWlNhMXBVVlROb1RWVldWa2RVUlhoR1QxVktVbFpVYkZKVVJWWnpVV3hHVm1FelRsVldWVnBEVmtSQ1JtTXhTWGRTYTBwVFZtMU9lbFpXVmtkUmJGWldWRmhPVmsxRldrTldXR3cwVmtaR1ZsSnNVbGhSTTJoSlZWWldSMU5GZUVaYVJVcFNWbGQ0U1ZSRlZqQlJiRVpXWVROT1ZrMUZXa05XV0d3MFYwWkdWbEpzYUZSaFdHaEhWVlpXUjFKc2JGUmxSbHBTVmxWYVYxUkZXbGRSYkVaWFZtMXNUVkpXV2tOVlZsWlhZVVY0UjFaclNsSldiRlo2Vm14V1IxRnNXbFJsUlhCU1ZsVmFTMVJGV2xkUmJFWlhWbGhPVlUxRldrTldSRXBLWXpGS1ZsSnJTbE5XTUZaNlZteFdSMUZzV2xSbFIzaFNWbFZhYzFkWGJEUlNiRVpXVW10YVdsVXphRmRWVmxaSFZtdDRTRlpyU2xKV01WWjZWV3hXUjFGc1NsUmxSMmhTVmxWYWIxUkZXazlSYkVaWFZGaE9WVTFGV2tOV1JFcEtZekZLVmxKclNsTldNRlo2Vm14V1IxRnNXbFJsUjNoU1ZsVmFjMWRYYkRSU2JFWldVbXRhV2xVemFGZFZWbFpIVm10NFNGWnJTbEpXTVZaNlZXeFdSMUZzU2xSbFIyaFNWbFZhYjFWWWJEUlNiRVpXVW10YVRWSnNXa05WVmxwWFVrVjRSbHBGU2xKV1YxSkZWRVZWZUZGc1JsWk5TRTVYVFVWYVExWnViRFJVYkVaV1VteENVMkZZYUV0VlZsWkhVMFpLTldWR1FsSldWVnBSVkVWYWExRnNSbGRaTTA1VlZsVmFRMVpFUWs1ak1VbDNVbXRLVTFac2JIcFZla0pIVVd4TmVGa3pUbGROUlZwRFZtcEdXbU14VFhkU2EwcFVUVlpXZWxacVFrZFJiRmwzVkZoT1ZWWlZXa05XUmxaT1l6RlNWbEpyU2xWVk0yaFZWVlpXUjFaSFRuSlRXRTVUVFVWYVExVnViRFJVYkVaV1VteENZVlV6YUVsVlZsWkhVbXhTUkdWRmVGSldWVnBOVkVWV01GRnNSbFprUm1STlVsZDRRMVZXVm5ObGJFWndaVVY0VWxaVldrMVVSVnByVVd4R1Yxa3pUbE5OUlZwRFZURm9TMUV3ZUVaYVJVcFNWbFphZVZWWGJEUldSa1pXVW14YVRWSlViRU5WVmxVMVpGWkdjR1ZGYUZKV1ZWcEhWakZPTkZaR1JsWlNiRkpOVW1zMVExVldXazlXTUhoR1drVktVbFpYVWtoVVJWWlhVV3hHVmxacVJsSmhXR2hOVlZaV1IxUkhTbkpUV0U1VFZsVmFRMVZzVGpSV1JrWldVbXhTVTFFemFFZFZWbFpIVW14R05XVkZhRkpXVlZwSlZFVldhMUZzUmxaaVJscE5VbGRTUTFWV1ZsZGhNSGhHVm10S1VsWldXazFVUlZwclVXeEdWMXBGZEUxU1ZscERWVlpXVjFORmVFWldhMHBTVmxaV2VsWkdWa2RSYkZKV1dqTk9VMVpWV2tOVmJGWnFZekZLVmxKclNsTlZNMmhKVlZaV1IxTnNiRFZsUldoU1ZsVmFSMWRyVGpSU2JFWldVbXRhVFZKWGVFTlZWbFp5WXpGWmQxSnJTbGRsV0doSlZWWldSMU5zVGtSbFJXaFNWbFZhUjFkV1RqUlRSa1pXVW10b1VsVXphRWRWVmxaSFVteGFWR1ZGTlZKV1ZWcFBWVEpzTkZSR1JsWlNhM2hUVVROb1YxVldWa2RYUjBwR1UxaE9WRlpWV2tOVmFrSlNZekZLVmxKclNsTldXRTU2Vm1wQ1IxRnNXWGRpTTA1VFZsVmFRMVZzVm5wak1WVjNVbXRLVmsxSVpIcFZiRlpIVVd4S1ZtTXpUbGRXVlZwRFZteGplRkV3ZUVkVWEwcFNWbXMwZVZWWGJEUlNiRVpXVW10YWEwMUZiSHBXVmxaSFVXeFdXR1ZGVGsxU1dGSkRWVlpXTUZRd2VFWldhMHBTVmxaWk1WVlhiRFJXUmtaV1VteFNhVkpWYkhwVmVrSkhVV3hOZUZGWVRsTldWVnBEVld4U1ExRXdlRWRTYTBwU1ZtdFdORlZYYkRSU2JFWldVbXRhVTFVemFFZFZWbFpIVW10NFJscEZTbEpXVjA1NlZsWldSMUZzVmxoYVJVNU5VbGhTUTFWV1ZqQlVNSGhHV2tWS1VsWlhVbkJVUlZaclVXeEdWbHBJU2xKaFdHaHpWVlpXUjJKSFNrWlRXRTVUVmxWYVExVnNUalJWUmtaV1VteENWR1ZZYUZsVlZsWkhWMFpPVkdWRmVGSldWVnBOVkVWYVQxRnNSbGRVYkZaTlVsWmFRMVZXVmxkaFJYaEdWbXRLVWxaV1drVlVSVlpyVVd4R1Zsa3pUbFpXVlZwRFZsUkNhbU14U1hkU2EwcFRWak5DUkZSRlZsZFJiRVpXVm10b1RWSldXa05WVmxaWFZtdDRSbFpyU2xKV1ZscEZWRVZXYTFGc1JsWlpNMDVWVmxWYVExWkliRFJYYkVaV1VteG9UVkpYVWtOVlZsWnpZV3Q0UmxwRlNsSldWbHBXVkVWV01GRnNSbFprUmxwTlVsWmFRMVZXVmxkWFZYaEhWbXRLVWxac1dtRlVSVlpYVVd4R1ZsWllUbGROUlZwRFZtNXNORk5HUmxaU2EzQlNWVE5vU1ZWV1ZrZFNiRVkxWlVWU1VsWlZXa2RVUlZWNFVXeEdWbU16V2xKaFdHaEhWVlpXUjFKc2IzZFVXRTVUVFVWYVExVnViRFJTUmtaV1VtdFNUVkpYVWtOVlZsWnJVakI0UmxaclNsSldWbHA0VlZkc05GSnNSbFpTYTFwWFZUTm9UMVZXVmtkVWJFNDFaVVZhVWxaVldrZFZXR3cwVTBaR1ZsSnJhRkpsV0doTFZWWldSMU5yTUhkVFdFNVRWbFZhUTFWc1ZsWmpNVnBXVW10S1YxVXphRTFWVmxaSFZHdDRSbUpGU2xKV1YzTjNWVmRzTkZkR1JsWlNiRnBOVWtWd1JGVldWa1pOUmtaeVYxaE9VMDFGV2tOVmJGWlNZekZPVmxKclNsUlZNMmgxVlZkMFIxRnRSbFpUYTBwTlVsZDRRMVZXVm1wak1rVjNVMnRLVWxaNlJrUlZWazQwVkVaR1ZsSnJjRkpWTTJoSFZWWldSMUp0VG5KVFdFNVVUVVZhUTFWNlJscGpNVXBXVW10S1UxWllUbnBXYWtKSFVXeGFObE5yVGsxU1YxSkRWVlpXYTJOV1JuQmxSVnBTVmxWYVIxbFdWa3BqTVVwV1VtdEtVMWRJUWtSVVJWWXdVV3hHVm1SRVRsSmhXR2hIVlZaV1IxSnNiSEJsUlZwU1ZsVmFSMWRzVGpSU2JFWldVbXRhVDAxRmJIcFZiRlpIVVd4S1ZsZFlUbE5XVlZwRFZXeGtSbU14U1hkU2EwcFRUVWRPZWxWc1ZrZFJiRXBZVmxoT1UxWlZXa05WYkZKclVUQjRSbFpyU2xKV1ZscEdWRVZXVjFGc1JsWldiSEJOVWxoU1ExVldWakJqYkVad1pVVndVbFpWV2t0VmEwNDBVbXhHVmxKcldteGhNR3g2VlhwQ1IxRnNUWHBhUlU1TlVsWmFRMVZXVmxkaFZYaEdWbXRLVWxaV1duTlVSVlpYVVd4R1ZsWlVUbEpoV0doSFZWWldSMUpzU25CbFJWcFNWbFZhUjFkV1RqUlRSa1pXVW10b1UyVllhRWRWVmxaSFVteHdWR1ZGV2xKV1ZWcEhWR3BDU21NeFNsWlNhMHBUVmxaR2VsVnNWa2RSYkVwWFlUTk9VMDFGV2tOVmFrSnFZekZLVmxKclNsTldNVlo2Vld4V1IxRnNTbFZhUlU1TlVsWmFRMVZXVmxkU01IaEdWbXRLVWxaV1drZFVSVlpYVVd4R1ZsWllTbEpoV0doelZWWldSMkpIVG5KVFdFNVVWbFZhUTFVeFduWmpNVTVXVW10S1ZGWkZjRVJVUlZaWFVXeEdWbFpZVGxWTlJWcERWa1JDVG1NeFNYZFNhMHBUVFVVeGVsVjZRa2RSYkUxNVlVVk9UVkpYVWtOVlZsWnJWMVY0UmxaclNsSldWbHAxVlZoc05HRkdSbFpTYldoV1VUTm9SMVZXVmtkU2JFWTFaVVUxVWxaVldrOVZiRTQwVW14R1ZsSnJXbWhoTUd4NlZXeFdSMUZzU2xoYVJVNU5VbFphUTFWV1ZsWmpNVmwzVW10S1YyVllhRXRWVmxaSFUyeEdWR1ZGY0ZKV1ZWcExWRVZWZUZGc1JsWk5SRTVTWVZob1NWVldWa2RUUmtwd1pVVmFVbFpWV2tkV01VNDBWa1pHVmxKc1VteFdWV3g2VjJ4V1IxRnNjRmxUYTFKTlVsWmFRMVZXVmxkWGEzaEhWR3RLVWxack5ERlZWMncwWVd4R1ZsSnRjR2xoTURGNlZXeFdSMUZzU2xWaFJVNU5VbFphUTFWV1ZsZFVhM2hIWWtWS1VsWnRlRFZWV0d3MFVteEdWbEpyV2sxU1YxSkRWVlpXYTJKc1JqVmxSWEJTVmxWYVMxbHRkRXBqTVU1V1VtdEtWRlp0WkhwVk1WWkhVV3hPVlZGclRrMVNWbHBEVlZaV1ZtTXhVWGRTYTBwVlRVVXhlbFZxUWtkUmJFbzJWbXRPVFZKWGVFTlZWbFp6VW10NFJsWnJTbEpXVmxvd1ZWaHNORmRHUmxaU2JHaFhZVmhvUjFWV1ZrZFNiRVkxWlVWNFVsWlZXazlVYWtKS1l6RkpkMUpyU2xOVk0xSkVWRVZXTUZGc1JsWmtSemxTWlZob1IxVldWa2RTYkdSVVpVWlNVbFpWV2xWVWExWktZekZ3VmxKclNtRldhMng2Vld4V1IxRnNTbFpOU0U1WFRVVmFRMVpxVGxOU1JYaEdWbXRLVWxaV1dtRlVSVnBQVVd4R1YxUlVRbEpoV0doMVZWZDBSMUZzYjNkVGExSk5VbFJzUTFWV1ZUVlNSWGhIV2tWS1VsWnRVbGhVUlZZd1VXeEdWbU16VGxOTlJWcERWVEZXVG1NeFNYZFNhMHBUVlROb1JWVldWa2RTYTNoR1QxVktVbFpVYkhoVldHdzBVMFpHVmxKcldsaFZNMmhWVlZaV1IxWkZlRWRVYTBwU1ZtczFORlZYYkRSVFJrWldVbXRvVDAxRmJIcFZiRlpIVVd4S1ZHVkZhRkpXVlZwSlZFVldhMUZzUmxaYVJFWlNaVmhvUzFWV1ZrZFRiVlp5VTFoT1UxWlZXa05WYkU0MFVteEdWbEpyV21GVk0yaEhWVlpXUjFKdFJuSlVXRTVUVmxWYVExVnNWbnBqTVZsM1VtdEtWMDFXVm5wVmFrSkhVV3hKZDFKWVRsTldWVnBEVld4a1NtTXhTbFpTYTBwVFZUTlNSRlJGVmxkUmJFWldWbXRhVFZJd1drTlZWbVJHWkd4R2NHVkZXbEpXVlZwSFZFVldhMUZzUmxaWk0wNVRUVVZhUTFWcVRsZFNSWGhHWWtWS1VsWlhkekpWVjJ3MFVteEdWbEpyV2sxU1ZscERWVlpXVjJKRmVFWldhMHBTVmxaYWVGVlliRFJTYkVaV1VtdGFWR1ZZYUZsVlZsWkhWMFpPY0dWRmFGSldWVnBKVlZaT05GSnNSbFpTYTFwU1pWaG9TMVZXVmtkVGJFcFVaVVZhVWxaVldrZFVSVlpyVVd4R1Zsa3pUbE5OUlZwRFZXcE9WMUpGZUVaaVJVcFNWbGQzTWxWWGJEUlNiRVpXVW10YVRWSldXa05WVmxaWFlrVjRSbFpyU2xKV1ZscDRWVmhzTkZKc1JsWlNhMXBVWlZob1dWVldWa2RYUmxZMVpVVm9VbFpWV2tsVlZrNDBVbXhHVmxKcldsaFJNMmhQVlZaV1IxUnNTalZsUm1oU1ZsVmFXVlZXVGpSVmJFWldVbXhLVFZKck5VTlZWbHBQVkZWNFJscEZTbEpXVjA1NlZrWldSMUZzVWpWbFJrSlNWbFZhVDFWV1RqUlNiRVpXVW10YVUxRXphRWRWVmxaSFVteGFOV1ZHUWxKV1ZWcFJWbTFzTkZKc1JsWlNhMXBhWlZob1NWVldWa2RUUmtaVVpVVndVbFpWV2t0VmJtdzBVMnhHVmxKcmVFMVNWR3hEVlZaVk5XTXhSbkJsUldoU1ZsVmFSMXBHVmtwak1VMTNVbXRLVkUxcVZrUlVSVlpYVVd4R1ZsWllUbFpOUlZwRFZsUkNkbU14U2xaU2EwcFRWbFV4ZWxWcVFrZFJiRW8xWlVWb1VsWlZXa3RWV0d3MFUwWkdWbEpyV2xOUk0yaEhWVlpXUjFKcmVFWmFSVXBTVmxkU1IxUkZWbGRSYkVaV1ZtdGtUVkpXV2tOVlZsWldZekZLVmxKclNsTk5hekY2VldwQ1IxRnNTbGhWV0U1VFZsVmFRMVZzVGpSVGJFWldVbXR3VW1WWWFFZFZWbFpIVW0xV1ZsUllUbFJXVlZwRFZURm9iMUpGZUVaYVJVcFNWbGRTUmxSRlZsZFJiRVpXVm1wV1VtVllhRXRWVmxaSFUydDRSMXBGU2xKV2JVMTZWVmRzTkZKc1JsWlNhMXBZVVROb1NWVldWa2RUUmtZMVpVVmFVbFpWV2tkVVJWWlhVV3hHVmxacmRFMVNWMUpEVlZaV2FtTXhTWGRTYTBwVFpXeEtSVlJGV2tkUmJFWlhVbXBTVW1WWWFFZFZWbFpIVW10NFJscEZTbEpXVjA1NlZXcENSMUZzU1hwaVJWSk5VbFJHUTFWV1ZYZGxiRVkxWlVWYVVsWlZXa2RhVmxaT1l6Rk9WbEpyU2xSV1JWcEZWRVZXVjFGc1JsWldXRTVUVFVWYVExVnVjR0ZTUlhoR1RWVktVbFpVUVhoVlYydzBVbXhHVmxKcldtaGhNR3g2Vld4V1IxRnNTbFJsUlhCU1ZsVmFTMVJGV210UmJFWlhXVE5PVlZaVldrTldSRXB6VVRCNFJscEZTbEpXVmxwNFZWZHNORkpzUmxaU2ExcE5VbGRTUTFWV1ZtcGpNVlpXVW10S1ZsWjZSa1JVUlZVMVVXeEdWazlWWkUxU1ZscERWVlpXVm1NeFVYZFNhMHBWVFVaV2VsVjZRa2RSYkUxM1ZWaE9WMDFGV2tOV2FrSk9ZekZTVmxKclNsVldWbXg2Vld4V1IxRnNTbGhqUlU1TlVsWmFRMVZXVmxaak1VbDNVbXRLVTJWWWFGTlZWbFpIVld4R05XVkZXbEpXVlZwSFZHMTBUbU14V1hkU2EwcFhUVzFvUlZSRlZsZFJiRVpXVm14V1RWSnJXa05WVmxwSFYydDRSbHBGU2xKV1YxSjRWVmRzTkZOR1JsWlNhMmhTVlROb1IxVldWa2RTYkZKVVpVVjRVbFpWV2sxV2JtdzBVbXhHVmxKcldsSlZNMmhKVlZaV1IxTkdSbFJsUldoU1ZsVmFTVlF3Vmtwak1VMTNVbXRLVkdWWWFGVlZWbFpIVmtVNVZsUllUbE5OUlZwRFZXNXNORk5HUmxaU2EzQlNaVmhvU1ZWV1ZrZFNiRzkzVTFoT1YxWlZXa05XYkZKdlVUQjRSazlWU2xKV1ZHd3hWVmhzTkZKc1JsWlNhMXBZVVROb1IxVldWa2RTYkdSVVpVVmFVbFpWV2tkWmJGWk9ZekZTVmxKclNsVlhSVXBGVkVWV2ExRnNSbFphUlhCTlVsWmFRMVZXVmxkalZrWndaVVZhVWxaVldrZFdSazQwVkVaR1ZsSnJlRmhWTTJoWlZWWldSMWRHYkRWbFJWcFNWbFZhUjFsWGRFNWpNVXBXVW10S1UxWnRkSHBXYWtKSFVXeFplV0pGVGsxU1ZscERWVlpXVm1NeFZYZFNhMHBXWlcxU1JGUkZWbXRSYkVaV1dUTk9WVlpWV2tOV1NHdzBWbXhHVmxKc1VsTlZNMmhKVlZaV1IxTkdiRlJsUlZwU1ZsVmFSMWR0YkRSVFJrWldVbXRvYVUxRmJIcFZla0pIVVd4TmQxZFlUbE5XVlZwRFZXeGtORkV3ZUVaYVJVcFNWbGRTTUZWWGJEUldiRVpXVW14YVVGSlZiSHBXUkVKSFVXeFNOV1ZGV2xKV1ZWcEhXVlZXVW1NeFNsWlNhMHBUVmxSQ2VsVjZRa2RSYkUxNFlUTk9WMDFGV2tOV2FrcDNVVEI0Um1KRlNsSldWM2hGVkVWV2ExRnNSbFpaZWxKU1lWaG9SMVZXVmtkU2JFbzFaVVp3VWxaVldtRlpNblJLWXpGS1ZsSnJTbE5XVjA1NlZURldSMUZzVGpWbFJYQlNWbFZhU1ZkdGJEUlRSa1pXVW10b1RWSlhlRU5WVmxaelVrVjRSbFpyU2xKV1ZscElWRVZXVjFGc1JsWldXRXBTWVZob1IxVldWa2RTYlZaeVUxaE9WRTFGV2tOVmVrNUhVVEI0UmxaclNsSldWbHAwVkVWV2MxRnNSbFppUjJoTlVtdGFRMVZXV2tkVWEzaEdWbXRLVWxaV1drNVVSVnBIVVd4R1YxSllUbGhXVlZwRFZqRldlbU14U2xaU2EwcFRWak5DUkZSRldrOVJiRVpYVkcwNVVtRllhRWRWVmxaSFVteE9OV1ZHYUZKV1ZWcFpWMVpPTkZKc1JsWlNhMXBVWVZob1MxVldWa2RUYkU1VVpVVmFVbFpWV2tkVk1tdzBVMFpHVmxKcmFGUmhXR2hSVlZaV1IxVkZlRVpOVlVwU1ZsUnJlRlZYYkRSVFJrWldVbXRhYTJFd2JIcFdSbFpIVVd4U05XVkZOVkpXVlZwTlZURk9ORlJHUmxaU2EzaFhZVmhvUjFWV1ZrZFNiR3cxWlVWYVVsWlZXa2RWTW13MFUwWkdWbEpyYUdGVk0yaEhWVlpXUjFKc2NIQmxSV2hTVmxWYVNWbHNWa3BqTVVwV1VtdEtVMVpZWkhwV1JFSkhVV3hXVkdWR1FsSldWVnBSVlROc05GTkdSbFpTYTFwT1RVVnNlbGRXVmtkUmJHeFdUa2RzVFZFd2NIUlpWbVEwWWtWc2NXSXliR3RpVmxveFYydGpOV1ZWZDNsalNHaHJWakZhTlZwV1RUVmxiVTUwVkZoYVlWSXhXblJYYkdoTFpWWndXRlZZVm1oaWF6RndWRVZPUzJWdFNYcFdibXhhVFd4YU5sVlVTVFZrVjFKSVZtNVdhMUV3YXpKV00yeExZVEZ3V0ZkdVFtbGlWbFoyVm5wR00yRlZlSEJQVjNCcFRUQndjMWRGVGtwak1XaEVVMWhXVFUweGNHOVpNbXMxWlcxS1NHSkhjR0ZXYm1Sd1ZFVmFNMkZWZUhCUFYzQmFWak5vZWxkWE1VZGhiVVY2VkcxT1NtSkVRbnBYYlRWWFpGWnJlbFZ1UW1sTmFsSjJWMnhPTkdSVmRGbGtSMDVLWW14YU5sZHNUa05sYlZKSlUyNUNXazB4U21wVFYzQXdZbGRTV0U1WGNHdFNNbmd5V1cxc1EwMUZkRWhXV0VKc1RUQndjMXBGYUZkbFYwcHdVVzE0YlZZeGIzaFpiVEZQVFVkR1dFOVlWa3BUUld4MlYyeE9jMDR5VWtoaFNHeHBUVEpPYmxkc1ozaGlWMUpZVGxkd2ExSXllREpaYld4RFkwVjBTRTVJVG10Uk0yZzFVekZvTUUxc2JGbFRWMlJvVmtoUmQxa3lOWE5PTWtwd1YxY3hZVlY2Vm5kWmVrSmhUVmRLZEZScVFtaFdlbXd4VXpCa2NrOVhTbkJPV0dScVlsUnNNRmxXYUU5aVJYUlZUMWhDVFdKVk5XOVphMlF6WWpKS2NHRXpWbUZTZW13eFYyeE9iMDFGZEZST1Z6RmFWako0ZWxNd2FFcGpSVGwwVGtjeFMySldWakZaVm1oUFVqSlNXRTVYY0d0U01uZ3lXVzFzYjJOR1FsaE9TRlpyVWpKb2MxbHRiSEpNTWtaVVRsZHdXbFl6YUhwVE1HTXdZekpTUkdWSWJFeFdTRUYzVkVjeFQyRkhTa2hrTWpscllsUnNkMWRyVGtKa01IaElUa2hDYlZZd05XOWFSV1JQWWpCMFNGWllRbXhOTUd3eFYxUktSMk15U2tSaFJFcHBUVzE0Y2xOVlVrSmpNWEJVWWtSc2JWZEZjSE5hUldoWFpWZEtjRkZ0ZUUxaVZsa3dXa1ZrVjJSV2NFUmhSR1JUVWpGYWRGZHNhRXRsVm5CWVZWUmFZV0pzV2pGWFZFNVRZMGRKZVU1SE9XbGhWM2N6V2tjeFIyVlZiRWhoZW14WVRWaFNhbE5YTURGa2JWSklZa2N4YkZadVpIQlVSVm96WVZkT1NWTnVXbUZOTUhCeldYcE9UMWt3YkhCbFIzaE5ZVEExYjFsclpEUmhWbXhZVkc1S2FtVlhhR3BUVnpCNFlrZEtXRTlZYkd4V2JtUndVekZPTkdKRmVISlViV2hwVWpOb2NGZFdaRTlqYlU0MVlVZE9TbUpVUm5OWmJHTTFaVmRXVjJReWJFeFZNMlExVjBaT05GbHNhRVJUYm14aFYwVTFNbGxyYUdGaVJtaEVVMWhPV1ZFd2NISlpha2t4WWtab1JGTllUbUZWZWxaRlYxWmtOR014YkhSU2JYQm9UVEF4ZGxkRlRrdGtiVXAwVkcxNFNsSjZSbk5aYkdNMVpWZFdWMlF5YkV4Vk0yaHpWRWQwVDJGSFNraGxSMnhhVmpBMWVWa3piRzlaTUd4MFQxaFdXazFzVm01WmJHUlhaRWRKZWxOcVZsbFJNR3gzVkVWU1FtTXhhRVJUYm14aFYwVTFNbGxyYUdGaVJuQkhaREpzV1ZVemFHbFhSVTVMWlZad1dHTkhlRnBOTVVwcVUxZHNORmt3YkhSWGJXaG9Wak5vYWxOWGJEUmlSWGh5Vkcxb2FWSXphSEJYVm1SUFkyMU9OV0ZIVGtwaVZHd3hWMVJLVmxveVNsaFdibEpwVFRCdk1WZEZUa3BqUlhoSVZsaFdVazFyV25wWmEyUkxZVVpyZVdSSWNFeFNibVJ3V1dwSk1XRnNjRlJSYmxKaFZucEdNbGt5TlhOWk1HeHdZVE5PVGxVemFHcFRWelZMWWtkR2RGWnRjR3RTTVZweVYwVk9TMXBHYUZSbFNGcFJWbTVrY0Zrd1pGZGtWbkJJWWtoV1lVMVlaSEJVUldST1QxZFZlbFJxUWxwWFJrcHpWREl4WVUxWFNuUlVha0pvVm5wc01WTXdUbk5PTWs1MFZtcENhMWRGY0RGVFZXTTFUMVY0U0ZKdVRtdE5hMWt4V1ROd2QySlhVbGhPVjNCclVqSjRNbGx0Ykc1alIxVjZVMjE0YTFOR1dqVlpiV3hEWVVWNGRGVnVXbWxpVmxaMlYxWm9TMkp0VWxoTlYzaHBZbXhLTmxNeFRURmlWbXhZWWtoT1RGSXdXalZYYWs1WFpFWndXRTVVUW1wbFYzUjZXa1ZrYjJOSFRYcE5TRTVhVFd0WmQxZFVTbTVPYkhCMVZtNVdXazB4U25kWmFra3dZakZ3VkdKRVpHcGlWbGwzV2tab1MyUlZiRWhVV0ZaclVqSm9jMWx0Ykc5a1YxSllaVWhPVFZJeFZuZGFiRTQwWkRKR1dWRnRlRkJpVm05NFdXMHhUMDFIUmxoUFdGWk1VVEozTTFwSE1VZGxWV3hJVGtSc1dsZEZjSFZhUm1ONFlrZEtkVlZ1Y0ZCTk1IQnpXa1ZvVjJWWFNuQlJiWGhOWVRGS2MxZHRNVmRsVjA1MFZtMTBURkl4YjNoWmJURlBUVWRHV0U5WVZreFRSa1ozV2xSS1ZtUldjRmhTYlhCb1VUSm9kMVJGWkdGTlYwcDBWR3BDYUZaNmJERlRNR2hLWXpKR1ZHSkVaR3RpVlZvMVUxVmpORTlXY0ZST1dFSnFUVVp2ZUZsdE1VOU5SMFpZVDFoV1RGSjZWbWxaVmxwNlRVWm9WMDFJUWt0aFZuQXhWbnBLYzFsck5VZE5WMUpRVFd0YWFWbFdXbnBsUm1oWFRVYzVZV0pzV2pGWFZFNVRZMGRKZVU1SE9VeFhTRkY1VjFab1Nsb3lTbkZOV0ZwTFlWWndNbFJITVVka01rNUlaVVJXVEZOR1NuWlpWbWhPWXpGc1dWTnROV3RXZWtaeldXMDFVMlZyZEZWa1NGWkxZVlp3YzFSSE1YTmxiRXAxVm01V1drMHhTbmRaYWtrd1lqSktjRTVZWkdwaVZHd3dXVlpvVDJKRmRGVlBXRlpOWW10S05WbHFTWGhqUjAxNVZsYzVURlY2VmpOWk1qQTFZbTFPZEZadWNHcGxWMmQzVkVjd01XUnRVa2hpUnpGc1ZUSjBNVmRyWXpWa1ZuQlVZVVJDVFdKcmNITlpla2sxWXpKU2RGWllRazFpVm5CdldWWmtNMkl5VWtST1dHeGhWak5DYzFkVVRsSmpSVGwxVlcxS2FGWnVUak5YUms0d1dUQnNjMXBJUW10U01taHFVMWQzZDJJeVVraGhTRUpxWlZob01sVkVSakJrVm1oVlkwZG9hbUpYVVhoWmJHUlhaRmRTU1ZSWVFtMVZNbmMxVXpGT05HUldRbGhPVkVacFVqTm5OVk14VFRGa01rNTBUMWhTYUZkRk5YTlRNRTV6VDFWNFNWVnRPV0ZXZWxFeVYyMDFWMlJXYTNwVmJrSnBUV3BTZGxsdGJEUmthM2hJVkZoQ2JFMXNiM2haYlRGUFRVZEdXRTlZVmtwU01GWjJXVzFzTkdORmVFaFBTRTVhWlZkM00xa3lNVmROUjFKWlUyNVdTbEl4YjNoWmJURlBUVWRHV0U5WVZreFJNbmN6V2tjeFIyVlZiRWxVVkd4clVqSm9kMWt6YkRSTlZrSllVbTVzWVUweFdqQlhiR014VFVkT05XVkhNVkZXTVc5NFdXMHhUMDFIUmxoUFdGWk1VVEozTTFwSE1VZGxWV3hJVjFoT1lWSklVbmRYYld4dVlVVjBTRTVFYUdsUk1uUjNXbFJLYzJKVmRFaFhWR3hwWlZSV2Ixa3dhRU5qTWxaVVlVaHdUVk5HVm5kVVJXUmFUMVpDVlUxWVFrMWlhMG8xV1dwSmVHTkhUWGxXVnpsTVZUSjNkMWxWYUV0a2JWSTFVVzVXWVZkSFRtNVdhMmh6WkRGd1ZsWnViR3BpVkd3MVV6QmFNMkZXV2toaFIzaHBZbFZhY0ZsclpGWmFNazE1Vm01T1lXRlVSalZYYkdoUFpHMUtTVlpxUW1oV2Vtd3hWMFZPU21ORk9IbFZWR3hoWVZac2RGTXdXak5oVjBsNVUyNUdZVll3TkhkWFJVNUtUMVpDV1ZWcVZtcFNNVm95VjIxc1EySlhXa2xsUjA1S1lsWnZlRmx0TVU5TlIwWllUMWhXV1ZFd2F6VlZSbWhUVGxkT1NGWnVXbUZoVlVwMFV6Rk9XbUpXY0hCT1ZFSm9VakZhTVZSRlpGWmtWMFpaVkd0a2ExWjZWbkZhUldSelpHMUtjR0ZIZEV4V1JHeHhWVVJLVW1SV2EzbFNiazVwVVRKb2RGUkZaRVppTWtwRVpVaENUVk5HUm5wWFdHeHlZekZzVkdGSVRrMVNNblI2V1RKc05HRnJkRlJoZWxwTVVqTmtlVk16YkRSaE1IaDBWRzFvYVZJelpIWlhiV3cwWVVWMFNHUXpUbWhWTTJkM1ZFVmtUbU5GZUVoU1Z6bHBVVE5vZDFSRmFFcGpNV3cxWVROT1dsVXlhSHBVUldSeVl6SlNSR1ZJUWsxaVZGWXlXa1ZrYzJKWFZsZGFTRUpyVWpKa2QxTXhUbkpPYTNSSVQwZG9VVlpFUlhkVGJXeGFZakpPTmsxVVNtbE5iWGh5VTFWU1FtTXlVbFZOVjBwaFlrUkNkMVJGVG05aGJWcEpaVWhDVFdKcmNITlpla2sxWXpKU2RGWnNhR2hYUmtwMlV6Rk9iMlZyZUVsV1dFSk1WMFJGTlZSRlpGSlBWbXcyVDFjeFVHSldiM2haYlRGUFRVZEdXRTlZVmt4Uk1uY3pXa1ZvUzA1WFZYbFhWemxNVjBSR2NWZFdhRk5oYlVaRVlVUkNURmRJVW5OVVIzUlRZa1p3ZEZadWJHcGlWbHB5VkVjeFYwNUdhM2xXYm1SclVqSjRNbGx0ZEc5a2JVbDVZekl4UzJKV1ZqRlZhMlJYWWxad1dWTnViR0ZXTVVZeFYyeG9iMkZzY0ZsUmFrSm9WbnBzTVZVd1l6VmtiVVkxWVVSQ1RWSXhSakZaZWs1VFlVWnJlV1JHVm1waVZWcHhWMnhPY21NeVNuQmpNMmhSWVdwR2VsTnRiRnBpTWtvMVVsUnNVVmRGYkhSVGJXeHZaV3hDV1ZkdVdtaFdNVVp1VkZWT05FMVdRbGRrUkVKWlZUSjBlbGxXVFRGbFZuQllZMGQ0V2sweFNsbFpWbWhUWWpCMFNWUllUbXRWTW5SM1dteG5kMDR5U25GUFYzUk1VVEp6TWxNd1pGWmtWa3BJVm0weFlWZEZjRFZYYkdSU1pGWnZlVlpxUWxaTk1VcHZWMVJLTUZOWFNYbFBXRXBMWVZac2RsZHJUVEZsYlZKSVVtMXdhRTFXU2pWWFZtUlBZa1pDV0ZaWVZsTlNNVnAwVjJ4b1MyVldjRmhWV0ZaaFRXeFpkMVpVVGxOaFJtdDVaRVZzYVUxcWJIbFRNRTV5WTBWNFNWcElRbWxpVmtveVdraHJNV1ZzY0ZsVmJGWm9WbnBHYzFscVRsZE5SWFJJVlZoQ1RGZEVSVFZhUnpGSFpWVnNTR1I2YkU1U1NGSTFWMnhvVTAxWFRuUk9SMlJoVlhwV1JsZHNaR0ZpUjA1MVUyMTRZVkV5YUhSYVJtTXhZVzFTU0dKSVdtbGhWMmg2VXpGb01HTkdaRFpSYlZKWVpXczFhMVJITVVkaE1YQkVZVWRvVEZKRlJucFphMDQwWWtWNGRHSkljRk5pYkZveFYxUk9VMk5IU1hsT1J6bGFaVmR6ZGxkWWNIZE5SWGhJWkROV2FXSlVhM2RaVm1SaFRsWlplV0pFUW1oUk1uUjNWRVZrYzFsck1WZE5WMHBPVFZSQ01WZFdaRk5oTUhSSVVsYzVUbEV6YUhwVVJXUldaRmRHV1ZSclpHdFdlbFp4V2tWa2MyUnRTbkJoU0ZaTVZrUnNNVlF5TlZKalJYUlVaVWhDV0dWcmNHdFdNM0JQV2tWNGRGSnRkR0ZSTW1odlV6QlNRbU15U2tSbFIzaE5ZbGQ0TmxWdE5WZGtWbXQ2Vlc1Q2FVMXFVblpaYm14eVRESktObU5JYkV4Vk1uYzFVekZOTVdReVRuUlBXRkpvVjBVMWMxTXdUbk5QVlhoSlVXNXNhVTFxUm5kWmVrcFdUbXh3ZFZadVZscE5NVXAzV1dwSk1HSXlTbkJpUkdScVlsWlpkMXBHYUV0a1ZXeElUbFJHYVZJelpHOVZSbU13VERGd1ZFNVhlR3hUUmtweldXMHhVbUl5U25CbFIzQk1Wa2hDY1Zwc1ozZGpNV3hWVFZSa2JWWklValZYYkdoVFRWZE9kRTVIWkdGVmVsWnpWMVprVDJJd2RFaGhNMDVoWW14YU1WZFVUbE5qUjBsNVRrYzVZVlV6YURGVE1XZ3dUV3hzV1ZOWFpHdFNSRVl4VmpOd1MxcEZlRWxUVkd4cFlraE5lRmRHVWpCaGJHTjVUbGRLVGxacVJtdFZSbWhTWkZac1dGVnRkRTFUUld4MFUyMDFVbVJXYkZoVmJYUk1VakZ2ZUZsdE1VOU5SMFpZVDFoV1RGRXlkek5aYm05NFpWZGFWR1ZJUWxobGF6RXdWMnhaZUZsck1YTk5TRlpoVWpKNE5sZFdaRXRqTVhCVVpVaENXR1ZyU210V00zQkxXa1Y0ZEdWSVdscE5iazUzVkVWb1VtUldiRmhWYlhSTVVucFdhVlJVUlhka1ZuQjBZa2hzWVZVeWRIcFhWbG93WkZaa05sRnRVbGxXUkVaMFdrWmpNV0Z0VWtoaVNGcHBZVmRrZDFwVVRrdGlSMUpKVm01c2FXRlZTbTlXZWtreFdXc3hSMDFJU2xsUk1IQlpXVlpvVTJJeGFFUlRiVkpNVTBaS2RsbFdhRTVQVmtKVlRWZG9VVTB4Y0RKWlZtUlNXakF4UldORVFtaFNNbmcyVkVWa1IyVldiM3BXYmxKaFZucFZkMWt6YkhKak1sSklZVWhDYWsxNlFucFhWbG93WkZaa05sRnRVa3hOV0dSd1ZtcEtjMDFIUmtka01teFpWa1JGZDFSSE1XRmpSMDUwVm14b2FGZEdTblphYkU1eVl6RnNOVTVZWkdwaVZHd3dXVlpvVDJKRmRFaFNXRUpOVW5wU2RGTnRNREJrVm10NVVtNU9hVkV5YUc5VVJXUkdZMFY0U0ZKcWJFMVRSMUoyVjJ4ak1FNXNjSFZXYmxaYVRURktkMWxxU1RCaU1sSkVZa1JrYTJKVldqVlRWV2hLVDFac1dWTnROV3RXZWtaeldXMDFVMlZyZUhSbFIzaHBZbGRSZDFsVlRqUmtiRUpaVTFoT1dtVnFSa05aTWpWTFlVZFdWR0ZJV2t4Vk0yaHZWVVpqTUdSV2EzbFNiazVwVVRKb2Ixa3lNV3ROVjBwWVZtNVdhMU5GTVhkVVJXUXpUMVp3VkU1VlZtRldNWEJ6V1RJMVMySkdjRVJhTTBKTlUwVXdOVmR0TlZka1ZtdDZWVzVDYVUxcVVuWlhiRTV6VGpKT2RGWnFRbXRYUlhBeFUxVmtZVTFYU25SVWFrSm9WbnBzTVZNd2FGSmpSMVY1VkcxS1lWWnFRVFZhUldSdlkwZE9OV1ZIYUZoTmJGcHJWVVprUjJWV2IzcFdibEpoVm5wVmQxa3phekZqTVhCWVRsYzFhMUl5WTNKVVZsRTFaRlY0ZEZSdGFHbFNNMlIyVjFab1MySnRVbGhOVjNocFlteEtObE14VW5kTlJYaEVUVWhTYW1KdVp6UlphMDB4WlZad1dWUnVXbWxUUm5CelZtcEtjMDFIUmtSaFIzQk5VakJXZDFwc1ozZE9Na1pZVjFjNWFtRnVZelZVVms1YVlsVjBTR0V5T1d0Uk0yaDZWRWN4VTJSdFNuUldWemxxWlZkb01sTXhUbkprVjA1MFZtNXdhVTF1WjNsWGJFNDBZekI0ZFZOdGVHaGlWbHB4V2tWT2NtTXhhRVJUYm1SaFZucFdjbGxXWXpGaWJHaEVVMVJzVVZaRVJucFVSelZQVFVac1dWVnRlRXhSTW5jMFdtdGtWbVJYUmxsVWEyUnJWbnBXY1ZwRlpITmtiVXB3WVVkb1dFMXFiR3RUYld4aFlVWmplVTlYVWsxaWJFcDJWMnhqTUdORmRGUmlTR3hoVjBaSmVGa3lNREJhTWtwRVRsUkNhRkl4V2pGVE1FNXlUakZ3ZEU5WWJFeFNTRkl5VkVaTmQwNHdkRmhoTWpsYVZtNVNNbGRHVGpSbGEzUklUMGhDVFZJelpERlpNakZYWTFad1dGUnFRa3hXU0ZJMVYyeG9VMDFYVG5ST1IyUnBVWHBXTTFreU1EVmtSMFpaVkcxNFRGRXlkelZhYkU1eVl6RndXVTFJUWxCTldHZ3hWRWhyTkdGcmJFbFVibHByVjBWd2NWZHNWWGhoUjA1SlVXNUNhV0pYVWxkV1YzUXpUMVp3U0ZKcVFscFdTRUp2V1RCb1EyTXlSbGhVYldoclVqSjRNbGx0YXpWalYwMTVUMWhXVUUxck5YWlhWbWhMWld4d1dWVlViR3RYUmtwMFZEQlNNR0ZXYkZsVWJYaFBZV3hHZWxkc2FITlRNREZ6WTBac1ZHSnVRbTlXYm5CelRWWk9XR05JV214aE0yaEZWVEkxZDJGVk1IaFhhbFpZVmtWd1dGcFhkSE5qVjA1SVUydHdhV0pJUW5wWFZ6QjRWVEpTZEZSdVFsQlhSVnB4VmpCYVlXTXhhM2xPV0VwcllsVXhObFV5TVhkVVZURnpVMjVPV0dKVVJsaGFWbVJQWkVaYWRHUkZNV2xYUlVreVZURmtNMlF5VFhkaVNGSlBWakpvY0ZacVJtRk9iRTVZWTBoa1dtRXllREJXVnpFMFdWZEtXR1ZFUmxoaVJUVkxXWHBDYzJSSFRrZFRiWFJYVFZadk1WZHNXazlUYlUxM1lraFdWV0pyTlc5V2FrRXhZekZPV0dKRVRtaFdhelZaVmxjeE5HRlhTbk5UYm1SaFVsZG9lVmxXVmpSU1JrNXhVMnR3YUZkSFVuZFdiWFJyWWpKV1dGTlljR0ZTTTJoeFdWWldjMlZzVGxoTlZtUlBVbGQ0ZDFwRVNuTlhiRmw0VTJwS1drMUhhRlJXYWtaelYwZFdSVkp0UmxaTlIzZzJWVEZqTVZsWFJraFRhMnhYWWxob1MxbFdhR3RqUm10NVRWWmtiR0pWYkRWYVZWSkxXVlpWZDJKSWNGUldlbFpNV1d0a1IyUkdXblJqUjNSU1RVZDRObFV4WTNkbFIwcElWV3RvYUZOR2NHaFZWRUp6Wld4T1dFMVlUbXhpUlhBeFZtMDFWMWRyTUhoVGJtUmFZV3RyZDFsV1ZqUlNSazUxV2tkd2FWWkhkM2RYVmxwdlZESktSbUpJUW10TmJYaGhWRmQwWVdWc2JISlVhM0JxVFVkNE1GWlhOV0ZoVjBwWFZtNUNWVkpWTlV4WmJGcHpWMGRLU1ZScmNHaFhSMUozVjJ0V2EySXlTa2hUYmtKVVYwVTFTMWx0ZUdGTlZtUnlXa1prYVZZd1dsbFViR1EwV1ZaRmQySkljRlJXZWtaWVZHdGtVMU5HV25WV2JVWlNUVWQ0TmxVeFpEQlZNa3BIWTBoU1YySnRlSEZaYkZwaFkyeE9XR0pFVG1oV2JrSXhWbTAxVjFkdFZsWmlTSEJVVm5wV1ZGUldaRTlUUjFaSVpVZHdiRlpYZURaVk1XUXdWREpHU0ZOcmFHeFNNbmhoVm1wQk1XVldhM3BpUlhCcVRVZDRNVlpIY0VOWGJHUkhVMjVPVkZZeWQzcFpWbHB6VjBkV1JWUnNjRmhTTTJjeVZURmtjMDB5UmxkalJXaFhZbFJHYUZZd1ZuZE9WbVJ6V2taS2FGWllhRVZWTWpGdllXMUtXRlZZYUZwaVIxSllXa1prVTFOV1VsaGlSVEZTVFVjNU0xZFdWbXRqTWxaeVlraENhMDF0ZUdGVVYzUmFaREZrVlZOdE5XaFdXR2hGVlRJd2VHRlhSbFppU0hCVVZucFdSRmt3WkU5VFJscFlZa1V4VWsxSVFqQlhWekF4VkcxR1ZtVkZVbFJpYkZwb1ZqQmtVMUpzWkhOYVIwWnBVakExZDFVeGFFOVRiVXBYVjIwNVdGWkZjSFZaVmxZMFVrWk9kVkZyY0doWFIxSjNWMnRXYjFZeVVYbFRhMmhYVmpKNFRsVlVRbmRPVm1SellVWk9UbFl3TlRCVWJHUTBXVlpGZDJKSWNGUldla1pJV2tSS1QxTkhWa1ZXYTNCb1YwZFNkMWRVUW05VE1sSnpZak53VkdKWWFIRlVWRUY0WTBaU1JsUnJkR3RXTUd3MlZsYzFRMWxYU25Sa1NFSlZVbFUxVEZwSE1VdGpiR1J4VW0xc1UwMVlRak5YVjNSclRrZEtSMk5GVWxSWFJUVkxXV3hTYzAxV1dsaE5WbVJxVm01Q1dWWkhjRU5aVmxsNFVtNUNWVkpWTlV4YVJ6RkxZekZHZFdKSGJFNWlWa2t4VmpKNGIxUXlWbkppU0VKclRXMTRhRlZxUm1GTk1YQkdXa2MxYUZaWWFFVlZNakExVjJ4YU5sWnVTbHBoTWxKWVdsWldjMk5IVVhsaVIzQk9UVVZ3ZWxZeFVrdGpNa1pJVTJ0U1ZGZEZOVXRaYlhoTFpHeGtWMkZHU21oV1dHaEZWVEl4YjJGdFNsaFZhbHBVVmpKM2VsbFdaRXRYUjBwSVRsZG9WRkpyY0ZkWFZsWnZVekpTZEZWcVZsUlhSVFZMV1d4U1IySXhjRlpXYkU1cFVqQTFTbFpYTURWVGJVWlpXa2hDVjJFeWFIcGFSRVozVm14YWRXSkhjR2xXUjNjeFZURmtjMDB5UmxoVGJsSlFWa1ZLYjFacVJuWk5WbHB4VTI1T1RsSXdXa1ZWTVdoUFUyMUtjbU5JVGxwbGEyc3hXWHBLVTJSR1duTmhSMmhZVW10d01sVXhaSE5OTWtaWVZHdHNWR0pzY0dGVVYzaGhUbXhyZW1KRmNHcE5SM2d3Vm14a2MxUldSWGRqU0U1aFZsZFNVRmxyWkU5VFZsWjFVVzFzVG1Gc1drdFhWM0JLVGxkT2NtSklRbXROYlhoeFZGUkdTMkl4WkZWVGFrSlhWakExTUZWdE1YZFpWbFYzWWtod1ZGWjZWa3haYTJSSFpFWmFkR05IZEZOaVZrb3pWMnRXYTJKdFJsWmxSVkpVWWxSV2FGWXdXa3RXVm5CR1drVmthR0pWVmpOWlZXaGhZVlV4ZFZSdVFsVlNWVFZNVkZSS1IxZEZOVmhrUjJ4T1RXczFkMVpGVms5VE1sWnpZMFpzVm1KR1dtOVdibkJIWXpGc2NWUnNaRTVTVjNoM1drUktjMWRzV1hoVGJrcFVWakozZWxsV1pFcGxWazUxVW10d2FGZEhVbmRYVjNScll6SldkRlZyVWxSWFJUVkxXVzF6TUdReFpGZGhSazVwVW14V05sWlhOWE5oUmxvMlZtNVdWRll5ZDNwWlZscDNVMGRLU1dOR2NGZE5TRUkyVmpKNFQxTnRUWGRpU0ZKc1UwWndZVlJYTlU5alJsSkdWR3QwYVZZd1dscFZNakUwVTIxR1dWcElRbGhpVkVaNldsWmFkMVl4Y0VsUmJYUlRUVzFTZDFaRlZrOVRNREI1VW10b1YySnNXa3RaVm1oclkwWnNObE51VG10V2JUazFXbFZrTkZZeVNsWlhibkJoVW0xU1YxbFdWalJTUms1MVlrZEdWMlZyV25aWFZscHFUVmRPU0ZOdVVscE5iWGhPVlZSQ2QyVnNaSE5aZWtacFlsWktTVmRxU25OVVZrVjNZMFJXV0dKSGFGQmFSekZMVTFaa2RHVkdTazVoYlhkNFYydFdhMVl3TlVoVmEyeFZWako0VGxWVVFuZFJNV3Q1VGxWMGFGSXhXbFZWTVdoUFUyMUtjbU5JVGxwbGEyc3hXWHBLVTJSR1duTmFSbkJYVFRKa05GWXllRzlVYlVaV1pVVlNWR0pzU21GV01GVXdaREZrYzJGRmNHaFdXR2hGVlRKd1IyRnNTWGhUYlRsaFVsZFNXRlZxU2xOWFJUVllZMFZ3YVZKRlNqWlZNV04zWlVkR1NGUnJiRkppYTBwd1dXeGtVMDVzVGxoalNGcG9WbXRhVjFWdGRFdFZiRnBXVm01d1YxWnNXa2hWYTFwSFRsZFdSMVZzU2xkV1ZGWkVWa1ZXYTFReFJuTlNXR1JUVjBVMWFGWnNWbUZTVmxaelZHcFNWMUpyV2xkVmJYaGhWVzFXV1dGRlpGWldiRnBJVmxkNFIwNVhWa1poUmtwWFZteHZNVlpXWkhOT1JtUnpVbXhhVjJFd2NFNVZiWE14VVRGV1YxZHJPVk5TV0doSFYydFdTMVZzV25OWGExWlZVbFphY2xWWGVFWmxWMVpHVkdzeFUxWkZXa1JXVmxwV1RsWkdjbVZGV21GU1ZYQlVWbTEwYzJWc1dsZFdhMlJTWWtaV00xWkdhRTlWTURGR1YydE9WMVpGU2s5WmVrWktaREZLY2xWdGFHaE5SM2cyVmxod1ExSXhSbk5WYkZwVFYwVTFWRlJWVm1GVFZscFdWR3BTVm1KRldsZFZiWGhUVlcxV1dXRkZiRlpXYkZwSVZqSjRSMDVYVmtaWGJFcFhWbFp3VWxaV2FITk9Sa3B6VW14YVUySkdTbE5hVm1odlUxWldWMVpyT1d0TlZWa3hXbFZXYjFWc1dsWlhhM1JXVjBkM01GVnRlRWRXYkZweVpFVXhVMWRHU2tSV1YzQkNaVVpPVm1WRldtRlNWWEJUVm0xek1WVnNVa1pXYkdSU1lrVmFWMVF4V205VVZrcDBWV3RPVmxadFVsQlZiRlkwVW14YWNsTnNTbGRoZWxaTFZrVldWMVl4Um5OU2JGcE9WbGhvVGxWdGN6RlJNVlpWVTI1a1UxWnJjSGRhVlZaaFZXeGFWbGRzUmxaaWJYY3dWa1ZhUjFac1NuSk9WbFpvVjBkb1NsWldXbGRTTVZaelZXcFdiRkpZYUZOV2JGWmhWREZhU0dKRVVsUlNhMXBYVlcxNFlWWlhWbGxoUlRGV1ZteGFTRlpIZUZOalIxWkdZVVpLVjFZeFNqSldWbEpEVjIxTmVGTllaRk5oTUhCWFZGWldSMlZzVm5OV2EyUlNZa1pHTkZkVVRrOVdNREZHVjJ0T1dGWkZTbE5aZWtaTFZteEtjbE5zV2s1U01sSTJWbGQ0VjFJeFJuTlZiR1JWVjBVMVZsWnNWbUZTVm5CV1ZteE9WVTFJYUVkV2JYUkxWV3hhVldKRmJGVlNWbGwzVlZkNFIxWnJNVlpQVlRGVFZteHdSRlpXV2xaT1ZrcEdaVVZhVjJFd2NGTldiWE14VWxaU1JsWnRkRkppUmtreVYydFdUMVV4UlhwaFJXUldWbXhhU0ZaWGVFOU9WMVpHWlVaS1YxWldjRkJXVkVaUFRrWldSMUpzV2xOaVIyaFlXVlpvYjFOV1ZsZFdXR2hQWWtWYWQxcFZWVEZWYkZwV1YyeE9WbFpyTkRCVk1GcEhWbTFLUjFac1RsWk5NbWhJVmxaYVYxSXhWa2RVYkZKc1VsaG9VMVpzVm1GVU1WVjRWR3BTVmxKcldsZFZiWGh2VmpKR1dXRkZkRlpXYldoeVZtcEJlRlpzVGxsVWJGWlhWbFp2ZWxadE1UQlNNVlpXWlVWYVlWSlZjRk5XYkZKelpWWldXR0pFVWxaaVJWcFhWbTF6TlZWdFZsbGhSbFpXVm14YVNGWnRkRFJTTVZKeVUyeEtWMkpHY0VaV1JWWlhZVEZHYzFKWWJFOVdWVFZPVld4a1UxRXhWbGRXYms1VFVsaG9SMXBGVmt0V1JscFdWbTV3VjFaRlNraFZWM2hoVmtkV1IyRkdTbGRXVm5Cb1YxUktNRk50VFhoVGJGcFRZVEJ3VmxSVVFURlNSbEpHVjJ4a1VtSkZXbGhYVkU1UFZqRmFWbGRyVm1GV00xSlFWRlZhUjJOSFZrWlhiRXBYVmxad1VsZFljRU5UYlUxNFYyeGFVMkV3Y0ZoYVZtaHZWakZXVjFaclpGaGhNMmhIV1d0V1MxVnRWblJWYTFKVlVsWndXRlZYZUVkV01XdDZWR3hXVGxKV2NFUldiRnB2VlRGRmQyVkZXbGRoTUhCVFZteFNjMDVzVmxoaVJGSlhZa1ZhVjFWdGVHOVVWa2w0VjJ0T1ZsWkZOVlJWYTJSVFVteE9XVlJzVGxkV1ZuQkVWbXRTVDFReFJYZGxSV1JYWVRCd1UxWnRNVTlsYkdSelZtdGtVbUpWV2xkVk1XaFBWVEZhVmxkclRsWmliWGN3V1ZWYVIxWnNVblZpUmtwc1YwZG9WbFpXV2xkU01WcHlaVVZhVUZaVmNGTldiWFJhWkRGV1dHSkVVbE5pUlZwWFZXMTRRMkZyTVVaaVNIQlhZa1phU0ZWWGVHRk9WMVpJWlVaS1YxWlVWVEZXVmxKUFZURkZkMlZGV2xkaE1IQlRWbXhTYzA1c1ZsaGlSRkpYWWtWYVYxVnRlRzlVVmtsNFYydE9WbFp0VW5wVlZFSTBVbXhhY2xOc1NsZFdNRFUyVmpGYVYxSXhTblJXYTFwVllURktUbFZzV21GUk1WWlhWMnRhYWsxV2NGZFZiWFJUVm0xS1NGcEljRlpoYTBwSVZXdGFSbVZHYTNwVWJGWlhWbFp3UkZacmFITk9SbVJIVW14YVZXRjZiRTVWYkZKSFVURldWMVpVVmxKaE0yaEhXV3RXUzFVeFduSmpSVlpWVWxaVk1WVlhlRWRXTVVwWlZHeGtUbEpXY0VoV2JGWlBUa1pTYzFKc1dsWmhNSEJUV2xab2IxTldWbGRXYTJSWFVtMVNSVnBWVmpSVmJGcFdWMnM1VjAxVk5EQldNRnBIVm14S2MyTkdhRkpOTW1oT1ZsWmFWMUl4VW5OWGFsWnNVbTFvVTFac1ZYaE9SbFpZWkVVMWFrMVdTbGRWYlhSaFZtMUZkMDFZY0ZkU2JGcElWVmQ0VjA1WFZrZFZiRXBYVmxad1dGWldhSE5PUms1SFVteGFWV0pyTlZOWlZtaHZWREZXVjFaclpGWlNNRnA1VlRGb1QxVXdNVVpYYTA1WFZteGFlVmw2Ums1a01VcHlVMnhXVmsweWFFNVdWbHBYVWpGU2MySkdVbXhTV0VKVFZteGtlbVZHVmxoa1JUVnFUVlV4TTFWdGRFdFdWbFY2WVVac1ZsWnNXbEJXUmxZMFVteHdSbE5zU2xkV00yaEdWa1ZXVjJFeFJuTlNiRnBPVmxSR1RsVnRjekZSTVZaelYyeHdhazFXUmpOVmJYUkxWbGRXY2xkclVsVlNWbHB5VlZkNFIxWnJPVmxWYkVwb1YwZG9WbFpXV2xkU01WcHlaVVZrVldFd2NGTldiWGhoWWpGU1JsWnRkRkppUlZZMVdUQldVMkZHU2xaTldIQldZa1phU0ZWWGVGSmxWMHBHVldzeFUxZEdTa1JXVmxwV1pVWnNWbVZGV2xkaE1IQlRWbTEwVjJWc1dsVlJhMlJTWWtad1dWVnNhRTlWTVZwV1YydE9WbUZyU2s5WmVrWktaREZLY21GSGFHaE5SRVkyVmxkd1ExSXhSbk5VYkZwUFUwVTFWRlJWVm1GUk1WVjZZMGQwVWsxSWFFZFdiWFJMVld4YVZXSkdiRlZTVm5CeVZWZDRSMVl5U2tsWGJFcG9WMGRvU0ZaV1dsZFNNVkpIVkd4U2JGSldjRk5XYkZaaFZWWlNSbFpZYUZKaVJWcFlWMnRXTUZSV1NsZFhhMDVXVm14WmQxVXlkRFJTYkZweVUyeEtWMVpIYURaV1YzQkRVakZTUm1RelpGWmlSMUpPVld4a1UxRXhWbGRYYkdSWFlUTm9SMVp0ZEV0VmJGcFZZVWh3VmsxV1draFZWM2hUVGxkV1IyRkdTbGRXVkZJMVZsWmtjMDVHVGtkU2JGcFRZVE5DVTFwV2FHOVRWbFpYVm10a1dGSnNXa1ZhVlZadlZXeGFWbGRyT1ZaV2F6UXdWVzE0UjFac1NuSmhSbHBXVFRKb1VGWldXbGRTTVZaSFYyNUNiRkpZYUZOV2JGWmhWREZXY2xScVVsZGlSVnBYVmtjd05WVnJNVmRXYm5CV1RWWmFTRlZYZUd0WFZrWnlWV3N4VTFac2NFUldWbHBXVGxaa1JtVkZaR0ZTVlhCVFZtMHhNMDFXVmxoaVJGSlRZa1ZhVjFWdGVGTmlSa3BXWWtod1YxWkZTa2hWYTFVeFZteFNjVlJzU21oWFIyaElWbFphVjFJeFdraFdhMXBVVjBVMVdGWnNWbUZTVmxwV1ZXdE9VazFJYUVoV1IzUkxWV3hhYzFkc1FsVlNWbHBZVlZkNFIxWXhVbk5SYXpGVFlURndSRlpXVWtwTlZrVjVWbTVLVkZkRk5WVlVWVlpoVVRGYVIxcEVRbEpOU0doSFZtMTBTMVZzV25KT1JFSldWakozTUZacldrZFdiRkowVFZaV2JGZEhhRTVXVmxwWFVqRlNkRkpzV2xSWFJUVlVWbXhXWVZFeFdsVlViVVpTVFVob1NGVnRkRXRWTVZsNlVXdFNZVkpzV2t0WmVrWkxWbXhLY2xOc1pGZFdNRFUyVmxkNFYxSXhSbk5WYWxac1VsZG9VMVpzVm1GVU1WSkdWMnRrVW1KRlZqWldWM1JQVm0xR1dXRkZNVlpXYkZwUVZWZDRTMVpIVmtaaFJrcFhWbFp3VWxacmFITk9SazVIVW14YVUySlhhRmhaVm1odll6RldWMVpxUWs5U2ExcDVXWHBPVDFVeFdsWlhhMDVYVW1zME1GWlZXa2RXYkZKeVlrZHNhRTFIZURaV2JYQkRVakZLYzFWcldtaE5NRFZWVkZWV1lWRXhXa2RVYWxKWFVtdGFWMVZ0ZUdGaE1ERkdZa2h3Vm1KR1draFZWM2h6Vm14U1dWUnNUbGRXVm5CRVZtcEdWMVJ0VFhoVFdHUlRZVEZ3YzFWc1ZYaGxiRnBYVm10a1VtSkdWalZhVlZaVFZGWktXRlZyVGxaV2JIQlFXa1ZhUjA1WFZrWlhiRXBYVmxad1VsZFhkRmRUYlUxNFUyeGFVMkV3Y0ZoV2JuQkhVa1pTUmxac1pGSmlSVnBZVmtkMFUxUldTbGhWYTA1V1YwaENVRlZyVmpSU2F6RldVMnhLVjFaSGFEWldha1pYVWpGS1IxVnVRbXhTVjJoVFZteFdZVk14VmxsaVJGSlVVbXRhVjFWdGVFTmhWMFYzWWtod1ZtVnJTa2hWYTFwaFpFVTVWbFJyTVZOV2JIQkVWbFphVms1WFZsZFNia0pzVW14d1UxWnNWVEZWYkd3MlVXdHdhazFWY0ZkVmJYUkxWMnhWZW1GR2JGWldiRnBRVjFaV05GSnNjRVpUYkVwWFZqTm9iMVpGVmxkaE1VWnpVbXhrVjJKdFVsTlpWbWh2VWxaV1YxWnFRbWhOU0doSFZGWldTMVZzV2xsVWFsWldWakozTUZWdGVFZFdiRXB6VTJ4V1ZrMHlhRXBXVmxwWFVqSkdWbVZGV2xWaE1IQlhWbXhXVjJWc1ZuRlJhMlJVVFZWYVdWVXhhRTlWTVZwV1YydE9WMkZyV2tkWmVrWkxWbXhLY2xOc1dsZGhNRm8yVm10YVYxSXhSbk5WV0doVlYwVTFWRlpzVm1GUk1WcEhWbXMxYWsxVmJETlZiWFIzVkdzeFJtTkdjRlZTVmxwNlZWZDRSMWRHU25OaVJURlRWbXh3UkZaV1dtRlVNa1pXWlVWa1YyRXdjRk5hVjNSaFVrWlNSbFpxUWxKaVJWcFhWRlZvVDFaR1dsWlhhMDVXVFZkb1VGVnJWalJTTVhCR1UyeEtWMkpWTlRaV1JtUXdVekZHYzFWWWNGWmhNRFZ3Vld4VmVHVnNWbkZSYTJSU1lrWkdOVlF4Vms5VVZrcFlaVVZPVm1WcmNISlZWRUkwVTBad1JsUnNTbGRXVm5CM1ZsWmFUMDVHVG5OU2JGcFZZa2hDVGxWcVRsTlNSbFpYVm10a2FGWnJXbFZhVlZZMFZXeGFWazVXVWxaV2F6UXdWVzE0UjFac1NuTlZiWEJUVmxkNE5sWlljRU5TTVU1SFZXdG9hRkpWTlU1VmJGcGhVVEZXVjFaVVZsaFNXR2hJVjJ0V1MxVnNXblJsUlRGVlVsWmFjbFZYZUVwbFYxWkdWR3M1YUUxSGVEWldWM2hYVWpGS1IxUnVSbUZTVlRWT1ZXeGFZVkV4VmxkV2FrSlVWbGhvUjFwRlZrdFZhekZKVVZob1ZsWXlkekJWYlhoSFZteFNjbE5yT1ZkV1YzZzJWbGQ0VjFJeFJuTldXSEJwVWxaS1RsVnNXbUZSTVZaWFYyeGtUMUpyV25kYVZWWmhWV3hhVmxkc1pHRlNNMUpMV1hwR1MxWnNTbkpUYkdSWFVsaENSbFpGVmxkaE1VWnpVbGh3V0dFeFNuRlpWRUY0Wld4V2MxWnJaRkppUmxZMldXdFdVMVJXU2xkWGEwNVdWbXh3V0ZScldrZGpSMVpHVjJ4S1YxWldjRmhYVkVvd1UyMU5lRk5zV2xOaE1IQlhWRlJLTkZKV1VrWldha0pTWWtaR05sWXlkRk5XUmxWNllVVjBWbFpzV2xoVlZ6RkhZMnhTV1ZSc1RsZFdWbkJFVmxod1EySnRUWGhVV0dSVFlURktWVmx0ZUdGU1JsSkdWbXhrVW1KRlZqTlZiRkpIVlcxR1dXRkZaRlpXYkZwSVZtdGtWMVpzVWxsVWJFNVhWbFp3UkZadGVHOWlNVVYzWlVWYVYyRXdjRk5XYlhoYVpWWldXR0pFVWxOaVJWcFhWVzE0WVZSdFJYZE5XSEJXWVd0S1NGVnJaRk5qYkZKMVlrWktiRmRIYUVoV1ZscFhVakZhU0Zac1dsVlhSVFZVVm14V1lWRXhXbk5oUnpsU1RVaG9SMVp0ZEV0VmJGcHpWMnBXVmxZeWR6QlZiWGhIVm14S2MxVnRlRmRXVkVZMlZsZHdRMUl4U2toVmExcFZZbTE0VTFwV2FHOVNNVlpYVm10a1YxSXhXbGRXUm1oUFZURmFWbGRyVGxkaVIyaDJWVlJDTkZKc1duSlRiRXBYWWtac05WWldaSE5PUmtwelVteGFWVlpGV2xOWmJYaGhVa1pTUmxac1pGSmlSVnBZVmtab2ExVnRSbGxoU0U1V1ZteHdVRlpXV2xkU1IxWkdZMFpLVjFaV2NHaFdSbHBYVkcxTmVGUnNXbE5oTVVwdlZXeFdjbVF4VmxsaVJGSlRZa1ZhVjFWdGVFTlVNREZHWWtod1YxSkZTa2hWYTFwWFVsZEdSbFJyTVZOV01VcEVWbFphWVZReFpGWmxSVnByVWxWd1ZWUldWbmRXVmxKR1ZtMTBVbUpGV2xoWGEyaHJWVzFHV1dGRlpGWldiRnBJVm10VmVHTnNUbGxVYkhCWFZsWndSRll5ZUZaTlIwMTRVMnhhVTJFd2NGWldiRlY0Wld4YVIxWnJaRlZTVkZJelZrZHpNVlJXU2xkWGEwNVdWbXh3V0ZaVVFqUlNiRnB5VTJ4S1RsWnJjRXBXUlZaWFZqRkdjMUpZWkZOWFJUVllWRlZXWVZKV1ZsbGlSRkpVWWtWYVYxWkhkRk5WYkZWNllVVjBWbFpzV2xCVmExWTBVbXN4VmxOc1NsZGhNWEJRVmtWV1YyRXhSbk5UYkZwcVVrVktWRlZVVG05U01WWlhWbXRrVmxJd2NGZFZNV2hQVm1zeFJsZHJUbGRXUldzeFZXdFdORk5HV25KVGJFcE9UVVZ3UlZkclpEQlZiVTE0VTJ4YVUyRXdjRlpVVjNCSFVrWlNSbGRyT1ZKaVJWcFlWa2MxWVZWdFZsbGhTRVpXVm14YVNGbHJXa3RTUjFaR1YyeEtWMVpVUVhoV1ZtUXdWVzFOZUZOc1dsTmhNSEJYVm14a1QyVnNXWGhXYTJSVllrWktTVlV4YUU5Vk1WcFdWMnRPVjFack5EQlZNRnBIVm14S2NtVkdWbFpOTW1oTVZsWmFWMk14YkZkVmExSnNVbGhDVTFac1ZtRlpWbkJXVm1zMWFrMVZOVmRWYlhSVFlVWktWbUpFVGxaWFIzY3dWVzE0UjFac1NuTlJhemxPVWxkNE5sWnJVa05TTVVwSFZtdFdhRkpWTlU1VmJHUlRVVEZXVjFkck9WWlNXR2hIV1d0V1MxVXdNVmRoTTNCV1ZqSjNNRlZ0ZUVkV2JFcHpWVzFHVGxKVVJqWldiWEJEVWpGR2MxcEdaR0ZOTURWVVZteFdZVkV4V2tkV2F6VnFUVlV4TTFWdGVGTlVhekZHWTBWNFZWSldXbkpWVjNoR1pESk9SMWRyTVZOWFJrcEVWbGh3UTAxSFZsZFRhMUpzVWxad1UxWnNWbUZWVm14elZtdHdhazFXVmpOVmJYUkxWbXN3ZUZkclZsVlNWMUpZVlZkNFJtVnNSbkpVYkZaU1RUSm9TRlpXV2xkU01WWnpVMnBXYkZKdGFGTldiRlpoWWpGd1ZsWnNTbXBOVlhCWFZXMTBTMVpWTVhGU2ExSlZVbFp3VUZWWGVFZFdNVkp4VW14S2JGZEhhREZXVm1Rd1VqRktkRlZyV2xWaE1VcE9WV3hTYzFFeFZsZFdWRlpUVWxob1NGZHJWa3RWYkZwMFpVWktWVkpXV1hkVlZ6RlhZMjFHUlZGc1NtaFhSMmhLVmxaYVYxSXhUbk5VYmtKc1VsZG9VMVpzVm1GWFZsSkdWbXM1VW1GNmJFZFpWV040VkZaS1ZXSkZUbFpXYkZVeFdURmFTMUpIVmtaaFJrcFhWbFp3VWxkWGVGZFRiVTE0Vmxoa1UyRXdjRmhXVkU1dlZsWldWMVpyWkZkaVIzaFZXbFZXYjFWc1dsaFZibWhXVmtWYWRWbDZSa3RXYkVweVUyeGFWazB5YUVwV1ZscFhVakZTUm1WRldtRlNWWEJUVm14a00yVnNWbGxpUkZKVVlrVmFWMVpITURWVmJVcHlZMFZhVlZKV1dsaFZWM2hHWkRGU1dWUnNUbGRXVm5CR1ZsWmFiMkV4UlhkbFJWcFhZVEJ3VTFSVlZtRmtiRlpaWWtSU1UySkZXbGRWYlhoRFZqSldXV0ZHYkZaV2JGcElWakowZW1ReFRsbFViRTVPVWxad1JsZFhkRmRUTVVaeVpVVmFWMkV3Y0ZOVVZWWmFUVVpXV1dKRVVsTmlSVnBYVmtkMFYxVkdTbFppU0hCV1lrWmFTRlZYZUZabFZURldWR3N4VTAxR2NFUldXSEJIWW1zMVYxSnVRbXhTVm5CVFZteFdZVlV4VWtaV2JYUlNZa1ZhVjFsNlRrOVZNREZHVjJ0T1ZrMVhhSEpWYTFZMFVtMUtSbE5zU2s1aVYyaEZWMVJLTUZWdFRYaFRiRnBUWVRGS1UxcFdhRzlTTVZaWFZtczVVbUpXUmpOVk1XaFBWVEZhVmxkclZsWldiVkoyVld0V05GSnNXbkpUYkVwWFZrZDRXbFpGVm1GaE1VWnpVbXhrYUdWcmNGTlpWbWh2VTFaV1YxWnJPV3BOVlZwNVZXeG9UMVV4V2xaWGExWldWbTFvVkZWclZqUlNiVXBHVTJ4U1RsSXlaM2RXVm1SelRrWktjMUpzV2xOaVJYQk9WV3hrVTFFeFZsZFdibkJxVFZWc00xVnRkRXRXUm1SSVZXdFdWVkpXV25wVlYzaEdaVmRHUmxSdGNHaE5WVm8yVmxkNFYxSXhTa2RTYWxac1VsWndVMVpzVlRGUk1YQkZVV3R3YWsxVmNGZFZiWFJUVld4WmVXRkZWbFZTVmxwWVZWZDRSMVpyT1ZkaFJURlRZbFpLUkZaV1dtRmphelZIVW01Q2JGSlhhRk5XYkZVeFpXeFdXR1JGV21wTlZYQlhWVzEwVTFWc1pFWmpSVlpWVWxaV05GVlhlRXBrTVVwelUyc3hVMkpXU2tSV1dIQkRUa1pHY21WRlpGTmhNSEJUVm0xemVHVnNXbFZSYTJSU1lrWndXVnBGVmxkVVZrcFlWV3RPVmxaRmJ6QlZWRUkwVW1zeFZsTnNTbGROUkVZMlZtdFNRMUl4Um5OV2ExcFRWMFUxVkZac1ZtRlJNV1JaWTBoT1UxWllhRWRXYlhSTFZXeGFWV0pJYkZaV01uY3dWbFZhUjFac1NuTlRhemxUVmxSR05sWlhlRmRTTVVaelZGaHNiRkpXV2s1VmJHUlRVVEZXVjFkdVRsSmhNMmhIV1d0V1MxVXdNSGhqUlZwWVZtczBNRlV5ZUVkV1ZrNXlWbXhPVWsweWFGSldWbHB2WWpGS1YxSnNiR3BTVlRWT1ZXeGtVMUV4VmxkV1ZGWnFVbXRaTVZwVlZqUlZiRnBXVjJzNVYwMXRkekJWYlhoSFZteEtjMU5yTVZOaGVsWkVWbFphWVZZeVJrWmxSVnBYWVRCd1UxWnNaRk5TVmxKR1ZtMTBVbUpGVmpWWk1GWlRWRlpLV0ZWclRsWldiRnA1VkZWYVIyTkhWa1poUmtwWFZsWndVbFpIZUZkVGJVMTRVMnhhVTJFd2NGWmFWbWh2VTFaV1YxWnJPV3BXYTFwNFZqSjBUMVJXU2xkWGEwNVdWbTFTVDFSVVJrZGpSMVpHVjJ4S1YxWldjRkpXUlZaWFZqRkdjMVJZY0ZaaE1EVnlXVlJDYzJWc1ZuRlJhMlJTWWtaV05sWnRkRTlVVmtwWFYydE9WbFpzVlRCWmVrWlBWbXhLY2xOc1dsZFNhM0JGVmtWV1YxWXhSbk5TYkZwclVsZFNUbFZzWkRSUk1WWnhWRzA1VWsxVmJ6RmFWVlp2Vld4YVZrNVZlRlpoTURRd1ZXMTRSMVpzU25KbFJrNW9WMGRvVEZaV1dsZFVNVTEzWlVWa1lWSlZjRlZXYkZVd1pERldXV0pFVWxOaVJWcFhWVzE0UzJKR1dsWk5XSEJXWVd0S1NGWkZXbUZTVmxKeVZXc3hVMVpzY0VSV1ZscGhVbTFOZUZOc1dsTmhNSEJWVm1wQ1YyVnNWbkZSYTJSU1lrVTBNVnBWVm05VmJGcFdWMnQwVkdWclNrdFpla1pYVm14S2NtRkhjR2hOUjNRMFZsWm9jMDVHU25OU2JGcFRZa1Z3VGxWc1pGTlJNVlpYVm01d2FrMVZiRE5WYlhSTFZrWmFSMk5GVmxWU1ZsWTBWVmQ0VW1WVk5WWlViRkpTVFRKb1NGWldXbGRTTVZKSFUyNUNiRkpZUWxOV2JGWmhWRlpTVjFacmNHcE5WWEJYVlcxMFMxWlhWbGxoUld4V1ZteGFTRlV5ZUhaa01WSlpWR3hXVjFaV2NFNVhWRW93VTIxV1IxSnFWbXhTVm5CVFZteFdZVll4V25OVWFsSlRZa1ZhVjFWdGVFTlVWa3BZWlVWT1ZsWnNjRWRaZWtaYVpERktjbGR0ZUZOV1YzZzJWbXRhVjFJeFNsZFNiR1JZVjBVMVZGUlZWbUZSTVZwelYyeGFhazFWY0ZkVmJYUkxWbGRXV1dGRmJGWldiRnBJVmtkME5GSXhTbkpUYkVwWFlrWndWVlpGVmxaT1ZrWnpVbXhrVldFeVVrNVZiRnBoVVRGV1YxZHRkRlpOU0doSFZERldTMVZzV25SbFJtUlZVbFpaZDFWWGVFZFdhekZXVm1zeFUySldTa1JXVmxKTFlqRktjMUpxVm14U1ZGWlRWbXhTUjFaR1ZuUmlSRkpUWWtWYVYxVnRlR0ZXTVZWNllVVmtWbFpzV2toV1ZWWTBVbXh3UmxOc1NsZFdSVW8yVm14YVYxSXhSbk5YYWxwV1lUQTFUbFZzV21GUk1WWlhWbXBDVlZKWWFFaFhhMVpMVmtaa1NHRkZWbUZXVmxwVFdYcEdTMVpzU25KVGJGcFhWbFphTmxac1dsZFNNVVp6Vmxoc1UxZEZOVlJVVlZaaFUxWlplV1JFVG1wTlZXd3pWVzEwVTFaSFJYZFdibkJXWWtaYVNGVlhlRTVsUmtaWlZHeFNUbEpXY0VSV2ExcGhZMjFOZUZOc1dsTmhNSEJZVm14V1YyVnNWbkZSYTJSVVlraENlVlZzYUU5Vk1ERkdWMnQwVjFZelFsUlZhMVkwVW0xU1JsTnNTbGRXUlVvMlZteFNRMUl4Um5OWGJGcFZWMFUxVkZSVlZtRlNWbVIwWWtSU1ZGSnJXbGRYYTFaVFZXMVdXV0ZGYkZaV2JGcElWakp6TUdReFVsbFViR1JYVmxad1JGWnRlRk5pTVVwR1pVVmFVRlpWY0ZSVVZFWkxVa1p3Umxack5XcE5WWEJYVlcxMFMxWkdaRVpYYTFaVlVsWmFXRlZYZUVwa01rNUdWMnN4VTFac2NFUldWbHByVFVaRmVGSnFWbXhTVkZaVFZteFdZVlZXY0ZaV2F6VnFUVlZzTTFWdGRGTmlSMFYzWW5wR1ZsZEhkekJWYlhoSFZteEtkRTVXU21oaE1YQklWa1ZXVjFZeFJuTlNiRnBPVm01Q1RsVnNhRk5STVZaWFZsaG9hRkpZYUVoWGExWkxWVEpXYzFkclVscFdSVXBUV1hwR1MxWnNTbkpUYkZwc1lrWndTRlpGVmxkV01VWnpVbXhhVUZkR1NsTlpWbWh2VjFaV1YxWnRkR2xOVlZwNFZWZDBWMVJXU2xkWGEwNVdWbTFTUjFsNlJsWmtNVXB5VTJ4a1YxSlVWa1pXUlZaWFlURkdjMUpZY0ZaaE1EVk9WV3hTUjFFeFZsZFdWRkpxVFZad1YxVnRkRXRXTVZwR1RsVlNWVkpXV25KVlYzaEdaVmRHUmxSdGFFNVNiRm8yVmxkNFYxSXhSblJTYkZwVVlXdHdVMXBXYUc5VFZsWlhWbXRrVldKR1drVmFWVlkwVld4YVZrNUliRlpXZWtaeVZXeFdORkpzV25KVGJFcFhUVlpyZVZaV2FITk9SazVIVW14YVUyRjZWbGRaVm1odlZqRldWMVpyWkZkaGVteEhWa1pvVDFaVk1VWlhhMDVYVjBkM01GVnRlRWRXYkVweVkwZDBhRTFXV2paV1YzaFhVakZHYzFWc1pHaE5NRFZWVkZWV1lWRXhXa2RhUlZwcVRWWnNNMVZ0ZEV0WGF6RnhWbXRTVlZKV1ducFZWM2hIVG14YWNsWnRSazVTYkZvMlZsZHdRMUl4U2tkWGExcHFUVEExVkZac1ZtRlJNVnBGVkcwNVVrMUlhRWhaYTFaTFZXeFpkMWRxVWxaV01uY3dWVzE0UjFac1NuVlJiRXBvVFZaYU5sWlVSbGRTTVZKMFZtNUtWVmRGTlZWV2JGWmhVVEZXTmxGdVdtcE5WV3d6VlcxMFMxZHNWWHBoUlhSV1ZteGFVRmt4V2tka1IwNUdWMnN4VTFac2NFUldWbHBoWXpKS2MxTnNVbXhTVm5CVFZteFdZV0l4V2tkVWFsSlRZa1ZhVjFWdGVFTlZSbHBYVW01d1ZtVnJTa2hWVjNoVFZrZFNSbFpyTVZOV2JIQkVWbFphWVdOdFZuTlNhbFpzVWxoQ1UxWnNWbUZVTVZKWFZtdHdhazFXV2xkVmJYUkxWbXN4Y1dKRlpGVlNWbHBZVlZkNFIxWnJPVmxXYkU1V1RUSm9WRlpXV2xkaE1rbDRVMnRTYkZKdVFsTldiRlpoVFZaV1dFMUlhRk5oTTJoSFZtMTBTMVZzV2xWaVJGWldZVEEwTUZacldrZFdiRkp6WWtkMGFFMUhlRFpXVjNoWFVqRkdjMVZZYUZwTk1EVllWRlZXWVZFeFdYaGFSM1JUWVROb1IxWnRkRXRWYkZsNFYxUktWbGRIZHpCVk1uaEhWbXhLYzFGdGVGZFdWRVkyVmxkNFYxSXhSbk5qUm14cVVsWktUbFZzWkZOUk1WWlhWbTVPYWsxVlduZGFWVnBEVld4YVYxWllhRlpoTURRd1ZrZDRSMVpzU25OUmF6bFRWbXRhTmxaWGNFTlNNVVp6VldwYVYyRXhXazVWYkZKSFVURldObE50T1ZKTlNHaEhWRlpXUzFWc1duSlhibXhXVmpKM01GWkZXa2RXYkZKelVtczVWMVpYZURaV1YzaFhVakZHYzFwR2JGTmhNWEJPVld4YVlWRXhWbGRhUm1SUFlrVlpNVnBWVm05VmJGcFdWMnN4VlZZelVrOVpla1pMVm14S2NsTnNhRmRTVkZaR1ZrVldWMkV4Um5OU2JGcHFUVEpTVTFwV2FHOVNNVlpYVm10a1ZsSXdjSGxXYkdoUFZsVXhSbGRyYkdGV00xSlRXWHBHVW1ReFNuSlRiRlpPWVd0YVNGWkZWbGRoTVVaelVteGFVRlo2YkZSV1ZFNXZZakZXVjFadVRsZFdiVkozVlRGb1QxTnRTbGRqU0dSYVlUSlNWMWxXVlRWalJrNXhVMjFHVjJWc1dubFhWM0JQVTIxU2RGSnVWbE5oYTFwb1ZqQldkazFXVWtWVWF6bHNWbTEzTVZReFpEQlpWbGw0WTBoT1drMXFWa3haYTFwM1VrVTFXVkp0Y0d4V1YzZzJWVEZqTVZReVVuUlZiR3hVWWxoQ2FGWXdWVEZTVm14eFUxUkdUbEp1UWxsVWJGSkRVMjFHZFZGdGJGUldla1pVV1d0YWQyUkhTa2xXYlVaV1RXMVNkVlp1Y0VkT1IxWlhZVVZvVDFZd05YSlZiVFZyWTBaU1NHRjZWbWhpVld3MlZUSXhORmRXUlhkaVNIQllVbGRvVEZkVVNrdGpNbFpGVVd4c1VrMUhkM2hXUlZKUFdWZEdTRlJ1UWxCWFNFSndWV3BLTkdOV1pITlhhazVvVmxob1NGcFZhSE5YVmtvMlZtMXdZVkpXYjNwWlZsWTBZMFU1V0dOR2NGZE5NbWcyVmpGamVGSXlSblJTV0hCVllsVTFTMWxyYUc5T1ZtUkdXWHBHWVZKWWFFVlZWekI0WVRGYU5sWnVSbUZTVjFKNldrY3hTMk5HYjNsYVIyaHBVbFpzTkZZeWVHOVRNRFZXWlVWU1VtSnVRbkJWYWtvMFkxWmtjMVJyU21wU1YzaEtXa1ZrVDJGdFNrbGhSRVpZVWxkb1RGZFVTa3RqTWxGNVlrZDBXRkpVVm5wVk1WWnZWREF4U0ZSdVVtbFNNMEp5VlcwMWEyTkdValpTYWxKc1ZtMW9TVlJzWkU5aGJVcEpZVVJHV0dKVVZsaGFSbHB5Wld4V2RWRnRiRTVoYkVwMVZsUkdhMVV5U2toVGJsWldZbXRLY2xVd1pEQmtiRTVXWVVad1lVMUlVbFZWVjNCclYxWk9SbU5IY0ZwaVdHY3dWRlZrVDJSR1duRlJiWFJZVWxoQmVGVXhWbTlYYXpSNFlVVnNWR0pWTlhCWmJYQkhZV3hyZVdWRVVtdFdia0l4Vm0wMVYxZHJNSGhUYm1SYVlXdHJkMWRxUm1GVFIwWkpZa2RzVGsxc1NucFhWRXB6WW14dmVHTkdiR0ZOYlZKTlZsUkNTazB4WkVaaFJYUmFUV3R3ZWxwVlVrTmhNVWw1WVVSV1dtRnJOWEZYYWtaM1YxWndObHBHYkZSU1dFSnhWMWN3TUdWR2EzbFViazVzVTBaYVdsVXdWbmRoYkd4MFRWZEdUbFl3Y0RCV1IzQkRZVVphTm1KRVJsUldWMUpJV1ZSS1NtVnNSbkZSYkdScFZsWndObGRyV210V2JVbDNZa1ZzV0dKWGFIQlZNRnBoWXpGU1JsUnJUbXhXYmtKYVZrYzFZV0ZXVGtkalNFNVZVbFUxUkZwV1duZFhSMDVJWlVad1RrMVZXblZWZWtaUFVUQTBlR0ZGYkZSaVZUVndXV3RvYm1ReGNFaE5WV1JzVmxkNFNWUldaRFJoTVVsNVlVUktXR0V4U1hkWFZFcFBZekpXU1Zac2JGUlNXRUp4VjFjeE5FNUZNVWhWYTJ4VVlXeGFTMVV3YUZOaGJHdDVaVVJTYTFadGFFcFZNakZQWVZkS1NWb3paRmhTVjJoVFdrZDBORTVXUm5KVmJXaFRUVlp3ZUZkV2FITlJNa3BZVTFod1ZGWXlVbkZWTUZaM1RXeHNjMXBJVG14aVNFSlZWVmN4YjJGck1IZFRiazVZVmtVMVUxZHFSbmRrUjBwSllrZHdUazFWV25WWGExWnFUa1p2ZVZScmJGUmlhMHB5V1d4a05HVnNaSE5hUjNScFVsZDRTbFpIY0ZkaFYwcFdUbGhhV2sxcVFURmFSbVJLWld4YWRXTkZjRk5OU0VKNlYxWldhMUl3TVhSU2JHaFFWMGQ0V2xVd1ZuZGhiR3gwWlVSU1RsSnRhRXBXVnpWRFdWZEdWbEp1V2xSV1YyaG9XVlZrUzFOV1duUmxSWEJTVFZkNE1GVXhWbXRrTVZaMFZXeG9WMkp0ZUhOV1dIQlhaREZzTmxGdFJrNVdNSEF3Vmtkd1EyRkdXalppUkVaVVRVVTFRMWxxUW5OVFJURllaVWQwVTAxdFozbFdNblJQVVdzNVZtSkZiRmhpVjJod1ZUQmFZV014VWtoT1ZVNXNWakJzTlZSV2FFTmhhekZ6Vm0wMVZFMVZOVU5aTUZaelVrZEZlVnBIZUU1WFIyY3hWakJXYWsxV2EzbFZhMlJzVWtWS1dsVXdXa3ROUm1SellVWk9hVTFyYkRWV1ZtaFhWMnN4Y2xkdWNGcGhNRFYxVjJwS1UyUkdTblZVYlhSWFRWWmFkVlY2Ums1TlYwVjVVMWhzVDFZemFFMVZWRUpMVGxaa2MyRkZPV3RpVlhCS1ZqSXhORk5zUlhsa1JFWllZbFJHU0Zrd1pFdFNSbTk1V2tkd2FWWnNjRFJXTW5oclZEQXhSbUpGVW1obGJWSmFWVEJXZDJGc2JIUmxSRkpzVm0xb1NWUnNaRTloTVVwMVdqTmtWVk5IY3pCWGFrWlNaV3hXZEU5WFJsaFNWM2gxVjJ0V2EySXlTa2hUYmxKVFlsZDRjRlZxUm1GT2JHUkdZVVYwV2sxcmNIcGFWVkpEVjFaT1IxTlVWbFJXVjFKWVdYcEtUbVZXV2xoYVIyaFhUVmQ0ZFZWNlFrOVJNREZ6WWtab2JGSkZXbWhXVkVKSFpFWk9kR0pGVG1wV2JGcGFWbTB4TkdGdFNuUmtSRVphVm0xb1VGVnFTbE5YUlRWWVkwZDBVMDF1WjNsWFZ6RnpZbXh2ZDJSRlVsSmliRXBvVmpCYVMyUnNiSEZUYkVwaFRWVktWVlZYY0V0WGJGbDZXak5vV0dKRk1IaFVWV1JIVTBaYWRWWnJjRkpOYmxKMVZYcEdUMUZ0VGtaaVJXeHJVakExY1ZscmFHOU5WbVJHWVVaT1drMXNTa2hhVlZKRFlWWlplRmRZWkZwV1YwMHhXVlJDTkdSR1VuUmhSMnhUVFRKU01sVXhWbTlaVjBaSVUydHNWMkpZYUU1VlZFSkxUbFprYzJGRk9XdGlWWEJLVmpJeE5GUldSWGRUYWxaWVlrZFNNMWxyV25KbGJGWllXa1Y0VjFOR1NuRlhWRW8wVGtkU1YyRkZiRlJpVlRWd1dXdG9ibVF4WkVaaFJrcHJZVE5uTVZWWGVFTmhNVWw1WVVoT1drMXRlRVJhUm1SS1pWVTFTVlZ0ZEZOTmJXaDZWMWN3ZUZJeVJsaFRhMmhYWW01Q1dsVXdWbmRoYkd4MFpVUlNUbEp0YUVwV1YzQnpVMnhKZUZkdWNGcGxhM0JYVjJwS1ZtVkhWa2xpUm14VFpXeGFjVmRVU2pST1IxSlhZVVZzVm1KVk5YSlZiVFZ1WkRGU1NXRjZVbUZOVmxZMlZtMDFhMkZzU2paaVJGWmhVbFpLTWxkcVJrZFhSVFZZWkVkd2FWWkhlRE5XTW5SUFVXc3hSbVZJUmxKV01sSndWRmR3VjJWc2NGZFhhbEpzVm0xb1NWUnNaRTloTVVwMVdqTmtXRkpYYUZOYVIzUTBUbFpHYzFWdGRGUlNXRUl6VmpGU1QxVnNiM2xUYkdoUVZqTlNhRlpVUWt0a1JuQkhXWHBHYUdKV1NrbFphMmhoWVZkS2NrMVhOVnBXYlUxNFZGY3hTbVZYVWtobFIwWlNUVVZzTmxkV1dtOVZNa2w1VTFod1YyRnJTa3RWV0hCWFkxWmtWMXBFVW1wTlNHY3hWR3hrYjJGc1RrWlRibkJoVm1zMVJGbHRlSGRYVmxaWVdrZEdUbUp0WjNsV01XTjRVakpOZDJWR2FGQldNbmh2V1d4YVlXTldjRVpVYTA1b1lsVnNOVlJzVWtOWlZtUklXak5rV0ZKWGFFeFhWRXBMWXpKV1JWRnNiRlJTYTNCeFYydFdiMU15U2toVVdHeFFWMFUxY2xsc1dsZE5WbVJWVTJ0a2FrMXJjRVZYYWtwcllURmFObFp1U2xoaVIxSm9XVEJrUzJSR1duUmtSVEZTVFVWc05WWXhXbXRPUlRGWFkwWlNVbGRGU2xGVVZtaHZUbFprUmxsNlJscE5iRXBJV2xWU1EySldXblZoUkZaWVVsZE5lRmRVU2s5ak1sWkpWbXhzVkZKcldYbFdSV2h6VVRGSmVWTlljRlJXTWxKWFZUQldkMDFzYkhOYVNFNXNZa2hDV2xaR2FHRlZiRlY2Vkc1d1ZGWlhVbEJhUnpGTFpGWmtkR1ZIY0dsaVJWcDFWako0YjJJeVJuTmpSbXhTWVd0S2IxWnVjSE5OVm10NllrVk9hbEl3Y0RGV1Z6VmhVMnhPUm1OSVRscFdla1pZV1ZjeFUxTkhTa2xYYld4cFlYcFdjVmRVU2pST1IxSlhZVVZzVmxkR2NFNWFWbFpMVmxac1YxbDZSbWhpU0VKVlZWYzFSMVpzWkVkWGJrNWFUV3BXZVZwR1pGSmxWMFpJWlVkc2FGWlZjSGxYVjNCTFZqSldkRk51UW1GU1JVcExWVEJhWVUxV2NFVlVhM1JvVWpBMVJWVlhjRU5oUmtsNFYycEdXRlp0VWt4WmVrWjNWMVpTV1ZScmNGUlNNVXA2VlRGV2ExUXlSa2hUYmtKU1ltNUNiMVJYTVRSTk1VNVdZVVpPYVUxWVFsVlZWekUwWWtaT1IxTnFWbGhXYXpWRVdWY3hSMU5HV25SalIyaE9UVVJHZFZZeFdtOVJNbEY0WTBab1UySnRlRzlXYm5CWFpGWk9WbHBJVG10V2JXaEtWVEl4VDJGWFNrbGFNMlJWVTBkek1GZHFSa3RUUmxwMFRWZEdXRkpZUVRGV01uaHJWVzFHZEZWcmFHaFNNMmh3V1ZaV1NtUXhiSFZpUlU1b1lsVnNOVlJzWkRCaFJtUkhVMjVrV21GcmEzaFpWV1JMVTBkV1JWWnJjRlJTVkZJMFYxUkNiMUV5VmxkalJteFZZbTVDUzFVd1ZuZGpNV3hZVFZaa2FHSldTa2xaYTJoaFlWZEdWVlp0Y0ZwTmJtY3dXa1phYjFOV1ZuRmlSWEJUVFVSV2RsZHJWbXRVTWtsM1lrVlNZVTF0VW5KWmJGWmhaV3h3UjFwR1dtRk5TRkpWVlZkd2ExZFdUa1pqUjNCYVlsaG5NRnBXV205VFJUVllWRzEwVTJKdFpETldSV2h5VGtadmVGWlljRmRpYlZKeFZXNXdjMDVXY0VaVmJscGhUVlZhV1ZSc1pEQmhiVXBWWWtoa1dHRXdOVU5VVlZZMFkxWkdXRnBIYkU1aGJGbzJWMnhhWVU1SFZsZGhSV2hQVmpBMWNsVnROVzVrTVZKSllYcFNZVTFXVmpaV1Z6VnpZVVpaZDA1SVpGUldWMDQwV2tkNGQxTkdXbGhhUjBacFlrWnZlRll4VWs5Vk1rNUlVMWhzVDFkSVFrdFZha28wVFZad1NFMUVWbXBpU0VKWlZsWmthMkV3TVhSa00yUmFWbGROTVZSV1pGTlNSa1paVm14d1RtRXhjRFpYVjNST1RrZFNWMkpHYkZKaWJWSndWVEJrTUdKc1pIRlRiR1JPVWxkNFNWZHJhRTloVlRGeVkwYzVXbUV3TVRSYVIzaHpaRWRPU0dWR2NFNU5WVnAxVmpGU1NrNVhVbGhWYTJoWFlXeEtjbFZ0Tlc5T1ZtUkdXWHBHV2sxc1NraGFWVkpEWVcxS1YxZHVhRmhpUjFKUVZGVldOR1JHVW5SaFIyeFRUVEpTTWxVeFZtOVdNbEpYWTBWb1YySlVSbTlXYm5CWFl6RmtjbFJxVG1GTmJFb3dWVzAxVDJFeFdYaFdiVFZVVFZaSmQxZFVTazlqTWxaSlZteHNWRkpyYXpGV01GWnZVekZyZVZOdVZrNVdNRFZ4V1d0b2IwMVdaRVpoUlhSYVRXdHdNRmt3V2t0aE1WbDRWMnBXWVZack1IaFphMlJYVTFaV2RHVkhiR2xXYTFveVZURldiMDFHYTNsVWJrNXNVMFphV2xVd1ZuZGhiR3gwWlVSU1RsSnJjRWxXYlRCNFdWWmtSbU5FVmxoaVIxSlRWRzEwYzFOR1pIRlNiV3hwVmxSU00xZFdXbXBPVjFKV1pFVlNVbUpVUm5KV2JuQlhZMVpPVmxSdVNtRk5iRlkwV2xWb2MxZFdTalpXYlhCaFVsWnZNRlJWWkZOa1JrcDFZa1Z3VkZKcmJEUlhWRUpyVGtkS1NGUnFWbEpXUjNoTFZXMDFVMkZzYTNsbFJGSnJWbTFvU2xVeU1VOWhWMHBKV2pOa1dGSlhhRlJYVkVwVFVqSldSVkZyTVd4V1IyaDFWakZhYTFRd01VaFNiR2hRVjBaYVRsVlVRa3RpTVdSeVdrWktZVTFyY0VsWmEyaDNZVEZKZUZkcVJsaGlSMmhMV1hwQ2MxTkdVblJoUjJ4VFRUSm9kMVl4V210VU1rNTBWR3BXYkZJd05YRlphMmh2VFZaa1JtRkdUbHBOYkVwSVdsVlNRMWRXVGtkU2FrcFZVMGQ0UTFwR1ZqUmpSVFZJV2tVeGFXSkZjREpXTW5ocVRVWnZlVkpyYUZOaWJGcG9WV3BPYjJNeGEzbE9WVFZxVFVkNFNWVnROWE5aVlRCNFYycENXR0pIVFhoVVZWWnpVMGRLU1ZadFJsTk5WbXQzVmtWV1QxRXhiSE5qU0ZKcFUwWmFZVlpxVG10aWJHdzJWR3hPYUZJeFNrbFdiVEZUVjFaT1JtTkhjRnBpV0djd1ZGVmFiMU5XVm5SVWJYUlRZbTFrTTFacVRuTlJNV3QzWWtoU1QxZEdjSEpWYWtvMFpFWndWMWRxVG1oV1dHaEZWVmN4VDFOdFNuSlRhbFphWVd0d2NscFdXbmRYVmxKMVkwWnNVazFIZURaVk1WWnJaREZXZEZWc2FGZGliWGh6Vmxod1YxSldaRmRhUkZKcVRWZDRNRlZ0TVhkaFJUQjNUVmhhVkZaV2IzcFpWbVJMVjBaYWRWVnRiRTVOUnpoNFZqQldUMU5zYjNka1JsSnNVakExY1ZscmFHOU5WbVJHWVVaT1drMXNTa2hhVlZKRFYxWk9SMU50Y0dGU1YxSXpWbGN4VTFkR1duVmlSM2hXWld4YVJsWXhXbXRPUjAxNFlraFNVMkpZUW05VVZFRjRaR3hPVmxkcVRtaFdNSEJaVm0wMVUyRlZNSGRpZWtaWVVsVTFTMWRxUWpCV1IxRjVXa1UxYUZaVmNISldSVlpoVGtkV1YyRkZhRTlXTURWeVZXMDFibVF4WkVaaFJrNWFUV3hLU0ZsNlNtdFhWa1YzWTBSV1dHSkhhRkJhUnpGTFUxWmtkR1ZHYkZKTlIzZzJWVEZXWVUweVJsZGpSV2hRVjBaYWFGWnROV3RqUmxKR1ZHdE9hbFpzV2xwV2JURTBZVzFLZEdSRVJsWldSWEJJV1hwS1MxTkdUblJoUm5CT1lteEpNbFY2UWs5Uk1XdDNZa2hTVUZkR1dtRlVWM2hYWW14c2MxcEdaR3RTTUd3MlZUSndWMWRXUlhkaVJ6VlVUVlUwTUZkVVNrOWpNbFpKVm14c1ZGSnJjSEZYYTFaaFRrVXhSMkZGYkZaaVZUVnlWV3BPUTFVeGNFZGFSbVJzVmpGYVZWUnNWbE5YYkZsNllVaHdXRlo2UmtoWlZ6RkdaV3hTV0U5VmNGTmliVkozVjFkd1NrMVhSbk5qUmxKU1lteEthRlp1Y0VkTmJHdDVUbGhPV2sxSGVIZFZWbWhEVkZaRmQxSnFUbFZTVlRWRVYxUkNjMlJXVG5SbFIzQk9ZVzE0TmxkclkzaFdNa1Y0WVVWU1ZGWXlVbHBXVkU1dllXeHJlV1ZFVW10V2JXaEtWbGN4VDJFeFNuVmFNMlJZVWxkb1ZGZFhkSE5TTWxGNVlrZHdhVlpzY0RSV01uaHJWREF4UjJGRlVsUlhSVFZMVlcwMWEyTkdaSFJOVldScVVqQndTRnBFU25OVVZrVjNVMjVvVjFadGFGaFphMlJQWkZkRmVsWnNTazVoTVhBMlYxZDBhMU15UmtkaE0yeHJVMGhDVFZWVVFrdGhiRTVZVFVSV2ExWnRkRFZXYkdScllWWlplRmRxUWxwaGF6Vk1WR3hhYjFKR1RsaGFSWGhXVFRKb2NWZFVTalJPUjFKWFlVVnNWbUpWTlhKVmJUVnVaREZrUm1GR1RscE5iRXBKV1RCYVMyRXhXWGhYYWxaaFZtc3dlRlZyV25OWFIxWkpWR3h3YVZaV2NIaFhWbEpQVkcxSmQySkZaR3ROYlhod1ZGZHdWMk5XWkhOVWEwNXJVbTVDV1ZSV2FHRmhiVXAwWlVkd1ZGWXllRU5aTUZZMFVrWkdXV0ZGTVZKTlJYQnhWVEZqTVZNeVNraFNibEpYWWxoQ2NsVnFSbUZqYkdSR1ZHdHdZVTFYYUZoYVZXaHpWMVpLTmxadGNHRlNWbTh3VkZWYWIxTldWblJWYXpGVFltMW5NVll3Vm1wTlZtdDVWV3RrYkZKRlNscFZNRnBMVG14d1JscEZaRTVTYmtKVlZWWlNjMU5zU25WYVNFSmFUVWRTV0ZwR1duZFRSMHBKVm0xR1RsZEhVbmRXUlZaaFRrZFdWMkZGYUU5V01EVnlWVzAxYm1ReFpFWmhSazVyVFdzMU1GUXhhRk5oUm1SR1RsaE9WRlpXUmpOWGFrcFdaVWRXU1dKR2JGTmxiRnB4VjJ0V1lVNUZNVWRoUld4V1lsVTFjbFV3VlRCa01XUlhZVVpPYVZKVWJIZFZWekI0WVRGYU5sWnVSbUZTVjFKNldrY3hTMk5HYjNwUmEzQlVVMFpLY1ZkVVNqUk9SMUpYWVVWc1ZtSlZOWEpWYlRWdVpERmtSbUZHVGxwTmJFcEtWVEl4TkdFeFRrZFhhbFphWWxkNFJGcFhNVk5UUmtweFVXMUdWMU5HU25GWFZFbzBUa2RTVjJGRmJGWmlWVFZ5VlcwMWJtUXhaRVpoUms1UVZsaG9TRnBWYUhOWFZrbzJWbTF3WVZKV2J6QlVWVnB2VTFaV2RGUnRkRk5OUm5BMlYydFNTMUl3TlZoVWFscHBUVzFTYUZsdGVHRk5WbVJWVkd4T2FsSXdiRFZVYTJNMVZFWlZkMU5VVGxoU1YyaE1WMVJLUzJNeVZrVlJiR3hVVW10d2NWZHJWbUZPUlRGSFlVVnNWbUpZVW1oV2FrWjNZekZyZVU1VmRHbFNia0pGVkd4a01HRlZNWEZXYms1VVRVVTFSRmxWWkU5a1JuQkZVbTFzVjAxV2IzaFhhMVp2Vkd4dmQyUkdVazlXZWtaaFZtcEtOR1ZzVFhkVWEwNW9VakExTUZkclVrZGhWbGw0VjJwR1lWSlhhRTlYYWtJd1ZsZFNTRlJ0Y0dsVFIyZDRWakJXYjFVeGEzbFZhMlJzVWtWS1dsVXdXa3RoYkhCR1lVVjBhVkl4U2twV2JUVnpZVmRHVmxOWVpGcFdWMUo2V2xkek5HVkhWa2xpUm14VFpXeGFjVmRyVm1GT1JURkhZVVZzVm1KVk5YSlZNRkpEWld4a1JtRkZkRnBOYTNCNldsVlNRMWRXVGtkVGJYQmhVbFp2TUZSVldtOVNSazUwWTBad1dGSnJjSGhYVmxaaFRUSkdWazlZUWxKaVZFWnlWbTV3VjJOV2NFWmFTRTVyWWxWd2QxZHFTbXRaVjBwVlZXMDFWRTFWTlVSVWFrWnZVMVpPZEZSdGJHbFRSMlF6VmpCV2IxVXhhM2xWYTJSc1VrVktXbFV3V2t0T1ZtUnpZVVpPVGxZd05UQlVhMlJyWVd4T1JtTkVTbHBpUjFKNldsZDRkMVpGTlZWUmJXaFRUVlp2ZUZWNlFrOVJNbEpZVld4b2JGTkZOVTVWVkVKTFpFWnNkR0pGU21wU1ZHZzBXbFZvYzFkV1NqWldiWEJoVWxadk1GUlZXbTlUVmxaMFZHMTBWRkpGU2paV01GWnZVekZyZVZOdVRteFRSM2hhVlc1d1YyRnNjRVpYYWxKT1VtMW9TbFpYTVU5aE1VWTJZVVJLVkZaV1dYZFphMXAzVjFaR1dGcEhjRk5OYm1kNlZqSjRUMUV5U2xoVFdIQlVWakpTWVZsc1ZtRmpWbXhaWVROb2FHSlZiRFZVVm1oclYyeGtSMU50Y0ZwTmJtY3dXa1phYjFOV1ZuUlViWFJUWW0xa00xWXdWbTlWTWxGNVVteHNVbUpZYUZGWlZsWkxaRVp3UjFsNlJtaGlWa3BKV1d0b1lXRlhSbGhhUnpWVlUwZDRNbGRxUm5ka1JUVldWbTFzVG1Gc1ducFdSVlpQVVRKS1dGTnVTbGhpVjJodlZtcE9hMlZzVGxaYVIwWnJWbXhhU2xVeU5XRlpWVEIzWTBoT1dtVnJOVTlYYWtJd1kwVTVTRnBGZUZaTlJXdDZWakJXYjFNeGEzbFRiazVzVWtWS1dsVXdXa3RoYkhCR1YycFNUbEp0YUVwV1YzQkxWMnhrUm1KSE5WaGlWRUY0V2xkMGMxSlZNVWhhUm5CWVVsaENNVmRyV21wbFIwcElVMjVXVm1KdVFsRlVWbWh2VGxaa1JsbDZSbHBOYXpWNldsVm9WMWRXVGtkVGJYQmhVbFp2TUZSVldtOVRWbFowVkcxMFZGSllRbnBYYTFadlZqSldXRk51UWxKaWExcFhWakJhWVdNeGEzbE9XRXByVm10d1NWWnRNSGhaVm1SR1kwUldXR0pIVWxOWmFrSnpVMFprY1ZKdGJHbFdWRkl6VjFaYWFrNVhVbFprUlZKU1lteGFhRll3WkZOU2JHUnpXa2RHYVZJd05YZFZWbWhEVTJ4T1NWVnRjRnBOYm1jd1drWmFiMU5XVm5SVWJYUlRZbTFrTTFZd1ZtOVZNV3Q1Vld0a2JGSkZTbTlaYTFaYVpVWmtjMkZGZEU5V1dHZ3dWbTB4YjFkck1YUmFTRnBVVmxkb1ZGUldaRTlUUjFaSVpVZHdiRmRIVW5WV01qQXhWakpTVjJFemNGWmlhMHB3VkZkd1UyUnNUbFphU0VwcVRVZDRTbFpYY0VkaGJFbDZZVWhPVkZaVk5YbFhha3BXWlVkV1NXSkdiRk5sYkZweFYxUktORTVIVWxkaFJXeFdZbFUxY2xWdE5XNWtNV1JHWVVaT1drMXNTa2hhVlZKRFYxWk9SMUpxU2xWVFIzaEVWa2Q0YzFkV1JsaGFSM1JVVW14dmVsZFhkR3RXTWxaeVlrVlNhRk5IVW5GWmJGSnpaRlpyZVUxV1pHeGlWVFF4V2tSS2ExbFdTalppUkVaWVlrVTBlbGRxUm5ka1JrcDFVVzFzVWsxdVVuVlhhMVpxVGtadmVHSkdiRlJpVkZaeVZtNXdSMk14YkhST1ZrNXNZVEo0UlZsVlpEQmhWVEZ4Vm01T1ZWSlZOVVJaYkZwelYwZEtTVlJyTVZKTlJXOTZWMVJKZDA1WFNuUlVibEpYWW01Q2NWcFdaRFJoYkd0NVpVUlNhMVp0YUVwV1Z6RlBZVEZLZFZvelpGaFNWMmhVVjFSS1UxSXlWa1ZSYkd4VVVtdHNOVll4V205VGJHOTRZMGhTVDFJeVVsSldWRUpMWlVaYVYyRkdaR2xTTURVeFdWUk9WMkZHWkVaT1ZXaGhVbTFOZUZsWE1WTlRSMHBKVjIxc2FGWXlVblZXTWpCM1RWZFdjMXBFVmxKaGEwcHlWakJXUzJWc1pITlhibkJoVFVSV1JWVlhNVk5UYkVweFVXMDFWRTFWTlVOWmJGWjNZMFpHZEUxWGJHbGhlbFp3VlRGV2IxVXdNVmhVYTJoc1VqTm9XVnBXVmtaa01VNVdWMWhrWVUxWGFGWmFSV1JQWVcxS1NXRkVSbGhTVjJoTVYxUktTMk15VmtWUmJHeFVVbXR3Y1ZkclZtRk9SVEZIWVVWc1ZtSlZOWEpWYlRWdVpERlNTV0Y2VW1GTldFSkpWbTB3ZUZsV1pFWmpSRlpZWWtkU1UxcEdaRTlUVms1MVYyMUdUazFJUW5wWFdIQlBWRzFKZUdOSVZsZGliRnBoVkZSR1MyUXhiSEZUVkVKcFRVaFNWVlZYY0d0VGJFbDNZMGhrV21KVVJsTlhha3BUVTBVNVNGcEhiR2xXYkd3MlZsZDBhMVl5U2xkalJteFVWakpTY0ZSVVFuTmliR3gwVFZaa1RrMVZjRWxXYlRCNFdWWmtSbUpFUmxwaVZFRXhWRlZrUjFkR1pIRldhM0JVVWtWS00xWXdWbTlUTVd0NVUyNU9iRkpGU2xwVk1GcExZV3h3UmxkcVVrNVNiV2hLVmxjeFQyRXhTblZhTTJSVlUwZHpNRmRxUm5kVFJscDBUVmRHV0ZKWVFURldNbmhyVlcxU1YyTkZhRkJYUmxwb1ZsUktiMlJHY0VkWmVrWm9ZbFpLU1ZscmFHRmhWMFpZV2toa1ZGWlhhRFpYYWtaelpFZEtTVlp0UmxKTlJXd3pWMWMxYzFFeVVsZGpSbXhoVWxaYWFGWnFSbmRqTVd0NVlrVk9hMkpWTlhkVlZ6VlhXVlprU0ZWcldsaGlSMUpvV1d0a1QyTkZOVmxpUjBaWVVsUlZlVmRYZEc5WlYwcEdZa1ZzVGxORlNscFZNRlozWVd4c2RHVkVVazVTYldoS1ZsY3hUMkV4U25WYU0yUllVbGRvVkZkVVNsTlNNbFpGVVdzeGJGWkhhSFZXTW5SclZqSktWMk5HYkZSaWJYaG9WbXBHUjAxV1pIUk5WV1JxVWpCd1JWbFZZM2hoTVZvMlZtNUdZVkpYVW5wYVJ6RkxZMFp2ZWxGcmNGUlRSVFYxVmpGamVHTXlVbGRqUlZKU1lXdEtjRnBXVmt0TlZtUnpZVWQwVTFadVFsbFdNakUwWVcxR1ZsTnFTbHBOYlhoRVdrWmFkMWRXY0VaV2JVWlhUVmhDZWxkVVNuSk5WMVpYWTBab2FsSXphR0ZVVkVaSFlteHdjMVJ1VGxwTmF6VjZXbFZvVjFkV1RrZFRiWEJoVWxadk1GUlZXbTlUVmxaMFZHMTBVMkp0WkROV01GWnZWVEpGZUdOR2FGaGlXR2h4V1cxMGQyTXhaSEpYYm5CaFRXeEtTbFp0Tld0aFZrbDRWMjFzVkZaV1NrZFhha1p2VmtaR2RGVnJlRkpOUlhBd1YydGFhazFYUm5SVmEyaHBVMFp3Y0ZsV1pHdGtNVTVXWVVSQ1drMXJOWHBhVldoWFYxWk9SMU50Y0dGU1ZtOHdWRlZhYjFOV1ZuUlViWFJUWW0xa00xWXdWbTlWTVd0NVZXdHNXR0pYYUhGWlZsWkxUbFprYzJGR1RrNVdNRFV3Vkd4a05GbFdSWGRTVkZaVVZsZFNhRnBHVm5OU1JtUllUVlZ3VTAxWVFYaFdSV040VWpKUmVWUnJhR3hTUmxwTlZWUkNTbVF4YkZaYVNFNXNZVE5vUlZWWE1XOWhiVXBZVlZob1dtSkhVbGhhUm1SVFUxWlNXRnBGZUZkVFJrcHhWMVJLTkU1SFVsZGhSV3hXWWxVMWNsVnROVzVrTVdSR1lVWk9XazFzU2toYVZWSkRWMVpPUjFOdGNHRlNWMUo2V1d4V2MxSkdiM2xhUjNCcFZteHNNMWRyV205VE1sSlhZMFpvVmxZeVVreFpWbHB6WW14c1dHVkZaRTVXYmtKYVZUSndWMVJYU2xobFJGcFdZbFJXV0ZwR1duSmxiRloxVVcxc1RtRnNTakpWTVZadlV6SktTRlZyYkZkaWJYaHdXV3hhWVdOc1VraE9WVTVzVmpCc05WUldhRU5oYXpGelZtMDFWRTFWTlVOWk1GWnpVMWRTU0ZSdGNHbFRSMmQ0VmpCV2IxVXhhM2xWYTJSc1VrVktXbFV3V2t0aGJIQkdWMnBTVGxKdGFFcFdWekZQWVRGS2RWb3paRnBOYWtaWVZGVmtVMWRXVG5WV2JVWlhUVlZaZUZkVVFtOVRNbEowVTJ4b2FWTklRbWhXVkVwclpERmtSbUZGZEZwTmEzQjZXbFZTUTFkV1RrZFRiWEJoVWxadk1GUlZXbTlUVmxaMFZHMTBVMkp0WkROV01GWnZWVEZyZVZWclpHeFNSVXBPV1cxMFMwNVdiSEZUYlhSc1ZtNUNXbFpITlhkVVJrVjNVMnBHV0dKSGFISlZiRnAzVjBaa2RHVkhjR2hXUmxsNFYxZHdUMVV5VGtkalNGWm9UVzFTVFZadE5XOU9WbVJHV1hwR1drMXNTa2hhVlZKRFYxWk9SMU50Y0dGU1ZtOHdWRlZhYjFOV1ZuUlViWFJUWW0xa00xWXdWbTlWTVd0NVZXdFNUMVl6VW5CVVYzQlhZekZOZDFSclRtdFdia0phVjJ0V1YxbFdXWGhqU0U1YVRXMXplRnBXV25kWFZsSjFWMjFzVkZKdVFucFZNVlpQWXpGcmVWUnVUbXhUUmxwYVZUQmFTMkZzY0VaWGFsSk9VbTFvU2xaWE1VOWhNVXAxV2pOa1dGSlhhRlJYVkVwVFVqSldSVkZzYkZSU2ExbDRWakl3ZUZJeVRraFRhMUpoVFcxU2NGbHNXbHBsYkZaeVdrWmthVlp1UWxwVk1XaFhZVzFLVjFkdWFGaGlSMUpRVkZWV2MxSkhSalphUm14VVVsaENjVmRYTVRST1JURkhZVVZzVm1KVk5YSlZiVFZ1WkRGa1JtRkdUbHBOYkVwSVdsVlNRMWRXVGtkVFZGWlVWbGRTV0ZsNlNrNWxWbHBZV2tkNFRsZEhaekZXTUZacVRWWnJlVlZyWkd4U1JVcGFWVEJhUzJGc2NFWlhhbEpPVW0xb1NsWlhNVTloTVVwMVdqTmtXRkpYYUZSYVJscDNWMVp3UmxadFJsZE5XRUo2VjFSS05HVnNiM2xWYTJ4WFltMVNjRlZxUm1GaFZrNVdWV3RLWVUxWGFGVlZWbWhMVTJ4S2RWcElRbGRoYTNCNlZGVmtSMUl5VVhsaVJYQlRZV3RLTWxZd1ZtOVRNV3Q1VTI1T2JGSkZTbHBWTUZwTFlXeHdSbGRxVWs1U2JXaEtWbGN4VDJFeFNuVmFNMlJZVWxkb1ZGZFVTbE5TTWxaRlVXMTBVMDF0YUROWFZFNXpUa1pyZVZSdVRteFRSbHBhVlRCYVMyRnNjRVpYYWxKT1VtMW9TbFpYTVU5aE1VcDFXak5rV0ZKWGFGUlhWRXBUVWpKV1JWRnNiRlJTYTNBd1YxY3hjMUZyZDNkaVJXUnFUVzFTY1Zsc1dscGtNWEJIWVVWMGExWnVRbGxXVm1SclYxWlZkMUpVU2xSV1YxSklXbFphZG1Wc1duVlZiVVpYWld4V00xZFljRWRPUjFaWFlVVm9UMVl3TlhKVmJUVnVaREZrUm1GR1RscE5iRXBJV2xWU1ExZFdUa2RUYlhCaFVsWnZNRlJWV205VFZsWlpVV3hDVGxkSFp6RldNRlpxVFZacmVWVnJaR3hTUlVwYVZUQmFTMkZzY0VaWGFsSk9VbTFvU2xaWE1VOWhNVXAxV2pOa1lXSkdiekJhVmxwdlUwVTFXRlJ0ZEZOaWJXUXpWakJXYjFVeGEzbFZhMlJzVWtWS1dsVXdXa3RoYkhCR1dqTmtZVTFJVWxaYVJXUlBZVzFLU1dGRVJsaFNWMmhVVjFSS1UxSXlWa1ZSYkd4VVVtdHdjVmRyVm1GT1JURklWMnhTVWxkRlNsRlVWbWh2VGxaa1JsbDZSbHBOYkVwSVdsVlNRMWRXVGtkVGJYQmhVbFp2TUZSVldtOVRWbFowVFZkc2FXRjZSblZXVlZwUFVUSlNXRlZzYUd4VFJUVlJWRlpvYjA1V1pFWlpla1phVFd4S1NGcFZVa05YVms1SFUyMXdZVkpXYnpCVVZXUmhWa1pHV1ZGck1XbGhNRzh4VjFkd1NtVkhUa2hVV0d4WFZucHNUVlpyYUZOaGJHdDVaVVJTYTFadGFFcFdWekZQWVRGS2RWb3paRmhTVjJoVVZERldORkl5VmtsaVJteFRaV3hhY1ZkclZtRk9SVEZIWVVWc1ZtSlZOWEpWTUZwTFpHeGtjMWw2UWs5aE1uaEpWakp3UjJGWFNsWk9TR1JhVm0xTk1WcEdWakJTUmtaMVYyMXNhRTFYT1RSWFYzUnJXVmRPU0ZOcmFHeFNNMmhvVlZST2EySnNiSEZUVkVaV1RWaENXVmt3WkRSWGF6QjRVMjVPV0dFd05IcFhha3BLWlZVMVYxSnRjR2xXUjNneFYxUkplRll5Vm5SVWFsWlNWMFZLUzFVd2FGTmhiR3Q1WlVSU2ExWnRhRXBXVnpGUFlURktkVm96WkZoU1YyaFVWMVJLVTFOV1pIUmhSM0JvVmxWdmQxWXhXbTlpTVVwWFkwWnNVbUZyU205VlZFSkdUbFpPVmxWclNrOU5WMmhLVlRJeFQyRlhTa2xhTTJSWVVsZG9WRmRVU2xOU01sWkZVV3hzVkZKcmNEQlhhMXBxVFZkR2RGVnJhR2xUUm5Cd1dWWldTMDVXWkhOaFJUbHJZbFZ3U2xZeU1UUlVSa1YzVTI1S1dHSkhhRVJVVldSSFVrZFJlVnBIUmxOTlZuQXdWako0YjFNeVZsZGpSbWhXVjBVMVMxVnFTbTlpTVd4MFRWWk9hazFZUWxwVk1XaFBVMnhPUms1VVRsaGlSMUpRV1RCYWMxZEhVWGxhUlhoV1RVVnJlbFl3Vm05VE1XdDVVMjVPYkZKRlNscFZNRnBMWVd4d1JsZHFVazVTYldoS1ZsY3hUMkV4VGtaalNFNWhVbGRvV0ZwV1pFdGpSa1owVFZkMFYyVnNXbmhYYTFacll6SlNkRk51UW1GTk1FcExWVEJvVTJGc2EzbGxSRkpyVm0xb1NsWlhNVTloTVVwMVdqTmtXRkpYYUZSWFZFcFRVakpXUlZGc2JGUlNhMncxVmpGYWIxTnNiM2xWYTJob1VqSm9jbFZVUWtaT1ZrNVdZVVpPYVUxcldscFdSbWhQVjFaT1JtTkhjRnBpV0djd1ZGVmFiMU5XVm5SVWJYUlRZbTFrTTFZd1ZtOVZNV3Q1Vld0a2JGSkZTbHBWTUZwTFlqRnJlVTFYZEd4aE1uaEdWRlZrYTFkc1pFWmpTRlpoVW0xT05GbHJaRXRrVmxaMVkwVXhVMkp0WnpGV01GWnFUVlpyZVZWclpHeFNSVXBhVlRCYVMyRnNjRVpYYWxKT1VtMW9TbFpYTVU5aE1VcDFXak5rV21KSFVucFpiVEZIVTFaV2MxWnRhRlJTV0VGNVYydG9jMUZyT1ZaaVJXaFlZV3RhY0Zsc1ZUQmtNV3hYV1hwV2ExWllVa1ZaVkVwcllrVXhXV0ZFVmxoU1YwMTRWMVJLVTFJeVZrVlJiR3hVVW10d2NWZHJWbUZPUlRGSFlVVnNWbUpWTlhKVmJUVnVaREZrUm1GR1RrNWlSM2hhVlRGa2EyRnRTbGRYV0dSaFVtMW9URnBHV25kWFJsWlpWR3R3VkZKcmNESldNbmhxVFVVMGVHRkZiRlJpVlRWd1dXdG9iMDVXWkVaWmVrWmFUV3hLU0ZwVlVrTlhWazVIVTIxd1lWSldiekJVVlZwdlUxWldkRlJ0ZEZOaWJXUXpWakJXYjFWdFVuSmxSRlpTWWtaS2NsWXdWa3ROTVd4eFZHdDBUbEpVYkhkVlYzaEhZVzFLVldKRVFscFdiV2hRV1d0a1QwNVZPVlpUYTNoc1ZsVnZNbFl5ZUd0VU1ERklVbXhvVUZkR1drdFZhMVp6VFZaU1dXRjZRbXhoTTJoNFZrWm9WMVJyTVZsaFJGWllVbGROZUZkVVNsTlNNbFpGVVd4c1ZGSnJjSEZYYTFaaFRrVXhSMkZGYkZaaVZUVnlWVzAxYm1ReFpFWmhSa3ByWVRObk1WVlhNRFZoTVU1SFUycE9XazB6UWpKYVIzUXpaV3hHZFdKSGJFNWhhMW96VjFod1MxWXlWbk5pUm14U1ltczFjbFl3VlhoTlZtUlZVMVJXYTFKWVp6RldSelZyWVZVeGRHVkVSbUZTVlRFelZGWlZOVll5VmtsaVJteFRaV3hhY1ZkclZtRk9SVEZIWVVWc1ZtSlZOWEpWYlRWdVpERmtSbUZHVGxwTmJFcElXbFZTUTFkV1RrZFNha3BWVTBkNFJGVXllSFpsVlRWWlYyMXdhVlpzV25WV01uUnFUbFV4VjJKSVVteFNNMmhPVmpCV2QyTXhiRFpUVkZacVRXeEtXbFpYTlVOaFZURnhWVzAxV0ZadGFGUlVWVnAzVjBVeFdWcEhkRlJTVkZaeFYxUktORTVIVWxkaFJXeFdZbFUxY2xWdE5XNWtNV1JHWVVaT1drMXNTa2hhVlZKRFYxWk9SMU50Y0dGU1ZtOHdWRlZrUjFkR1pGaGFSWGhTVFVWd2VWWXllRzlSTURGSVVtdFNVbFpIYUV0VmJuQkhZakZ3Vmxac1RtbFNNRFZLVmxjd05WTnNSWGxrUnpWaFZrVlpNRnBXV205VFJUVllWRzEwVTJKdFpETldNRlp2VlRGcmVWVnJaR3hTUlVwYVZUQmFTMkZzY0VaWGFsSk9VbTFvU2xaWE1VOWhNVTVHWTBoT1lWSlhhRmhhVm1STFkxZFNTRlJ0Y0dsVFIyZDRWakJXYjFVeGEzbFZhMlJzVWtWS1dsVXdXa3RoYkhCR1YycFNUbEp0YUVwV1Z6RlBZVEZLZFZvelpHRmlSbTh3V2xaYWIxTkZOVmhVYlhCcFUwZG5lRll3Vm05Vk1XdDVWV3RrYkZKRlNscFZNRnBMWVd4d1JsZHFVazVTYldoS1ZsY3hUMkV4U25WYU0yUmFUV3BHV0ZSVlpGTlhWazUxVm0xR1YwMVZXblZXVlZwUFVUSkplR0pHYUU5V00xSndWV3BHWVU1V1VraE5WV1JyVFdzMVNWcFZVbGRVUmtWM1UxaGtXbFpYVWtoVVZWWTBVa1pHZEdGSGNHbFdNVWt5VlRGV1QyTnJOSGhoUld4VVlsVTFjRmxyYUc5T1ZtUkdXWHBHV2sxc1NraGFWVkpEVjFaT1IxTnRjR0ZTVm04d1ZGVmFiMU5XVm5SVWJYUlRZbTFrTTFZd1ZtOVZiVkp5WlVSV1VtSkdTbkpXTUZaTFRURnNjVlJyZEU1U1ZHeDNWVmQ0UjJGdFNsVmlSRUphVm0xb1VGbHJaRTlPVlRsV1UydDRiRlpWYnpKV01uaHJWREF4U0ZKc2FGQlhSbHBMVld0V2MwMVdVbGxoZWtKc1VtMW9TbFV5TVU5aFYwcEpXak5rV0ZKWGFGUlhWRXBUVWpKV1JWRnNiRlJTYTNCeFYydFdZVTVGTVVkaFJXeFdZbFUxY2xWWWNHOU5iRTVXV2tjNVRsSXhTa3BWVnpWM1ZVZEdWV0ZFU2xwTlIyaE1Xa2N4UzFkSFNrbGpSMFpZVWxSV2RsZFVRbXRPUlRGWVZHcFdUMVl6UW5CVVYzQkRUV3hPVlZSclRtdGlWVnBaVkd4U1ExUldXa2RTVkVKWVVsZG9URmRVU2t0ak1sWkZVV3hzVkZKcmNIRlhhMVpoVGtVeFIyRkZiRlppVlRWeVZXMDFibVF4WkVaaFJrNWFUV3hLU1ZsclkzaFRiRVY1V2tjMVdrMXFSbGhVVldSVFYxWk9kVlp0UmxkTlZWcDFWbFZhVW1Rd09WWmlSV2hXWWxob2FGbHNXbUZPVm10NVRWWmthRTFJYURGVlZ6VnpZVlV4Y1ZKdVpGcGxhM0JYV1dwQ01GWkdSbGxSYTNCVVUwWktjVmRVU2pST1IxSlhZVVZzVm1KVk5YSlZiVFZ1WkRGa1JtRkdUbHBOYkVwSVdsVlNRMWRXVGtkVGJYQmhVbFp2TUZSVldtOVRWbFp4VVcxb1ZGSllRWGxYYTJoelVUSlNWMk5HYkZwTmJWSllWVEJrTkUweFpITldiR1JzVmpBMU1GUXhhSE5VUmtWM1UyMXdWRll6YUZSWmFrWjNWMFUxV0dGR2NHbFhSMmg2VlRGV2IxUXlTa2hUYTJoWVYwWktjVmxzV21GT2JHeHhVMnBTVGxZeFNrbFphMmhoWVZkS1NWcElRbFJXVlRWNVZHcEdiMU5XVG5SVWJXeHBVMGRrTTFZd1ZtOVZNV3Q1Vld0a2JGSkZTbHBWTUZwTFlXeHdSbGRxVWs1U2JXaEtWbGN4VDJFeFRrVlNiWEJhVFc1bk1GcEdXbTlUVms1MFZHMXNhVk5IWkROV01GWnZWVEZyZVZWclpHeFNSVXBhVlRCYVMyRnNjRVpYYWxKT1VtMW9TbFpYTVU5aE1VWTJZVVJLVkZaV2NGQlVWbVJQVTFaR2RWZHRjR2xpUlZWNVZURldZVkV5VmxoVFdHeE9WMFZLY1ZSWGVHRk9iRkpGVVd0YWFtRXllRXBXUnpFMFYyc3dlRk51WkZwaGEydDRXbGQwYzFKV1RsbFdhelZzVmtaSk1sWkZaSGRTYlUxM1lrVldWVmRHV2xCV2JUVnZUbFprUmxsNlJscE5iRXBJV2xWU1ExZFdUa2RUYlhCaFVsWnZNRlJWV205VFZsWjBWRzEwVTJKdFpETldNRlp2VlcxU2NtVkVWbEppVkd4eVZUQmFTMDB4YTNwalNGcHJZVE5rTmxWWE5YTmhWVEZ4VW01a1dtVnJjRmhhVjNoelYxWkdkVlJ0ZEZoU1ZFVjRWakZTU2s1WFVrWmxSRlpWWW0xU2NGUlhNVFJOVm5CR1ZGaGtUbFpVVmtoYVZXaHpWMVpLTmxadGNHRlNWbTh3VkZWYWIxTldWblJVYlhSVFltMWtNMVl3Vm05Vk1XdDVWV3RrYkZKRlNscFZNRnBIVFd4U1NXSkZUbWxOYkVwS1ZsYzFhMkZ0Vm5SUFZFcFZVa1UxUkZwV1pFcGxWVEZaVVcxd1RtSkdiekpXTVZwdlVUSk5lVlZzYkZWWFJscGhWRmR3YzAxR1VrbGlSVGxyVFd0c05WbHJhRmRoTVVZMlVWaHdWV0pHYnpCYVZscHZVMFUxV0ZSdGRGTmliV1F6VmpCV2IxVXhhM2xWYTJSc1VrVktXbFV3V2t0aGJIQkdWMnBTVGxKdGFFcFdWbWhoVkZkV1ZsTnNVbGhpUjJoVVdsWmtSMWRHV25GVGJVWldUVVZ3ZFZkclZtdGlNa3BJVTI1U1VsWXlVbkJVVjNCWFpXeHdWMVJyVG10aVZYQXdWa2N4TkZkV1RrWmpSM0JhWWxobk1GUlZXbTlUVmxaMFZHMTBVMkp0WkROV01GWnZWVEZyZVZWclpHeFNSVXBhVlRCYVMyRnNjRVpoUms1cFRWaENXVlJyWkd0VlZsVjNVMnBXV0dKSGFGUlVWbVJQWkVVMVdHVkhSbEpOUlZvd1ZUSXhORTVIVmxkaFJXaFBWakExY1ZscmFHOU5WbVJHWVVaT1drMXNTa2hhVlZKRFYxWk9SMU50Y0dGU1ZtOHdWRlZhYjFOV1ZuUlViWFJUWW0xa00xWXdWbTlWYlZKeVpVUldVbUpHU25KV01GWkxUVEZzY1ZScmRFNVNWR3gzVlZkNFIyRnRTbFZpUkVKYVZtMW9VRmxyWkU5T1ZUbFdVMnQ0YkZaVmJ6SldNbmhyVkRBeFNGSnNhRkJYUmxwTFZXdFdjMDFXVWxsaGVrSk9VbTFvU2xVeU1VOWhWMHBKV2pOa1dGSlhhRlJYVkVwVFVqSldSVkZzYkZSU2EzQnhWMnRXWVU1Rk1VZGhSV3hXWWxVMWNsVnROVzVrTVZKSllYcFNZVTFyV2twV1YzQkRZV3hPUmsxRVNsVlRSM014V2tSS1QyUkZPVmxWYldoWVVsUldlbGRZY0V0U01sRjVVMnRzVjJKdVFrNVpiRlV4VFd4c2MxUlVVbWhpVlRWSlZERm9RMkZYU25OU2FrSlZZbGhDVkZkVVNrOWpNbFpKVm14c1ZGSnJjSEZYYTFaaFRrVXhSMkZGYkZaaVZUVnlWVzAxYm1ReFpFWmhSazVhVFd4S1NGcFZVa05YVms1SFVtcEtWVk5IZUVSV1ZXUkxaRWRXUlZacmNGTk5SRll5VmpKNGExUXlUbkppUldoUVZqSjRiMWxzV21GalZuQkdZVVUxWVUxWGVGbFViR1F3VTJ4SmVHSXphRnBpVkVaUVZGVmtSMWRGT1ZsV2JYQnNWbFZ3TUZkWGNFOVRiRzk1Vld0b2FGSXphSEJaYkZaaFkwWnNWMXBFVW1wU01VcEtXV3RrVDJGdFNrbGhSRVpZVWxkb1ZGZFVTbE5TTWxaRlVXeHNWRkpyY0hGWGExWmhUa1V4UjJGRmJGWmlWVFZ5VlcwMWJtUXhaRVpoUmtwcFRVZDRTbFpYY0ZkaGJFbDRWMnBLV0dKWGVFUmFWbHAzVjFaV2NWSnRjR2xXUmxwNlZqSjBUMUZyT1ZkUmJGWk9VakpTV2xWVVFuZE5iR1JZVFZoa2FWSnRkRFpXVnpGUFUyMUdWbE5VVW1GaE1XOHdXbFphYjFORk5WaFViWFJUWW0xa00xWXdWbTlWTVd0NVZXdGtiRkpGU2xwVk1GcExZV3h3UmxkcVVrNVNiV2hLVmxjeFQyRXhTblZhTTJSaFVsZG9lbHBFUm5kWFJUbFlUVlZ3VkZKWVFucFhhMVp2VmpKV1dGTnVVbGRpV0ZKTFZXdFNRazVXVmtkVWEwNWFUVWQ0TUZZeWNFZGhWMHBXVGtoa1dsWnRUVEZhUmxwdlVrWk9XRnBGZUZaTlJWb3dWVEl4TkU1SFZsZGhSV2hQVmpBMWNsVnROVzVrTVdSR1lVWk9XazFzU2toYVZWSkRWMVpPUjFOdGNHRlNWbTh3VkZWYWIxTldWblJVYlhSVVVsaENlbGRyVm05V01sWllVMjVTVjJKWVVrNVpiWGhMWkd4a2MxbDZRazlOVjJoS1ZUSXhUMkZYU2tsaFJGWllVbGROZUZkVVNsTlNNbFpGVVd4c1ZGSnJjSEZYYTFaaFRrVXhSMkZGYkZaaVZUVnlWVzAxYm1ReFpFWmhSa3ByWVRObk1WVlhkSE5YYkZvMlZtNUtXbUV5VWxkWGFrWnpWa1pHZFdKSFJsaFNhMncwVjFSSmQwMVhTa2RqUlZKU1lXdEtiMVZxUm1GTlZtUlhXa1YwYWsxWVFsaGFWV2h6VjFaS05sWnRjR0ZTVm04d1ZGVmFiMU5XVm5SVWJYUlRZbTFrTTFZd1ZtOVZNV3Q1Vld0a2JGSkZTbHBWTUZwTFpERmtkR0pGU21sTlIzaEpXVEJhUzJFeFdYaFhhbFpoVm1zd2VGa3daRTVrTVdSeFVtMXNhVlpVVWpOWFZscHFUbGRTVm1SRlVsSmhhMHB2VldwR1lVMVdUbFpVYmtwaFRVaFNWVlZYY0d0WFZrNUdZMGR3V21KWVp6QmFWbHB2VTBVMVdGUnRkRk5pYldRelZqQldiMVV4YTNsVmEyUnNVa1ZLV2xVd1drdGhiSEJHVjJwU1RsSnRhRXBXVnpGUFlURkdObUZFU2xSV1ZuQlFXa1JHZDFkR1VuVlJiSEJYVFRKU2RWZFVRbTlUTWxKellUTnNWMkp1UW5GVVYzQnpUbFpyZW1KRlNtbE5hM0F3VkRGU1EyRkdXWGhpZWtaVVRWVTFSRmt4WkZOWFZsSnhVV3R3VkZJeFNuWlhWbHB2Vld4dmVHTklVbEJYUjNoTFZUQldkMk14YkRaVFZGWnFUV3hLV2xaWE5VTmhWVEZ4Vm0xd1drMXVaekJhUmxwdlUxWldkRlJ0ZEZOaWJXUXpWakJXYjFVeGEzbFZhMlJzVWtWS1dsVXdXa3RoYkhCR1YycFNUbEp0YUVwV1Z6VkRXVmRHVmxKdVdsUldWMmhRV2tSR2QxZEdVblZSYkhCWFRUSlNkVlY2Ums5Uk1EUjRZVVZzVkdKVk5YQlphMmh1WkRGa1JtRkdUbHBOYkVwSVdsVlNRMWRXVGtkVGJYQmhVbFp2TUZSVldtOVRWbFowVkcxMFUySnRaRE5XTUZadlZUQXhTRkpyYUZkaWJGcE9XV3hWTVdJeGJISmFSRTVwVFZkb1NsVXlNVTloVjBwSldqTmtXRkpYYUZSWFZFcFRVakpXUlZGc2JGUlNhM0J4VjJ0V1lVNUZNVWRoUld4V1lsVTFjbFZ0Tlc1a01XUkdZVVpPV2sxc1NrcFZNakUwWVRGT1IxZHFWbHBpVkVaWVdWUkNORkl5VmtsaVJteFRaV3hhY1ZkclZtRk9SVEZIWVVWc1ZtSlZOWEpWYlRWdVpERmtSbUZHVGxwTmJFcElXbFZTUTFkV1RrZFRiWEJoVWxadk1GUlZXbTlUVmxaMVlrZEdXRkpVVlhsWFYzUnZXVmRLUm1SRlVsSmliRXBoVmpCa2IxSnNaSE5oUlU1T1VqQmFSVnBFU210WlZrbDRWMjVTV0dKSGFFeGFWbHAzVjBaV1dWUnJjRk5XTTJoNVZqSjRhazFWTVVoU2JHeFdZV3hhVGxWVVFrdE9iR3QzV2taa2FHSlZXbGxWYlRWUFUyeEZlV1JJY0ZoU1YyaE1WMVJLUzJNeVZrVlJiR3hVVW10d2NWZHJWbUZPUlRGSFlVVnNWbUpWTlhKVmJUVnVaREZrUm1GR1RscE5iRXBJV2xWU1ExZFdUa2RUYlhCaFVsZG9URmxyWkU1bFZUbFpWRzEwYVZac1dqSlZNVlpxWlVkR1NGWnJXbFppV0doeFZUQmFTMlJzVWtaVWEwNW9UVmhDV1ZZeU1UUmhiVXB5WTBoT1dHRXdOSHBYYWtaaFUwZEdTV0pIYkU1TmJFcDZWMVJLYzAweGIzbFVXSEJTWWxob1lWUlhNVFJpTVd4eVZHdEthbEp0YUVwVk1qRlBZVmRLU1ZvelpGaFNWMmhVVjFSS1UxSXlWa1ZSYkd4VVVtdHdjVmRyVm1GT1JURkhZVVZzVm1KVk5YSlZiVFZ1WkRGa1JtRkdTbXBTVkdnMFdsVm9jMWRXU2paV2JYQmFUVzVuTUZwR1dtOVRWbFowVkcxMFUySnRaRE5XTUZadlZURnJlVlZyWkd4U1JVcGFWVEJhUzJGc2NFWlhhbEpPVW0xb1NsWldhR0ZVVjFaV1UyeENXbUZyTlV4YVJWcHpWMGRSZVZwSGNGUlNXRUY1VmpGU1MxWXlWblJVV0d4UVYwZDRjVnBXVmtka2JHdDVUVlprYkdKVmJEVmFWVkpMV1ZaVmVXUkhOVmhXYlZFd1dsY3hTMDVXUm5SUFYyeE9ZVzE0TlZVeFZtdGpNbEpZVld0b1VGSXlVbkZWTUZaM1RXeGtjVlJyZEdsU01ERTJWa2N4VDJGdFNrbGhSRVpZVWxkb1ZGZFVTbE5TTWxaRlVXeHNWRkpyY0hGWGExWmhUa1V4UjJGRmJGWmlWVFZ5VlcwMWJtUXhaRVpoUms1UVZsZDRTVlp0TlU5aGF6RnpWbTAxWVZaRldUQmFWbHB2VTBVMVdGUnRjR2xUUjJkNFZqQldiMVV4YTNsVmEyUnNVa1ZLV2xVd1drdGhiSEJHVjJwU1RsSnRhRXBXVnpGUFlURktkVm96WkZoU1YyaFVWMVJLVTFKRk9VbFhhM0JTWld4SmVGWkZZM2hTTWxKWFkwVlNVbUpZVW05V01GVXhUbFprYzFwSGRHaFNNRFV3Vmxaa2EyRlZNWFZoU0VwWVlrZG9TMWRxU2s5a1JscDFZMGRzVG1KdFpEUlhhMVpyWXpKU2RGTnVRbEpoYTNCaFZtcE9ibVZHWkhOaFJUbGFUV3MxZWxwVmFGZFhWazVIVTIxd1lWSldiekJVVlZwdlUxWldkRlJ0ZEZOaWJXUXpWakJXYjFVeGEzbFZhMlJzVWtWS1dsVXdXa3RoYkhCR1dUTm9hRkl4V2tkV1Z6RTBZV3hPUjFOdVdsUk5NbmcyVkdwR2IxTldUblJVYld4cFUwZG5NVll3Vm1wTlZtdDVWV3RrYkZKRlNscFZNRnBMWVd4d1JsZHFVazVTYldoS1ZsY3hUMkV4U25WYU0yUllVbGRvVkZkVVNsTlNNbFpGVVcxMFUwMXRhSHBYVnpGeVRWZEdjMkpHYUd4VFJUVk5WVzAxYjA1V1pFWlpla1phVFd4S1NGcFZVa05YVms1SFUyMXdZVkpXYnpCVVZWcHZVMVpXZEZSdGRGTmliV1F6VmpCV2IxVXhhM2xWYTJSc1VrVktXbFV3V2t0T1ZtUnpZVVpPVGxZd05UQlViR1EwV1ZaRmVtRkhjRnBOYm1jd1drWmFiMU5XVm5SVWJYUlRZbTFrTTFZd1ZtOVZNV3Q1Vld0a2JGSkZTbHBWTUZwTFlXeHdSbGRxVWs1U2JXaEtWbGN4VDJFeFNuVmFNMlJhVFdwR1dGcFhNVXBsVjFaRlUyMUdWazF0VW5WWFYzaHJVakExUjFOcmFGZGliVkp5VldwS2EyVnNUbFphUms1cFVtNUNNRlp0TlhOaGJVcFhWMjVLVlZKVk5VUlZNbmgzVTBaYWRWWnRkRk5OYm1RelYyeGFUMDB4YjNsVVdIQlNZbGhvWVZSWE1UUmlNV3h5Vkd0S2FsSllhRWhhVldoelYxWktObFp0Y0dGU1ZtOHdWRlZhYjFOV1ZuUlViWFJUWW0xa00xWXdWbTlWTVd0NVZXdGtiRkpGU2xwVk1GcExZV3h3UmxkcVVrNVNiV2hLVmxjMWMxbFdaRVpPVkVwYVlUSm9hRmxyVmpCU1JrWjFWV3h3V0ZJeWFFZFdNbmh2VVRBeFNGSnJVbXROYlZKb1ZXcEdZV1JHWkhOaFJYUnNWbTVDV1ZaV2FFOVRiRXB6VTI1YVdrMXFRVEZVVkVaM1YxWk9XVlJyY0ZSU1ZGVjZWako0YTFReVRrZGlSbWhyVFcxU1RWWlVUbTloYkd0NVpVUlNhMVp0YUVwV1Z6RlBZVEZLZFZvelpGaFNWMmhVVjFSS1UxSXlWa1ZSYkd4VVVtdHdjVmRyVm1GT1JURkhZVVZzVm1KVk5YSlZiVFZ1WkRGcmVVMVdaR3hpVld3MVdsVlNTMWxXVlhsYVJ6VmFZa2RTU0ZScldrdFRSbHAxV2tkMFUwMXRValpWTVZaclZUSktSMk5JVWxkaWJYaHhXV3hhWVdOc1VrWlVhMDVVWWtoQ1NWWnROVmRoTVVsNVpETmtZVlpyTkRCWFZFcFBZekpXU1Zac2JGUlNhM0J4VjJ0V1lVNUZNVWRoUld4V1lsVTFjbFZ0Tlc1a01XUkdZVVpPV2sxc1NraGFWVkpEVjFaT1IxTnRjR0ZTVm04d1ZGVmFiMU5XVm5Sa1IwWlhUVmhDZWxkVVNURlRNa3BIWTBWU1QxZEdXbkJVVkVaTFpERmtkRTVZVGxoU01GcGFWbGN3TlZOc1JYbGxSM0JhVFc1bk1GcEdXbTlUVmxaMFZHMTBVMkp0WkROV01GWnZWVEZyZVZWclpHeFNSVXBhVlRCYVMyRnNjRVpYYWxKT1VtMW9TbFpYTVU5aE1VVjVZM3BPV0ZKWGFFeFhWRXBMWXpKV1JWRnNiRlJTYTNCeFYydFdZVTVGTVVkaFJXeFdZbFUxY2xWdE5XNWtNV1JHWVVaT1drMXNTa2hhVlZKRFlsWmFkV0ZFVmxoU1YwMTRWMVJLVDJNeVZrbFdiR3hVVW10d2NWZHJWbUZPUlRGSFlVVnNWbUpWTlhKVmJUVnVaREZrUm1GR1RscE5iRXBJV2xWU1ExUlhWbFZoUnpWV1RVZFNTRnBHV25kVFIxWklaVVZ3VTAxR2NEWlhWM1JQVVRKU2RGVnJhR2hTTTJoeFdWWldTMDVXWkhOaFJrNU9WakExTUZSc1pEUlpWa1YzVTFoc1dGWnRVVEJVVmxwM1YxWlNkRlJ0Y0dsVFIyZDRWakJXYjFVeGEzbFZhMlJzVWtWS1dsVXdXa3RoYkhCR1YycFNUbEp0YUVwV1Z6RlBZVEZLZFZvelpHRmlSVFZFV1d0a1MxTldVblJsUlhCVVUwWktjVmRVU2pST1IxSlhZVVZzVkdKVk5YQlphMmh1WkRGa1JtRkdUbHBOYkVwSVdsVlNRMWRXVGtkVGJYQmhVbFp2TUZSVldtOVRWbFowVkcxMFUySnRaRE5XUldoeVRrWnZlRlZZYkU5WFJUVnpWbFJDUzA1c2NFZGFSWFJzWWxaS1NWbHJVa05oTVdSSFUyNU9WRlpYVW5aWlZXUkxaRVpXZFZSdFJsaFNXRUV5VlRGV2IxRXlSa2hVV0hCVlZqSlNjRlJYY0ZOaWJHUlZVMVJXYTFZeFNrbFdiWEJUWVRGS2RXRkVWbGhTVjAxNFYxUktVMUl5VmtWUmJHeFVVbXR3Y1ZkclZtRk9SVEZIWVVWc1ZtSlZOWEpWYlRWdVpERmtSbUZHVGxwTmJFcEZWREJvWVZOc1NYZFhha1pZWVRBMVJGcEZaRk5YUjFaRlVXMW9XRkpWY0RaV01uaFBVVEF4YzJKR2FHeFNSVnBvVmpCVmVHSnNUWGRaZWtacllsVndkMVJXYUhkaGJFbDRWMjVHVkZaWFVreFphMlJIVTBaS2NWTnRhRmRsYlhjeFZYcEdZVTVIVmxkaFJXaFBWakExY2xWdE5XNWtNV1JHWVVaT1drMXNTa2hhVlZKRFYxWk9SMU50Y0dGU1ZtOHdWRlZhYjFOV1ZuUlViWFJUVFc1b01GVXhWazlpYkc5NVVtdG9VMkpzV21oVmFrNXZZekZyZVdKRlNtaFNhMHBXVkZWa2ExWkdXWGhUYms1YVlsUldWRmt3WkZOVFYwVjVXa1Y0VmsxRmEzcFdNRlp2VXpGcmVWTnVUbXhTUlVwYVZUQmFTMkZzY0VaWGFsSk9VbTFvU2xaWE1VOWhNVXAxV2pOa1dGSlhhRlJYVkVwVFVqSldSVkZzYkZSU2Eyd3pWMVpXYTFJd01VWmlSVlpPVWpKU2NsWnVjRmRqYkdSeldrZEdhbEl3Y0RCV2JURXdWVVV4V1dGRVZsaFNWMDE0VjFSS1UxSXlWa1ZSYkd4VVVtdHdjVmRyVm1GT1JURkhZVVZzVm1KVk5YSlZiVFZ1WkRGa1JtRkdUbHBOYkVwSVdsVlNRMWRzWkVaalNGWmFUVEo0UTFReFZuTlNNazE1V2tkd2FWWnNiRE5YYTFwdlV6SlNWMk5HYUZaV01sSmFWbXRvVTJGc2EzbGxSRkpyVm0xb1NsWlhNVTloTVVwMVdqTmtXRkpYYUZSWFZFcFRVakpXUlZGc2JGUlNhM0J4VjJ0V1lVNUZNVWRoUld4V1lXMTRXbFV3Vm5kaGJHeDBaVVJTYkZadGFFbFViR1JQWVRGS2RWb3paRmhTVjJoVVYxUktVMUl5VmtWUmJHeFVVbXR3Y1ZkclZtRk9SVEZIWVVWc1ZtSlZOWEpWV0hCdlRXeE9WbGRyVG14V01HdzFWa2N4TkdGck1IZE5WelZoVWxkU2RsbHJWbk5UVm1SMFlVZHNWRkpzY0hwVmVrSnZWRzFPUjJGRmJGUmlWVFZ3V1d0b2JtUXhaRVpoUms1YVRXeEtTRnBWVWtOWFZrNUhVMjF3WVZKV2J6QlVWVnB2VTFaV2RGUnRkRk5pYldRelZrVm9jazVHYjNoVGEyaFhZbFJHWVZZd1dtRmxiSEJHVkd0T2EwMXJOVEJVTVdSM1dWWmtSazVVV2xSV1YxSjZXbGQwYzFOV1RuUmxSM0JPWVcxNE5sZHJZM2hXTVd0NVZHNU9iRk5HV2xwVk1GcExZV3h3UmxkcVVrNVNiV2hLVmxjeFQyRXhTblZhTTJSWVVsZG9WRmRVU2xOU01sWkZVV3hzVkZKcldqSlZNVlp2VkRKUmVHTkdhRlZpYTBwaFZtcE9hMkpzY0hKaFJFNWhUVmhDU1ZadE1IaFpWbVJHWTBSV1dHSkhVbE5hUm1SUFpFWmFkV05IYkU1aWJXUTFWako0WVdFeVRraFZhMmhoVFcxU1RWWlVTbXRpYkhCR1drYzVhRkl4U2tWYVJFcHJWMnhrUm1OSVZscE5NbmhEV1RCVk5HVkhWa2xpUm14VFpXeGFjVmRyVm1GT1JURkhZVVZzVm1KVk5YSlZiVFZ1WkRGa1JtRkdUbHBOYkVwSVdsVlNRMWRXVGtkVFZGWllVbGRvVEZkVVNrdGpNbFpGVVd4c1ZGSnJjSEZYYTFaaFRrVXhSMkZGYkZaaVZUVnlWVzAxYm1ReFpFWmhSazVRVmxob1NGcFZhSE5YVmtvMlZtMXdXazF1WnpCYVJscHZVMVpXZEZSdGRGTmliV1F6VmpCV2IxVXhhM2xWYTJSc1VrVktXbFV3V2t0aGJIQkdWRlJTYTJFeWVFZFVNV2hYWVZaT1NHUkhOVnBpVkVFeFdsWmtTMWRHU25WVWEzQlVVbFZ2TVZkWGNFdFVNa3BJVkZod1ZXSnNjSEZaYlhONFlteE5kMkZGZEdsU01ERTFWREZvVDJFeVNsZFdibVJVVmxkU1VGbFZaRk5UUmxKMFQxVndVMDFHYjNoV01uUlBVVEpXVjJOR2FHcFNNMmhoVkZSR1IySnNaSE5oUnpsb1lraENXbFZYY0VOaFJsbzJZa1JHV21WcldUQmFWbHB2VTBVMVdGUnRkRk5pYldRelZqQldiMVV4YTNsVmEyUnNVa1ZLV2xVd1drdGhiSEJHVjJwU1RsSXdOVXBWTWpWaFYyc3hjMWRxV2xwTk1uaERWREZXYzFOV1VuVmFSMFpYVFVSV00xWXhXbXROTVc5NFVWaG9iRk5IZUZwVmJuQlhZV3h3UmxkcVVrNVNiV2hLVmxjeFQyRXhTblZhTTJSWVVsZG9WRmRVU2xOU01sWkZVV3hzVkZKcmIzZFhWbHByWVRKSmVWVnJaRlppVkd4eFdXeFNjbVZzVGxaVmJtUmFUV3MxZWxwVmFGZFhWazVIVTIxd1lWSldiekJVVlZwdlUxWldkRlJ0ZEZOaWJXUXpWakJXYjFVeGEzbFZhMlJzVWtWS2FGbHRlR0ZOVm1SVlZHeE9hbEl3YkRWVWEyTTFWRVpWZDFOVVRsaFNWMmhNVjFSS1MyTXlWa1ZSYkd4VVVtdHdjVmRyVm1GT1JURkhZVVZzVm1KVk5YSlZiVFZ1WkRGa1JtRkdUbHBOYkVwSVdsVlNRMkV4VGtaaWVrWlVWbGRuZDFkVVNrOWpNbFpKVm14c1ZGSnJjSEZYYTFaaFRrVXhSMkZGYkZaaVZUVnlWVzAxYm1ReFpFWmhSazVhVFd4S1NGcFZVa05YVms1SFUyMXdZVkpYVGpSWk1GcDJaVmRHUlZGc1pGTk5iV2N4VjFkd1QyRnRTWGRrUmxaclVqQTFjVmxyYUc5TlZtUkdZVVpPV2sxc1NraGFWVkpEVjFaT1IxTnRjR0ZTVm04d1ZGVmFiMU5XVm5SVWJYUlRZbTFrTTFZd1ZtOVZNRGxXWWtWb1ZXSlhhSEpWYWtFeFpHeE9WbFJ0TldGTldFSlZWVlpvUTFOc1RrbFZiWEJhVFc1bk1GcEdXbTlUVms1MFZHMXNhVk5IWkROV01GWnZWVEZyZVZWclpHeFNSVXBhVlRCYVMyRnNjRVpYYWxKT1VtMW9TbFpYTVU5aE1VcDFXak5rV0ZKWGFGUlpNRnAzWTBaR1dFOVZjRk5OTUVwVVYydGFhMVl5VmxoV2JGSlBWbFphYUZacVJuZGpNV3Q1VGxWMGFWSnVRa1ZVYkdRMFlrWkpkMDVZVGxwTlIyaFVXVEJrU21WVk5WWmlSMnhPWVcxNE5WVXhWazlqYkc5NVZsaG9iRk5IZUZwVmJuQlhZV3h3UmxkcVVrNVNiV2hLVmxjeFQyRXhTblZhTTJSWVVsZG9WRmRVU2xOU01sWkZVV3hzVkZKcmNIRlhhMVpoVGtVeFIyRkZiRlppYTFwWFZqQmFZV014YTNsT1dFcHJWbXR3U1ZadE1IaFpWbVJHWTBSV1dHSkhVbE5hUmxwM1YxZEdTR05IUmxoU1ZXd3pWMVphYWs1WFVsZFVhMmhRVjBad2IxcFdaR3RpYkdSelZHcFNXazFyTlhwYVZXaFhWMVpPUjFOdGNHRlNWbTh3VkZWYWIxTldWblJVYlhSVFltMWtNMVl3Vm05Vk1XdDVWV3RrYkZKRlNscFZNRnBMWVd4d1JsZHFVazVTYldoS1ZsYzFhMkZ0U2xWaVNFWllZa2RvVUZwWGREUmtWbEp4VVd4d1YwMUVWalZXYlhSdlV6SkdSMkV6YkZkV01sSk5WbXRvVTJGc2EzbGxSRkpyVm0xb1NsWlhNVTloTVVwMVdqTmtXRkpYYUZSWFZFcFRVakpXUlZGc2JGUlNhM0J4VjJ0V1lVNUZNVWRoUld4V1lsVTFjbFV3VWtkaGJHdDVaVVJTYTFadGFFcFZNakZQWVZkS1NWb3paRmhTVjJoVVYxUktVMUl5VmtWUmJHeFVVbXR3Y1ZkclZtRk9SVEZIWVVWc1ZtSlZOWEpWYlRWdVpERmtSbUZHU210aE0yY3hWVmQ0VTJFeFpFWlRhazVhWVdzMVRGUlZWVFZqUmtaelVtMXdhVlpIZDNkWFZscHZWREpLU0ZScVZsQldWWEJOV2xaV1MwNXNaSE5hUlRsT1VqQmFXVlF4YUZkVGJFcEdZa1JHVlZkSGMzZGFWM1EwWTFaU1dWWnJPVkpsYkVrd1ZqQldiMU14YTNsVGJrNXNVa1ZLV2xVd1drdGhiSEJHVjJwU1RsSnRhRXBXVnpGUFlURktkVm96WkZoU1YyaFVWMVJLVTFJeVZrVlJiR3hVVW10WmVWWkZhSE5STWtsNVZXdHNWbUp0VW5GYVZ6QTFUV3hTUlZSclRteFdNR3cxVkZab1EyRnJNWE5YYWxwWVZtMW9SRmw2U2xOWFZsSlpWbXh3VG1GdGQzZFdSV2h6VkRKUmVWTlliR2xUUmxweVZWaHdRbVZXVWxkWGFsSnNWbTFvU1ZSc1pFOWhNVXAxV2pOa1dGSlhhRlJYVkVwVFVqSldSVkZzYkZSU2EzQnhWMnRXWVU1Rk1VZGhSV3hXWWxVMWNsVnROVzVrTVZKSllYcFNZVTFWTlZsWGEyaFhZVlV3ZDJOSVRsUldWMmhFV2tjeFRtVnNWbGxWYlhCcFZteHZNbGRYY0V0T1JURllWV3RvYVZOR2NIQlpWbFpMWXpGd1ZscEZPV2xTTURWS1ZsYzFRMkZWTVhGV2FscFlVbGRvVEZkVVNrdGpNbFpGVVd4c1ZGSnJjSEZYYTFaaFRrVXhSMkZGYkZaaVZUVnlWVzAxYm1ReFpFWmhSazVhVFd4S1NGcFZVa05YVms1SFUyNWtXR0pYZUVOWmFrSnpVMFpXZEdWSGNGUlNhM0F5VlRGV1QyVnNiM2ROVmxKU1ZUTlNVbFpVUWt0TlJtUlhZVWM1VTFadVFscFZWM0JEWVVaRmQxSnVaRlJXVjJkM1YxUktUMk15VmtsV2JHeFVVbGhDY1ZkWE1UUk9SVEZIWVVWc1ZtSlZOWEpWYlRWdVpERmtSbUZHVGxwTmJFcElXbFZTUTFkV1RrZFRiWEJoVWxadk1GUlZXbTlUVmxaMFZHMTBVbVZ0WjNsVk1WWldUbGRTV0ZOcmJHaE5iVkp4VkZSR1lXTkdiRFpVYkU1cVVqRktTbFp0Y0VOWlZsVjNVMjVhV0ZadFRYaFpWRXBMVTBaYWRXSkhjR3hXVlc5NlZqRmFiMVF5Vm5KaVJXaFFWMFphUzFWcVFURk5iR3gwVGxaT2FWSXhXa3BXVnpGUFlXMUtTV0ZFUmxoU1YyaFVWMVJLVTFJeVZrVlJiR3hVVW10d2NWZHJWbUZPUlRGSFlVVnNWbUpWTlhKVmJUVnVaREZrUm1GR1RscE5iRXBJV2xWU1ExUlhWbFZoUnpWWVZtMU5lRmxVUW5OVFJURlZVbTFzVkZKcmNETlhWRUpyVGtkS1JtSkZiRmhpVjJod1ZUQmFZV014YTNwaVJVcHBUV3R3TUZReGFGZFVWbVJHVGxST1dHSkhVazlYYWtaelpFWmFkRTlXY0ZoU2JrSXpWMWR3VDFOdFRrZGhSV3hVWWxVMWNGbHJhRzVrTVdSR1lVWk9XazFzU2toYVZWSkRWMVpPUjFOdGNHRlNWbTh3VkZWYWIxTldWblJVYlhSVFltMWtNMVl3Vm05Vk1XdDVWV3RvYVZKNlJrdFZWRXByWW14c1ZscEZaR3RXYmtKSldsVmtOR0Z0UmxaU2JUbFdVbXhHTTFkcVJtRlRSMFpKWWtkc1RrMXNTbnBYVkVwelVXMU9SbUpGYkd0U01EVnhXV3RvYjAxV1pFWmhSazVhVFd4S1NGcFZVa05YVms1SFUyMXdZVkpXYnpCVVZWcHZVMVpXZEZSdGRGTmliV1F6VmpCV2IxVXhhM2xWYTJSc1VrVktXbFV3V2twa01XeFdXa1ZrVGxKWGVFWlVWV1JyWVRGYU5sWnVTbGhpUjFKb1dUQmtTMlJHV25Sa1JrSk9WMGRuTVZZd1ZtcE5WbXQ1Vld0a2JGSkZTbHBWTUZwTFlXeHdSbGRxVWs1U2JXaEtWbGN4VDJFeFNuVmFNMlJZVWxkb1ZGZFVTbE5TTWxaRlVXeHNWRkpyY0hGWGExWnJVakpXVjJJemNGVldNbEpTVmxSQ1MyRldUbFphUmxwaFRWZG9WbHBGWkU5aGJVcEpZVVJHV0ZKWGFGUlhWRXBUVWpKV1JWRnNiRlJTYTNCeFYydFdZVTVGTVVkaFJXeFdZbFUxY2xWdE5XNWtNV1JHWVVaT1drMXNTa2hhVlZKRFlsWmFkV0ZFVmxoU1YwMTRWMVJLVDJNeVZrbFdiR3hVVW10d2NWZHJWbUZPUlRGSFlVVnNWbUpWTlhKVmJUVnVaREZrUm1GR1RscE5iRXBJV2xWU1ExZFdUa2RUYlhCaFVsWnZNRlJWV25kVFJscDBUVmRHV0ZKWVFURldNbmhyVlcxU1dGUnVVbGRpYTFwb1ZtcEJNR1F4V25GVGJrNU9VakJhUlZkcVNtdGhNVWw1WVVjNVlWSlZOSHBYYWtaelYxWk9kRTVYY0d4V1ZWb3pWa2h3UjA1SFZsZGhSV2hQVmpBMWNsVnROVzVrTVdSR1lVWk9XazFzU2toYVZWSkRWMVpPUjFOdGNHRlNWbTh3VkZWYWIxTldWblJVYlhSVFltMWtNMWR0ZUdGT1IxWlhZVVZvVDFZd05YSlZiVFZ1WkRGa1JtRkdUbHBOYkVwSVdsVlNRMWRXVGtkVGJYQmhVbFp2TUZSVldtOVRWbFowVkcxMFZGSkZXbkZYVkVvMFRrZFNWMkZGYkZaaVZUVnlWVzAxYm1ReFpFWmhSazVhVFd4S1NGcFZVa05YVms1SFUyMXdZVkpXYnpCVVZXUmhWbGRTU0ZSdGNHbFRSMmQ0VmpCV2IxTXhhM2xUYms1c1VrVktXbFV3V2t0aGJIQkdWMnBTVGxKdGFFcFdWekZQWVRGS2RWb3paRlZUUjNNd1YycEdWbVZzV25WYVIzQlRaVzEzTVZkclZsTmtiRzk0Vm10c1ZHSnNjSEJXYWtvMFRteGtjMkZGTld0aVJWcFZXWHBLYTJGck1YTlhia1poVWxkU2VscEhNVXRqUmtaWllrVXhhR0Y2UlhoV1JtaHlUVWRXY21WSVJsTmlWVFZ4V1d0b2IwMVdaRVpoUms1YVRXeEtTRnBWVWtOWFZrNUhVMjF3WVZKV2J6QlVWVnB2VTFaV1dWZHJNV3hXVlhBeVYydFdiMVV5VVhsVWFscHBUVEZ3VGxSVVFrdE9WbXh4VTFob2FsSXdNVFZXYlRWM1YyeGtSbE51Y0dGU2JXaFBXa1phY21WVk9WbFZhekZzVmxSVmVsZFhjRXRqTWxKWVZXdFNUbEpGV2xCVVZtaHZUbFprUmxsNlJscE5iRXBJV2xWU1ExZFdUa2RUYlhCaFVsWnZNRlJWV205VFZsWjBWRzEwVW1WdFozbFZNVlpoVXpKS1JtVkdiRlJpV0doeFZGZHdjMlZzY0VoTlZscGhUV3MxU2xVeU5XRmhWbGw1WlVSYVdHSkhhRTlYYWtwSFYwVXhXVlZ0UmxkTlZYQXpWakZhYjFVeVNraFRhMnhvVFcxU2NsVnVjRzlpYkdSeVdYcFdhRTFYT1RWV2JHUnJXVmRLVmxkdWNGcGxhM0JYVjJwS1QyUkdXblZTYlVaWFRVUlNNMWRXV21wT1YxSldZa1ZvV0dKdGVIQlVWM0JIWVd4cmVXVkVVbXRXYldoS1ZsY3hUMkV4U25WYU0yUllVbGRvVkZkVVNsTlNNbFpGVVd4c1ZGSnJXWGxXUldoelVUSldkRlZzYUZSaWJrSm9WakJXV21WR1pITlpla1pPVWxkNFNWWnROWE5oYlVwVllrUldXbVZyV1RCYVZscHZVMFUxV0ZSdGRGTmliV1F6VmpCV2IxVXhhM2xWYTJSc1VrVktXbFV3V2t0aGJIQkdXa2hPYVZaWGVFVlhha3ByV1ZaSmVGZHFUbUZTVjFKMVYycENNRlpHUm5GYVJteFVVbGhDY1ZkWE1UUk9SVEZIWVVWc1ZtSlZOWEpWYlRWdVpERmtSbUZHVGxwTmJFcElXbFZTUTFkV1RrZFRhazVhVFdwQk1WbFhlSGRYVmxKMVkwVjRVazF1VFhwV01GWnZVekZyZVZOdVRteFNSVXBhVlRCYVMyRnNjRVpYYWxKT1VtMW9TbFpYTVU5aE1VcDFXak5rWVdKRk5VUlphMlJMVTFaU2RHVkZjRlJUUmtweFYxUktORTVIVWxkaFJXeFVZbFUxY0ZscmFHNWtNV1JHWVVaT1drMXNTa2hhVlZKRFYxWk9SMU50Y0dGU1ZtOHdWRlZhYjFOV1ZsbFhhekZzVmxWd1JsWXhXbXRPUjAxM1lrVm9VMkpzV2t0VmJuQnpUVEZ3UmxwSVRtdGlWWEF3VlcwMVQxTnNTWGxoUkVwYVlXdHdObGRxU2xOVFJUbElXa2R3YVZac2NIaFhWM0JQVXpKRmQySkZiRlppVkd4b1ZsUkNTMDVzY0VaYVJXUm9ZbFZaTVZwRVNtdGhSbG8yVlcwMVdGWkZjRWhhVjNoM1ZrWkdkVmR0Um1oV1ZYQjZWMnhXYTFReVNraFVhMnhXWW10S2NGUlhjRmRoYkd0NVpVUlNhMVp0YUVwV1Z6RlBZVEZLZFZvelpGaFNWMmhVVjFSS1UxSXlWa1ZSYkd4VVVtdHdjVmRyVms1T1IxSnlZa1ZzVldKclNuQlpiRlV4WXpGT1ZscElUazVTVnprMlZrWmthMkZWTUhoVGJscFlZa2RvVEZSVVNrZFhWbEowWlVWd1UwMHlaM2xYV0hCUFZXeHZlVlZZYkdoU00yaHdXVlpXUzJNeGNGWmFSbVJvWWxaS1dsWlhOVU5oVlRGeFZXMDFXR0ZyYXpGWmEyUlBUbFpHZEdGSGNFNU5ibWQ0VmpGU1IwNUhWbGRoUldoUFZqQTFjbFZ0Tlc1a01XUkdZVVpPV2sxc1NraGFWVkpEVjFaT1IxTnRjR0ZTVm04d1ZGVmtSMWRHWkZoYVJYaFNUVVZ3TkZac1dtOVdNa3BJVkc1V2FFMHhXbFJWYWtaaFpFWmtjMkZGZEd4V2JrSlpWbFpvVjFsVk1YTlhXR1JYVmtVMVZGbFZXbkpsVjFKR1lrZHNUbUZ0ZURWVk1WWlBZMnh2ZVZaWWFHeFRSM2hhVlc1d1YyRnNjRVpYYWxKT1VtMW9TbFpYTVU5aE1VcDFXak5rV0ZKWGFGUlhWRXBUVWpKV1JWRnNiRlJTYTI5NlYxUkpkMDVYUm5OalJteFZZbTVDVGxsdGN6QmtNV1JYV2tVNWFtSkdjRXBWTWpGdlYyc3hjMVp0TlZaU2F6VkVXVEZhVjFkV1duUmxSM0JwWWxoUmVGWlhkR3RXTWtwWFkwWnNWR0p0ZUdoV2FrWkhUVlprY1ZOc1pFNVNiRlkyVmxjeGIxZHJNWFZWYTNCYVlXdHJNVmt5ZERCU1IwWTJXa1pzVkZKWVFuRlhWekUwVGtVeFIyRkZiRlppVlRWeVZXMDFibVF4WkVaaFJrNWFUV3hLU0ZwVlVrTlhWazVIVTFSV1dGSlhhRXhYVkVwTFl6SldSVkZzYkZSU2EzQnhWMnRXWVU1Rk1VZGhSV3hXWWxVMWNsVnROVzVrTVdSR1lVWk9UazFyV2xsVWJHUXdZVlV3ZVZScVJscGxhM0JZVkZWYVlWTkhTa2xWYlVaWFpXMTBORmRyVms5aWJHOTVWR3RzVkdKc2NHRlVWM2hoVG14cmVtSkZTbXBTVkdnMFdsVm9jMWRXU2paV2JYQmhVbFp2TUZSVldtOVRWbFowVkcxMFUySnRaRE5XTUZadlZURnJlVlZyYkU1V01EVnhXV3RvYjAxV1pFWmhSazVhVFd4S1NGcFZVa05YVms1SFUyMXdZVkpXYnpCVVZXUmhWbGRTU0ZSdGNHbFRSMmQ0VmpCV2IxVXhhM2xWYTJSc1VrVktXbFV3V2t0aGJIQkdXak5vV2sxck5YcGFWV2hYVjFaT1JtTkhjRnBpV0djd1ZGVmFiMU5XVm5SVWJYUlRZbTFrTTFZd1ZtOVZNbFpYWTBac1ZtRnJXbkZaYkZKVFlteHNXR1ZGWkU1V2JrSmFWVEp3VjFSWFJYaFRiazVZWWxSR1dGcFdaRTlrUmxwMFpFVjRVazFGY0RCWGExcHFUVmRHZEZWcmFHbFRSbkJ3V1Zaa2EySnNiSFJOVm1ST1RWVndTVlp0TUhoWlZtUkdZa2MxVkUxVk5VUlVha1p2VTFaT2RGUnRiR2xUUjJjeFZqQldhazFXYTNsVmEyUnNVa1ZLV2xVd1drdGhiSEJHVjJwU1RsSnRhRXBXVm1oaFZGZFdWbE5xVGxwTmFrRXhXVzB4VDJSR1duVmpSM0JPVmtkNE1sWXhXbXBOVjBWNVUydG9WMkp0ZUhGYVZsSlhZakZrY2xwR1NtbE5SM2hGVkd0b1YxUlhSbFpTYm1SWVVsZG9URmRVU2t0ak1sWkZVV3hzVkZKcmNIRlhhMVpoVGtVeFIyRkZiRlppVlRWeVZUQmFTbVZHYTNkYVJGSnBVakF4TkZsNlNtdFViRVYzVTIxMFYwMHllRU5hVjNSelVqQXhTVlpzY0ZkTlZYQjVWWHBDWVU1SFZsZGhSV2hQVmpBMWNsVnROVzVrTVdSR1lVWk9XazFzU2toYVZWSkRWMVpPUjFOdGNHRlNWMmhNV1d0a1RtVlZPVmxVYlhScFZteGFNbFl3Vm05VE1XdDVVMjVPYkZKRlNscFZNRnBMWVd4d1JsZHFVazVTYldoS1ZsY3hUMkV4U25WYU0yUllVbGRvVTFwRVFqUlNNbFpKWWtac1UyVnNXbkZYYTFaaFRrVXhSMkZGYkZaaVZUVnlWVzAxYm1ReFpFWmhSazVhVFd4S1NGcFZVa05oVjBwWFYxaHdWbUV5VWxoWmJGcDNWMVpPV1ZSc2JGUlNXRUp4VjFjeE5FNUZNVWRoUld4V1lsVTFjbFZ0Tlc1a01XUkdZVVpPV2sxc1NraGFWVkpEVjFaT1IxTnVhRmRXYldoWVdXdGtUMlJYUlhwV2JXaFlVbFJXU1ZkcldtcE5WMFowVld0b2FWTkdjSEJaVm1ScllteHNjVk5VUmxaV01EVXdWREZqTVdGdFNsZFhhbHBhVFRKNFExa3dWbk5TVlRsWVZHMXdhVk5IWjNoV01GWnZWVEZyZVZWclpHeFNSVXBhVlRCYVMyRnNjRVpYYWxKT1VtMW9TbFpYTVU5aE1VcDFXak5rV21GcmEzaFdWbVJQWkVVNVdFNVhjR2xXYkc4eVYxUk9jMUZyTlhOaFJXeFVZbFUxY0ZscmFHNWtNV1JHWVVaT1drMXNTa2hhVlZKRFYxWk9SMU50Y0dGU1ZtOHdWRlZhYjFOV1ZuUlViWFJUVmpOb2VWWXllR3BOVlRGSVVteHNWbUZzV2s1VmJUVnZUbFprUmxsNlJscE5iRXBJV2xWU1ExZFdUa2RUYlhCaFVsWnZNRlJWV205VFZsWjBWRzEwVTJKdFpETlhWekI0VmpBd2VGTnJhRmRpVkVab1ZqQldjMDFXYkhSTlJGWk9VakJhV1ZZeWNGZFdNREYwWkROa1dsWldiekJhVmxwdlUwVTFXRlJ0ZEZOaWJXUXpWakJXYjFVeGEzbFZhMlJzVWtWS1dsVXdXa3RoYkhCR1ZHNU9XazFyTlhwYVZXaFhWMVpPUjFOdGNHRlNWbTh3VkZWYWIxTldWblJVYlhSVFltMWtNMVY2UmxOTlJtdDVWRzVPYkZOR1dscFZNRlozWVd4c2RHVkVVazVTYldoS1ZsY3hUMkV4U25WYU0yUllVbGRvVkZkVVNsTlNSVGxKVjJ0d1UwMVhPVFJYVjNScldWZE9TRk5yYUd4U00yaG9WVzF3YzJSc1pGZFpla1pvVFd0d1NWWnROWE5oYlZaVlZtMDVXR0V5VWxOWmFrSnpVa1UxU1Zack1XaFdWVm96VmpCV2IxTXhhM2xUYms1c1VrVktXbFV3V2t0aGJIQkdWMnBTVGxKdGFFcFdWekZQWVRGT1IxTllhRnBOUjFFd1dXdGtUbVZIVFhsYVJUVldUVVZ3Y2xacVRuTlJiVlp5WWtWa1RsTkdXbUZXYWtaTFkyeE5kMWRxVW14V2JXaEpWR3hrVDJFeFNuVmFNMlJZVWxkb1ZGZFVTbE5TTWxaRlVXeHNWRkpyY0hGWGExWnZVekpLU0ZSWWJGQlhSVFZ5V1d4YVYyUnNaRVpoUlhSYVRXdHdlbHBWVWtOWFZrNUhVMjF3WVZKV2J6QlVWVnB2VTFaV2RGUnRkRk5pYldRelZqQldiMVZ0VVhkbFJXUnNVMGQ0V2xWdWNGZGhiSEJHVjJwU1RsSnRhRXBXVnpGUFlURktkVm96WkZoU1YyaFVWMVJLVTFJeVZrVlJiV3hwVm14c05sWlhkR3RXTWtwWFkwWnNWRmRGTlZwVk1GWjNZV3hzZEdWRVVrNVNiV2hLVmxjeFQyRXhTblZhTTJSWVVsZG9WRmRVU2xOU01sWkZVV3hzVkZKcmNEUldiRnB2VmpKS1NGUnVWbWhOTVZwdlZqQlZNVk5HY0VkWmVrWm9ZbFpLU1ZscmFHRmhWMFpZV2tjMVdtRnJhM2hWYWtwVFYwZFdTRTFYYUZkTk1tZzJWako0YTFWc2IzZGtSbEpTVlhwc1dsVXdWbmRoYkd4MFpVUlNUbEp0YUVwV1Z6RlBZVEZLZFZvelpGaFNWMmhVVjFSS1UxSXlWa1ZSYkd4VVVtdHdjVmRyVm1wT1YxSlhVMjVXVjJKck5XaFpiR1EwWld4c2NscEdaR2hOUjNoR1dUQmtUMkZ0U2tsaFJFWllVbGRvVkZkVVNsTlNNbFpGVVd4c1ZGSnJjSEZYYTFaaFRrVXhSMkZGYkZaaVZUVnlWVzAxYm1ReFZYaGFSazVwVWpCd01WWlhOVU5oTVU1SVpVZHdXazF1WnpCYVJscHZVMVpXZEZSdGRGTmliV1F6VmpCV2IxVXhhM2xWYTJSc1VrVktXbFV3V2tka01XUkdZVVYwV2sxcmNIcGFWVkpEVjFaT1IxTnRjR0ZTVm04d1ZGVmFiMU5XVm5SVWJYUlNUVzVOZWxZd1ZtOVRNV3Q1VTI1T2JGTkhlRnBWYm5CWFlXeHdSbGRxVWs1U2JXaEtWbGN4VDJFeFNuVmFNMlJZVWxkb1UxcEhkRFJPVmtaMVlrZEdWMDB3U25wV01WSlBWVEpLUjJORlpGQldlbXhoVm01d1YyTnNiSEphUm1Sc1ZqQTBNVlJzWkc5WlZrbDRVbTVhVkZaVk1IZGFSbFkwWTBaR1dWRnNiRlJTV0VKeFYxY3hORTVGTVVkaFJXeFdZbFUxY2xWdE5XNWtNV1JHWVVaT1drMXNTa3BXVjNCSFlXeEplbUZJVGxwbGExbzJWMnBCZUdOR1JuUlZiR2hzVmxWWk1sVXhWbHBrTWxKWFlrWm9WbUpZVWsxVmJUVnZUbFprUmxsNlJscE5iRXBJV2xWU1ExZFdUa2RUYlhCaFVsWnZNRlJWV205VFZsWjBWRzEwVkZKWVFucFhXSEJLVGxkTmVWVnVVbGRXZW14YVZUQldkMkZzYkhSbFJGSk9VbTFvU2xaWE1VOWhNVXAxV2pOa1dGSlhhRlJYVkVwVFVqSldSVkZzYkZSU2ExbDZWa1ZXWVU1SFZsZGhSV2hQVmpBMWNsVnROVzVrTVdSR1lVWk9XazFzU2toYVZWSkRWMVpPUjFOdGNHRlNWbTh3VkZWa1MyUkdXbkZVYkU1VFRWWndNRll5ZUc5VGJVMTRZVVZzVkdKVk5YQlphMmh1WkRGa1JtRkdUbHBOYkVwSVdsVlNRMWRXVGtkVGJYQmhVbFp2TUZSVldtOVRWbFoxVW14YVdGSnNjSHBYVkVreFkyMVNXRkpzYkZWaE1sSnlWbTV3VjJOV2NFWmFTRTVyWWxWd2QxZHFTbXRoVlRGeFZteFNXR0pIVWpOWmExcHlaV3hXZEdWSFJsSk5SVm96VlRGV1VrNVdhM2xVYms1c1UwWmFXbFV3V2t0aGJIQkdWMnBTVGxKdGFFcFdWekZQWVRGS2RWb3paRmhTVjJoVVYxUktVMUl5VmtWUmJXeE9ZV3hhVlZZeWVHdGtNa3BIWVROd1ZtSllhR2hWVkVKR1RXeGtSbUZGZEZwTmEzQjZXbFZTUTFkV1RrZFRiWEJoVWxadk1GUlZXbTlUVmxaMFZHMTBVMkp0WkROV01GWnZWVEZyZVZWclpGWmlWR3h4V1d4U2NtVnNaSE5oUlhSYVRXczFlbHBWYUZkWFZrNUhVMjF3WVZKV2J6QlVWVnB2VTFaV2RGUnRkRk5pYldRelZqQldiMVZ0VGtkaFJXeFVZbFUxY0ZscmFHNWtNV1JHWVVaT1drMXNTa2hhVlZKRFYxWk9SMU50Y0dGU1ZUVjVWR3BHYjFOV1RuUlViV3hwVTBka00xWXdWbTlWTVd0NVZXdGtiRkpGU2xwVk1GcEtUbFpPVmxSdVNtdFdNRFZLVlRJMVlXRldXWGxsUkZwWVlrVTFkVmt3VlRSbFIxWkpZa1pzVTJWc1duRlhhMVpoVGtVeFIyRkZiRlppVlRWeVZUQlNRMlZzWkVaaFJYUmFUV3R3ZWxwVmFITlhWa28yVm0xd1lWSldiekJVVlZwdlUxWldkRlJ0ZEZKbGJXZDVWVEZXVjJFeVNraFZhMUpTWWxkb1MxVXdWa3RPVm14eFUxaG9hbEl3TVRWV2JHUnJXVmRLVldKRVZsUldWMmhVV1dwS1IxZFdVbGhhUjBaVFRWWndNRll5ZUc5VE1sWlhZMFpvVm1KVk5YRlphMmh2VFZaa1JtRkdUbHBOYkVwSVdsVlNRMWRXVGtkU2FrcFZVMGQ0UkZVeWVIZGpSa1oxVjJ4d2FWWjZiSFZYVmxwdlZHeHZlVlJyYkZSaWJIQnlXV3hrTkdOc1pITmFSa3BxVFVkNFNsWlhNRFZaVmxWM1UycE9XazFxUVRGYVJXUkhWMVpTZEdWRmNGTk5SbTh5VjFSQ2ExWXlSblJWYTFKU1ltdEtjVnBXVmt0aU1XUnlXa1pPYVZKdVFrVlZWM0JEWVZkV1ZsTllaRnBXVjFKWFYycEtTbVZXVG5WU2JVWlhUVVJTTTFZd1ZtOVRNV3Q1VTI1T2JGSkZTbHBWTUZwTFlXeHdSbGRxVWs1U01EVktWVEkxWVdGV1dYbGxSRnBZWWtaS01sZHFSbmRrVmxwMVZteHdUazFWY0ROWFYzQktUVWRKZDJKRmFGQldNbmh2V1ZaV1IyUXhUbFpoUkVKYVRXczFlbHBWYUZkWFZrNUhVMjF3WVZKV2J6QlVWVnB2VTFaV2RGUnRkRlJTV0VKNlYydFdiMVl5VmxoVGJrSlNZbXh3WVZsc1l6VmliRTVYVlZoa1lVMXJjREZXYlRWUFlWWkZkMUpZV2xSV1YxSXpWbGN4VTFkR1duVmlSM2hXWld4YWVsZHNWbTlWTWtwSVUyNVNWbFo2YkV0VmJuQnpZMFpzV0dKRVRtRk5helZLVlRJMVlXRldXWGxsUkZwWVlrVTFRMWt3Vm5OU1YwbDVXa2R3VkZKWVFYbFhWM2hyWXpKV2MyTkdWbXRTTURWeFdXdG9iMDFXWkVaaFJrNWFUV3hLU0ZwVlVrTlhWazVIVTFSV1dGSlhhRXhYVkVwTFl6SldSVkZzYkZSU2EzQnhWMnRXYm1ReVRYaGhSV3hVWWxVMWNGbHJhRzVrTVdSR1lVWk9XazFzU2tsV1Z6RTBXVmRLVjFkcVZscE5ha1pZV1ZSQ2MxSlZNVWhhUjNoT1pXdEZlbFl3Vm05VE1XdDVVMjVPYkZOSGVGcFZibkJYWVd4d1JsZHFVazVTV0djeFZEQmthMVZzV1hoVGJrcFVWbGRSTUZrd1pFNWxiRlpaVlcxd1RrMUZjSHBXTVZKTFl6SktXRkpzYUZWV01sSndWbXBHV21ReGJGWlplbFpvVFdzeE5GcFZhSE5YVmtvMlZtMXdZVkpXYnpCVVZXUkhZekZLY1ZKdFJsaFNWemg0VmtWamVGWXlSa2RoTTJ4aFRXcHNTMVV3V2twbFJtdDNXa1JTYVZJd05ERmFSRXByV1ZkS2MxZHFSbGhXUlRWVVdUQmtTbVZWTlVoUFZYQlRUVzVTTmxVeFZtOVZNREZZVkd0b2JGSXphRXRWVkVvd1lteHdWVkpxVW14V2JXaEpWR3hrVDJFeFNuVmFNMlJZVWxkb1ZGUlhlSE5YVms1WVdrZHNVMDF1WnpKWGExWlBVV3M1Vm1KRmJGWmhhMXB4VldwT2IyTXhXWHBpUlVwc1ZsZDRTRlJWYUU5WFZrNUdZMGR3V21KWVp6QlVWVnB2VTFaV2RGUnRkRk5pYldRelYxaHdUMVV5UmtoVmEyaFhZa1pLY2xVd1ZuZGtNV3gwVFZkd1lVMVZTbFZWVjNCRFlURmtSbE51Y0ZoaVJuQTJWMnBCTVZaR1JuUlZiRUpPVjBkbk1WWXdWbXBOVm10NVZHNU9iRk5HV2xwVk1GcExZV3h3UmxkcVVrNVNXR2N4VkRCa2EyRnNUa1pqUkVwYVlrZFNlbHBYZUhkV1JUVlpXa2R3YVZaSGVERlhWRWw0VmpKV2RGUnFWbEpXUjNoTFZXcE9iMlF4YkRaVWJFcHJWbTE0V1ZaWE1UQlhWazVHWTBkd1dtSllaekJVVlZwdlUxWldkRlJ0ZEZKbGJXZDVWVEZXYjFFeVZsaFRXR3hPVjBWS2NWUlhlRmROVm1SeVdYcFdhMVp1UWxWVlZsSnpVMnhKZW1GSVpGcGxhelZUV2taYWMxZEdWblJrUm14VVVsaENjVmRYTVRST1JURkhZVVZzVm1KVk5YSlZXSEJ2VFd4T1ZtRkZUbXhXTUd3MVZGWm9RMkZyTVhOV2FrWllZbFJHU0Zrd1pFdFNSa1pWWWtWd1UwMHlhRE5YV0hCUFZXMVNWMkpHYUZaaVdGSmFWVEJXZDJGc2JIUmxSRkpPVW0xb1NsWlhNVTloTVU1R1UycFdXbUZyYkRSWk1HUk9aVlphZEZOcmNGUlNhMncwVjFSQ2EwNUhTa2RhUkZaU1YwZG9TMVZ0Y0VOaWJHUkhWR3RLVUZaWGVFbGFWV2hEWVdzd2VGSnFSbGhXYlZKVVdWUkJOR1ZIVmtsaVJteFRaV3hhY1ZkVVNqUk9SMUpYWVVWc1ZtSlZOWEpWYlRWdVpERlNTV0Y2VW1GTlZUVkpWVzAxVjFsV1NYcGhTRTVVVmxkb1VGUlZXbk5YVmxaMFpVWnNWRkpZUW5GWFZ6RTBUa1V4UjJGRmJGWmlWVFZ5VldwS05HUkdUbFpVYlRWaFRXc3hObFpYTVc5aE1VbDRWMnhXWVZKWGFFeFpNR1JMWkVacmVWcEZlRlpOUld0NlZqQldiMU14YTNsVGJrNXNVa1ZLV2xVd1drdGhiSEJHVjJwU1RsSXdjRWxaYTJoM1lURkdObFp0T1ZoaE1sSlRXV3BHYjFOV1RuUlViV3hwVTBka00xWXdWbTlWTVd0NVZXdGtiRkpGU2xwVk1GcExaRVp3UjFsNlJtaGlWa3BKV1d0b1lXRlhSbGhhU0dSVVZsZG5kMWRVU2s5ak1sWkpWbXhzVkZKWVFuRlhWekUwVGtVeFIyRkZiRlppVlRWeVZXMDFibVF4WkVaaFJrNWFUV3hLUlZRd2FHRlRiRTVHVGtoa1dGWnRhRlJaYTFaelVsVXhTRnBHYkZKTlNFRXhWako0YjFReVVuUlRhMnhZWWxob2FGVnROV3RqUms1V1ZHMDVhbEpZYURCV2JHaFhWRlpGZDFOdVVtRlNiVkV3V1d4a1IxZEhWa2xVYlVaWFRWVmFNMVl3Vm05VE1XdDVVMjVPYkZKRlNscFZNRnBMWVd4d1JsZHFVazVTYldoS1ZsY3hUMkV4UmpaaFJFcFVWbGRvVUZSVlduTlhWbFowWlVWd1UxSkZTblZXTUZaUFV6SldWMk5HYUdwU00yaGhWRlJHUzJNeFpISlhhazVvVm0xb1NsVXlNVTloVjBwSldqTmtXRkpYYUZSWFZFcFRVakpXUlZGc2JGUlNhM0J4VjJ0V2IxUXdNVWRpUm14V1lsaG9TMVZyVWtOaWJHdzJWR3hPYUZJeFNrbFdiWGhUWVRGT1JtTklaRnBpVkVaeFZHcEdiMU5XVG5SVWJXeHBVMGRrTTFZd1ZtOVZNV3Q1Vld0a2JGSkZTbHBWTUZwS1RsWlNSbGRxVW14V2JXaEpWR3hrVDJGdFNrbGhSRVpZVWxkb1ZGZFVTbE5TTWxaRlVXeHNWRkpyY0hGWGExWk9Ua2RTY21KRmJGUmlXR2h2V1d4YVlXTldjRVphUm1Sb1RWZGtOVlpITVc5aFZrbDZZVWhDV0ZadFVsQlpNakZQVGxVMVdHUkhhRmhTVkZaMlZqRmplRTVIU2tkaFJXeFVZbFUxY0ZscmFHNWtNV1JHWVVaT1drMXNTa2hhVlZKRFYxWk9SMUpxU2xWVFIzaEVXV3hrVTFkSFZraE5WMmhYVFRKb05sWXllR3RWTVhCellUTnNVMkpyTlhCVmFrSjNZakZrVlZOcVFteGhNMmd3VmxjMVEyRnJNWEpYYmtKYVlUSlNXRmRVU2s5ak1sWkpWbXhzVkZKcmNIRlhhMVpoVGtVeFIyRkZiRlppVlRWeVZUQmFTbVZHYTNkYVJGSnBVakF4TkZsNlNtdFViVlpXVW1wQ1ZGWlhVbmxYYWtadlZqSk5lVnBGTldoV1ZYQnlWa1ZqZUZVeVRraFVXR3hUWWxkNGNGVnFSbGRsYkdSR1lVVjBXazFyY0hwYVZXaHpWMVpLTmxadGNHRlNWbTh3VkZWYWIxTldWblJVYlhSVFltMWtNMVpGYUhKT1JtOTVWR3RzVkdKc2NHaFVWRUozWXpGc05sUnJPV0ZpUjNRMVZXMDFUMkZXU1hkalJ6bFlWa1Z2ZDFwWGREUmtSMVpKVjJ4d1RtSnNTbkZYVkVvMFRrZFNWMkZGYkZaaVZUVnlWVzAxYm1ReFpFWmhSazVhVFd4S1NsWlhjRWRoYkVsNllVaE9XbVZyV2paWGFrRjRVa1pHZEZWc2FHeFdWVmt4VlRGV1dtUXlVbGhUYTJoUVZqTkNiMVJXYUc5T1ZtUkdXWHBHV2sxc1NraGFWVkpEVjFaT1IxTnRjR0ZTVlRWNVZHcEdiMU5XVG5SVWJXeHBVMGRrTTFZd1ZtOVZNV3Q1Vld0c1RsWXdOWEZaYTJodlRWWmtSbUZGZEZwTmEzQjZXbFZTUTFkV1RrZFRiWEJoVWxVd01GcEhkSE5UVmtaMVlrZHNUbUpXU1RGV01uaHZWREpXYzFvemJHaFNNbWh3V1d4YVMyVnNaSE5oUlhSc1lUTm9NRll5TlVOaGJVcFhWMjF3V2sxdVp6QmFSbHB2VTFaV2RGUnRkRk5pYldRelZrVm9jazVHYjNoalNGWlhZbXMxYUZsc1pEUmxiR3h5V2taa2FFMVhaRFZaVldSdllWZEtWMU51Y0ZoaVIyaE1XbGQwTkdSR1pIVlJiWEJwVm14d2NWZFVTalJPUjFKWFlVVnNWbUpWTlhKVmJUVnVaREZTU1dGNlVtRk5helV3Vm0wMVIxbFdXWGRPU0dSWVlrZFNWRmR0TVVkVFJrcDFWbTFHVTAweWFIcFhWRWt4VkcxU1YyTklVbWxUUjNob1ZtMDFiMDVXWkVaWmVrWmFUV3hLU0ZwVlVrTlhWazVIVTI1d1dsWnRhRkJVVlZZMFpFWktkR1JIUmxKTmJWSjFWMnRXYjFZeVVYbFRhMmhYWWxWd1MxVnJWWGhpYkdSSFZGUkdhVll3V2xwVk1qRTBVMnhGZVdONlRsaFNWMmhNVjFSS1MyTXlWa2xpUm14VFpXeGFjVmRyVm1GT1JURkhZVVZzVmxkR2NFNWFWbFpMWTJ4a2MxcEhSbWxTTURVeFZUSXhORmxXUmpaV2FrWmFZV3MxVkZrd1duZGtWMFY1V2taR1ZrMUZjREJYYTFwcVRWZEdkRlZyYUdsVFJuQndXVlprYTJReFRsWmhTSEJoVFZoQ1NWWnRNSGhaVm1SR1kwUldXR0pIVWxOYVJtUkxaRVU1VlZGdGFGZE5Wemg0Vm0xd1MyTXdNVWhTYTFKaFRURmFUbGxXVWxOa01VNVdXak5vV2sxck5YcGFWV2hYVjFaT1IxTnRjR0ZTVm04d1ZGVldORTVWT1VoYVIwWlRUVlp3TUZZeWVHOVRNbFpYWTBab1ZsZEdXbkZaYkZwaFRteHNjVk5xVWs1aVNFSlZWVlpTYzFOc1NYaGlNMmhhWWxSR1VGUlZaRWRYUlRsWlZtdDRVazF1VW5WWGJHaHpVVEpGZUdOR2FGaGlXR2h4V1cxMGQyTXhaSEpVVkVac1ZtNUNXbFpITldGaFZrNUhZMGhPVjJGcmNIcFVWV1JIVWtadmVsWnJNV2hXUmtvelZURldibVZHYTNsVWJrNXNVMFphV2xVd1drdGhiSEJHVjJwU1RsSllaekZVTUdScldWWkplRmR1VWxoaVIyaE1XbFphZDFkR1ZsbFdiWEJwVm14d05GWXllR3RVTURGR1lrVldUbEl5VW1oWmJYaGhUVlprVlZSc1RtcFNNR3cxVkd0ak5WUkdWWGRUVkU1VVZsZFNWRmxyV25ka1JscDFZa2R3YVZac2NIbFdSV014VXpKS1NGSnVVbGRpV0VKeVZXMHhVMlF4Y0VaYVJ6VnBUVWhvZDFScmFGZFVSbFYzVTFSV1dGSlhhRXhYVkVwTFl6SldSVkZzYkZSU2EzQnhWMnRXYTFVeVNrZGpTRkpYWW0xNGNWbHNXbUZqYkZsNllrVk9UbEl4U2xwVlZ6VlBXVlphZFZSdE5WVldWVFZFVjJ0V2MxSXdNVWhhUmtaV1RVVndNRmRyV21wTlYwWjBWV3RvYVZOR2NIQlpWbVJyWkRGT1ZtRkVRbHBOYXpWNldsVm9WMWRXVGtkVGJYQmhVbFp2TUZSVldtOVRWbFowWkVkR1YwMVlRbnBYVkVreFV6SktSMk5GWkdwTmJWSnlWVEJhWVUweGJISmFSbVJhWVRKNFJsVldaR3RYVmxWM1VtNXNWRlpXYjNwWlZscGFaVmRLUlZGdGFGTmliVkozVlRGV1dtUXlTWGRpUld4V1lsUnNiMVl3VlhoaWJGWkhWVmhrVUZaWGVFbFdWekUwV1ZkS1YxZHFWbHBOYWtaWVdWUkNjMUpWT1VoYVIzUlhaV3hhZVZZeWVHdFpWMDVJVTI1U1YySllVa3RWYTJNMVlteHdSbHBIT1dwU01EUXhXa1JLYTFkc1pFWmpTRlpoVW0xT05GbHJaRXRrVmxaMVkwVndVazF1VFhwV01GWnZVekZyZVZOdVRteFNSVXBhVlRCYVMyRnNjRVpYYWxKT1VqQTFNRlp0Y0VOaE1XUkdZMFJHVkZaWGFGUlpha3BIVjFaU1ZWcEdiRlJTV0VKeFYxY3hORTVGTVVkaFJXeFdZbFUxY2xVd1VrSk5NV1JHWVVWMFdrMXJjSHBhVldoelYxWktObFp0Y0dGU1ZtOHdWRlZhYjFOV1ZsbFhhekZzVmxWd2VWWXllR3RaVjBwSVZHNVdWR0pZYUdoVldIQlhUVlpzY1ZSc1RtcFNia0l4V1d0YWIyRkdaRWRUYmxwVVZsWkdNMWRxU2t0VFIwcEpZMGQwVW1Wc1dqQlhWbHB2VXpKS1IxZFliR2xTUlVwdlZXMDFiMDVXWkVaWmVrWmFUV3hLU0ZwVlVrTlhWazVIVW1wS1ZWTkhlRVJaVkVaM1YwWmtkR1ZIY0dsaE0wSjZWakowVGsxWFZsZGpSbXhWWW14d2NGVXdXbmRqTVZweFUyNU9UbEl3V2tWVlZsSnpVMnhKZW1GSVpGcGxhelZUV2taYWQyUkhTa2xpUjBaWFlsWktNMWRyVm10aU1XdDVWRzVPYkZOR1dscFZNRnBMWVd4d1JsZHFVazVTV0djeFZEQmthMWxXU1hoWGJsSllZa2RvVEZwV1duZFhSbFpaVm0xd2FWWnNjRFJXTW5oclZEQXhSMWRZYkdsU1JVcHZWVlJDUms1V1RsWmFSRkpxVWpBeE5sWldhRmRaVjBwWVpVUldXR0pHY0hKWk1HUlRVMGRHU0ZSdGNHbFRSMmQ0VmpCV2IxVXhhM2xWYTJSc1VrVkthRlZxUm1Ga1JtUnpZVVYwYkZadVFsbFdWekZMVTJ4T1IxTllhRnBOUjFFd1dXdGFhMDVXUmxsYVJYQlRZV3RLZFZWNlRuTlJNV3QzWWtoT1lWTkZTbkpWYWtwdllXeE9XR0pGVG1GU1YzaEdWRlZrYTJGV1NYbGxSRnBoVWxVd2VGbHNaRWRYVms1MFpVWmtUbUpZWkROWFZsWlRUVVpyZVZSdVRteFRSbHBhVlRCYVMyRnNjRVphTTJSaFRVaFNWbHBGWkU5aGJVcEpZVVJHV0ZKWGFFeFhWRXBMWXpKV1JWRnNiRlJTYTFsNVZrVm9jMUV4VW5OaVJtaHJVak5vUzFVd1drdGtiR1J6Vkd0T2FFMVlRbGxXTWpFMFlXMUtjbU5JVGxoaE1EVkVXVlZXYzFOV1JuVmlSMnhPWVd0YU0xZFljRXRXTVd0NVZHNU9iRk5HV2xwVk1GcExZV3h3Um1GRlRteFdNR3cxVkZab1EyRnJNWE5XYWtaYVRVZG9URnBITVV0WFIwcEpZMGRHVmsxdFVuVldNblJyVmpKS1YyTkdiRlJpYlhob1ZtcEdSMkpzVFhoVmFrSmFUV3MxZWxwVmFGZFhWazVHWTBkd1dtSllaekJVVlZwdlUxWldXVmRyTVd4V1ZYQkdWakZhYTA1SFRYZGlSV2hoVTBWS2NsbHNXbUZOVms1V1drZEdUbFl3Y0RCV1JtUnJZVVpaZUdKSE5WaFdiVTE0Vkd4YWIxTldUblJVYld4cFUwZGtNMVl3Vm05Vk1rNUhZMGhDVWxaNmJFdFZha1oyWlVac2RFMVZOV0ZOU0ZKVlZWZHdhMWRXVGtaalIzQmFZbGhuTUZSVldtOVRWbFowVkcxMFUwMVhPVFJYVnpCNFZHMVNWMkV6YkZOaWF6VndWVlJLYTJKc1pISmFSbVJwVm01Q1dsVXlOWE5aVmxsNFVtNXdWRlpYVWxSWmExcDNaRVphZFdKSGNHbFdiSEI1VlRGV1QyTnJOSGhoUld4VVlsVTFjRmxyYUc1a01XUkdZVVpPVUZadGFFcFZNakZQWVZkS1NXRkVWbGhTVjAxNFYxUktVMUl5VmtWUmF6RnNWa2RvZFZaV1dtdE9SMDEzWWtWb1ZtSnNjSEJaYkZwWFlqRmtSbUZGZEZwTmEzQjZXbFZTUTFkV1RrZFRhbFpZWWtkb1ZGUldaRTlrUlRWSVdrZEdVMDFXY0RCV01uaHZVekpXVjJOR2FGWldSMUphVlRCV2QyRnNiSFJsUkZKT1VqRndWVnBWWkU5aGJVcEpZVVJHV0ZKWGFFeFhWRXBMWXpKV1JWRnJNV3hXUjJoMVZsZDBhMVl5U2xkalJteFVZbTE0YUZacVJrZGliR3hXV2taa2FrMXJOVWxXYlRWelYxWk9SbU5IY0ZwaVdHY3dWRlZrVW1WWFJraGxSMnhvWWxSc2RWWXlNREZXTWxKWFlUTndWbUpyU25CVVYzQlRaR3hPVm1GRk9XcFNNSEF3VjJ0b1QxbFdXbk5qUnpsYVlUSm9XRmxyVm5OU1IwVjVXa2Q0VGxkSFp6RldNRlpxVFZacmVWVnJaR3hTUlVweVdXeFdZVTVXWkVaaFJYUmFUV3R3ZWxwVmFITlhWa28yVm0xd1lWSldiekJVVlZwdlUxWldXVmRyTVd4V1ZYQjRWMWR3VDFZeVVsaFZhMUpTWW14d2FGbFdWa3BsUm14MFRWVTVhMkpWY0ZwVlZ6VlBXVlprUjFOdVRsaGhNRFZFV2xjeFUxZEdUblZYYlhCcFZtdHdNMWRYTUhoU01ERkhZMFpzVldKVk5YRlphMmh2VFZaa1JtRkdUbHBOYkVwSVdsVlNRMkZ0U2xkWGFrSllWbTFTZWxwR1pFZFhSVFZZVGxWd1UxSkZTblZXTVZwdlV6SktkRlZzYUU1V00yaHdXVzE0UzA1c1VraE5WRkpwVWpCd01GZHJVa05oUmtWNllVZHdXazF1WnpCYVJscHZVMVpPZEZSdGJHbFRSMlF6VmpCV2IxVXhhM2xWYTFKUVUwWndTMVZxUVRGTmJIQkhXWHBHVGxKWGVFbFVNV040VTJ4T1IxZHFSbHBOUjJoTVdrZDRjbVZXV25WalIzQk9Za1p3ZVZVeFZtdFNNbFpYWWpOd1YySnNTbWhXYm5CV1pERnNObEpxVW14V2JXaEpWR3hrVDJFeFNuVmFNMlJZVWxkb1ZGa3dWbk5TVlRGSVdrZHdhVlpzYjNkV01WcHJZekpTV0ZKc2FFOVdlbFpPVlcwMWIwNVdaRVpaZWtaYVRXczFlbHBWYUZkWFZrNUhVMjF3WVZKV2J6QlVWVlkwVGxVNVNGcEhjRTVOVm5CM1YxZHdUMU15UlhsU2JHaFBWakpvY2xWcVJsZGliR1IwVGxaa2FrMVlRakJaYTJoUFlWWktObEp1VGxwaVZGWlRWMnBHZDFOR1NuRlJiSEJYWW0xbk1WWXdWbXBOVm10NVZXdGtiRkpGU2xwVk1GcExUbFprYzJGRk9XdGlWWEJLVmpJeE5GVnJNWEZpUkVaaFVsZFNXRlJyWkZOVFZsSllXa1pHVmsxRmNFUlhWRWt4VXpKR1NGWnNVbUZOYlZKdlZsUkNSMlF4VWtaWGFsSnNWbTFvU1ZSc1pFOWhNVXAxV2pOa1dGSlhhRlJhVmxwM1YxWlNkVmR0YkZSU2JrSjZWbTB3ZUZJeVRYbFZiR2hYWW01Q1MxVnJVa05pYkd3MlUycFNhbEp0ZERWV2JHaFhWMnN4Y2xkdWNGcGhNRFYxVjJwR2MxZFdUblJPVjNSWFpXdGFlbGRYTURGVk1sWnlZa1ZTYUUwd05WcFZNRlozWVd4c2RHVkVVbXhXYldoSlZHeGtUMkV4U25WYU0yUllVbGRvVTFwSGREUk9Wa1p4VVcxb1UwMVdXblZYVjNoclVqSldkRlZyYUZkaWJYaExWV3hhUzJNeFpIUk5WbVJzVmpBMU1GWnRNVEJYVms1R1kwZHdXbUpZWnpCVVZWcHZVMVpXZEZSdGRGTmxhMXAyVjFod1QxVXlTa2hVYmtKU1ZrZDRTMVZxVGtOVk1YQkhXa1prYkZZeFdsVlViRlpYV1ZaWmVHTklUbHBOYWxaTVdXdGFkMUpHYjNwUmF6RlRZbTFuTVZZd1ZtcE5WbXQ1Vkc1T2JGTkdXbHBWTUZwTFlXeHdSbGRxVWs1U1dHY3hWREJrYTJGck1IaFhia0phWVdzMVRGbFVTa2RYUlRWWVlVZDBVMDFXV25WV01WSkxVakpOZVZOcmFGUmlWMmhoVkZjMVQySnNaSFJOVldSb1lsWktTVlF4YUhOaVJscDFZVVJXV0ZKWFRYaFhWRXBUVWpKV1JWRnNiRlJTYTJ3MFYxUkNhMVV5UmtoVmEyaFhZVEpTY2xadWNGZGpWazVXVlZoa1lVMVlRakZXYlRWWFYyc3dlRk51WkZwaGEydDNXV3BDYzFOSFJYbGFSWGhXVFVWcmVsWXdWbTlUTVd0NVUyNU9iRkpGU2xwVk1GcExZV3h3UmxkcVVrNVNNRFV3Vm0xd1EyRXhaRVpqUkVaVVZsZFNhRlJXWkV0a1JsSnhVVzFvVjJWdGQzaFZla0pQVVRBeGMySkdhR3hTUlZwb1ZsUkNSMlF4VGxaaFJFSmFUV3MxZWxwVmFGZFhWazVIVTIxd1lWSldiekJVVlZwdlUxWldkRlJ0ZEZSU1dFSjZWMWh3U2s1WFRYbFZibEpYWVRGS2NGUlhjRlprTVdSellVYzVUbEl3TVRSWmVrcHJZVVpWZDFOdGRGUldWa1l6VjJwS1UxTkhSa2xSYlhCc1lteEtjVmRVU2pST1IxSlhZVVZzVm1KVk5YSlZiVFZ1WkRGa1JtRkdUbHBOYkVwS1ZUSXhOR0ZyTVhGaVNIQmhVbnBHV0ZacVJuTlhSMVpGVW0xR1dGSlVWbkJWTVZaclkyeHZlR0ZHVWxKV1IzaExWV3BDWVU1V1pIRlViR1JyVW01Q1dWUnNVa05oYlZaVlZtNXdXR0pIVFhoWmJURlRVMFp2ZVZwR1JtaFdWVmt3VlRGV1VrNUdiM2xVV0d4c1UwVktZVlJYZUZkTlZtUlZVMnRrYWsxcmNFVlhha3ByVjJ4a1JtTklWbUZTYlU0MFdXdGtTMlJXVm5WalJYQlNUVzVTZFZaRVNuTlJNREZ6WWtab2JGSkZXbWhXYTJoVFlXeHJlV1ZFVW10V2JXaEtWbGN4VDJFeFNuVmFNMlJZVWxkb1ZGZFVTbE5UUjBwSVRWVndVazF0VW5WVk1WcFBZbXh2ZDJWR1VrNVhSM2hvVm01d1IySXhiRmRaZWtacVVqQndNRmRVU210VVJsVjNVbTVrVkZaWFozZFhWRXBQWXpKV1NWWnNiRlJTYTNCeFYydFdZVTVGTVVkaFJXeFdZbFUxY2xWdE5XNWtNV3h6V2tWa2JHSldTa2xXYlRWelZGZEtjbU5JVGxwbGEyc3hXWHBLVTJSR1duTmhSMmhZVW10d01sVjZRazlSTWxaWFkwWnNWV0pzY0hCVk1GcDNZekZXVlZOVVZtdFdNVXBKVm0xd1UyRXhUa1pOV0hCVVZsZG9URmxyWkU1bFZUbFpWRzEwYVZac2NGbFdNVnByVGtVeFYyTkdiRlZXTWxKTlZtdG9VMkZzYTNsbFJGSnJWbTFvU2xaWE1VOWhNVXAxV2pOa1dGSlhhRlJYVkVwVFUxVXhXRlJ0Y0dsVFIyZDRWakJXYjFVeGEzbFZhMlJzVWtWS1dsVXdXa3BPVmxJMlVtcFNiRlp0YUVsVWJHUlBZVEZLZFZvelpGaFNWMmhVVkRGVk5HVkhWa2xpUm14VFpXeGFjVmRVU2pST1IxSlhZVVZzVm1KVk5YSlZXSEJ2VFd4T1ZsZHJPV3BTTUhBd1YydG9UMWxXVmpaUmJUVllWbTFOZUZsVVFuTlRSbHAxVlcxd1ZGSnJhM2hWTVZaclVqSldWMkl6Y0ZkaWJFcG9WbTV3Vm1ReGEzcGlSVTVvVWpBMU1GWnNaR3RYYkZsNFUycEtXazFIYUZSWmExcDNVa1pHZFZSdGFGZE5NVXA2VlRGV1lWRXlWbGhUV0d4T1YwVktjVlJYZUZkTlZtdDVUVlprYkdKVmJEVmFWVkpMV1ZaYWRXRkVWbGhTVjAxNFYxUktVMUl5VmtWUmJXaFhUVmQ0ZFZWNlFrOVJNbFpYWTBab1RsWXlhRzlXYm5CWFpERnNkRTFYY0dGTlZVcEdWRlZrYTFSc1ZYZFNibVJVVmxkbmQxZFVTazlqTWxaSlZteHNWRkpyY0hGWGExWmhUa1V4UjJKR2FGWmliSEJ4VlRCYVMxZEdaRmRhUkZKT1ZtNUNWVmRxU210aGF6RjBaVVJHV0dGcmJ6QlphMXBoWkVaS2RWUnRkRmROVmxvMlZURldhbVZIUmtoVVdIQldZbGhvY1ZsV1VsZGpiR3h4VTFSR2FWSllVa1ZWVjNCSFlXeEplRk50T1dGU1YxSllWV3BLVTFkRk5WaGpSWGhTVFVWd00xVXhWazlqYkc5M1pFWlNUMWRIZUdoV01GVXhUV3hzY21GSFJtbFNXR2hGVlZjMVUxZHNaRVpPU0dSWVlrZG9TMXBHWkU5a1JscDFVbTFHVjAxRVVqTlZNVlpQWTJzMGVHRkZiRlJpVlRWd1dXdG9iMDVXWkVaWmVrWmFUV3hLU0ZwVlVrTlhWazVIVW1wS1ZWTkhlRVJXYlRGT1pWWmFXRnBGTVdsaVJYQXlWako0YWsxSFNYZGtSbEpTWVd0S2NGcFdWa3BsUm14MFRsZDBiRlp0ZUZwVlZtUnJZV3N4YzFkdVJscGhhMnQ0V1ZSR2MxZFdUbkZXYTNCVVVtdHdNbFl5ZUdwTlYwWkhZa2hTYkZJemFIRmFWbFpIWkd4a1ZWTnNjR3RXVjNoSlYydGpOVlJXV2taTlZFNVZWbFpLUTFrd1dtOVRWazUwVkcxc2FWTkhaRE5XTUZadlZURnJlVlZyYUdsU2VrWkxWVlJLYTJKc2JITmFSV1JzWWxaS1NWWnROWE5VVjBweVRraGtXRlp0YUZSWmExWXdVa2RGZVZwR1JsZFNSVVV4VlRGV1lVMHlSbGhVYTJoWFlteGFhRlZxU2pSTlZtUnhVbXBPYUZaWGVFcGFWVkp2VjFaT1JtTkhjRnBpV0djd1ZGVmFiMU5XVm5SVWJYUlRZbTFrTTFkV1pEUlNNREZYWTBac1ZHRnNXazVaYkdRMFRteFdkRTVXWkd0V2JYUTJWbGMxUTJGVk1YRlZibHBVVmxkb1RGbHJaRTVsVlRsWlZHMTBhVlpzY0ZsV01WcHJUa1V4VjJOR2JGVmlWWEJMVldwS01HSnNaRWRVYTBwcFZsaENkMVZYTlhOWlZtUkdUbFJLV21FeWFHaFphMXBoWkVaS2RWUnRkRmROVm04eVZtcE9jMUV5VGtaaVJXUk9VMFphY2xWcVNtOWpNV3gwWWtWS2FsSlhlRVZaVkVwcllrVXhXV0ZFVmxoU1YwMTRWMVJLVDJNeVZrbFdiR3hVVW10d2NWZHJWbUZPUlRGSFlVVnNWbUp0ZUdoV01GcEtaVVpyZVUxRVFtRk5hM0JaVlcwMWQyRXhTWGhYYWxaVlVucFdWRmxxUm5kWFJUVklUMVY0VjFOR1NuRlhWRW8wVGtkU1YyRkZiRlppVlRWeVZXMDFibVF4Y0hOWGFsSnNWbTFvU1ZSc1pFOWhNVXAxV2pOa1lXSkdiekJhVmxwdlUwVTFXRlJ0Y0dsVFIyZDRWakJXYjFVeGEzbFZhMUpRVTBad1MxVnNVa1psUm14eVlVWk9hbEl3TlVsYVZXUTBVMnhKZDFkcVZsaGhhelZZV2tWYWQxZEZOVlZSYlhCc1ZsVndkbGRVU1hoV2JHOTRZa1pvWVZKNlZuRlpiRnBoWkZaa1YyRkdUbWxTYmtKRlZWYzFUMkZHV1hwVmJrNVVWbFp3UkZwV1pFcGxWVEZaVVcxd1RtSkdXWGhXTVZwclRrZE5kMkpGYUZOaWJYaHhXV3hXV2sxV1RsWmFSbVJxVFZoQ1dWUldaRFJoVjBwelUycGFXRkpYYUV4WFZFcExZekpXUlZGc2JGUlNhMncyVjFaV2EyTXlUWGhqUmxKU1ZucHNTMVZxU2pCTlJsSkhWR3RLYWxKWGVFcGFSV1JQWVcxS1NXRkVSbGhTVjJoVVYxUktVMUl5VmtWUmJIQlhUVlZ2ZVZkVVFtOVZNVmw0WWtab2JGSkZXbWhXVkVwcllteHJlVTFXWkd4aVZXdzFXbFZTUzFsV1duTmpSemxhWVRKb1dGbHJaRTVsUjAxNVdrZG9WazFGY0hKV1JWWlBVVEF4V0ZScmFGWmlWMmh5VldwR1lWTkdjRWRaZWtab1lUTlNSVlZYTlVOVGJFVjVaRWh3VkZaWFRqUlpWV1JPWld4V2RHVkhjR2hXUmxreFZqSjRhMlF5U2tkaE0zQldWakpTVFZacmFGTmhiR3Q1WlVSU2ExWnRhRXBXVnpGUFlURk9SVkp0Y0ZwTmJtY3dXa1phYjFOV1RuUlViV3hwVTBka00xWXdWbTlWTWxaWFkwWnNWbUZyV25GWmJGSlRZbXhzYzFwRlpHeGlWa3BKVm0wMWMxUlhTbkpUYWxaYVlXdHNORmt3WkU1bFZscFlUMVY0VjFOR1NuRlhWRW8wVGtkU1YyRkZiRlpoYlhoYVZUQldkMkZzYkhST1NHUmhUVWhTVmxwRlpFOWhiVXBKWVVSR1dGSlhhRXhYVkVwTFpGWk9kR1ZIZEZSU2JHOHhWMWN4YzFFeVRsZFdiR3hYWWxob2NWbHRNWHBOTVdSR1lVVjBXazFyY0RGVVZXUnJWRVphU1ZWdGNGcE5ibWN3V2taV2MyTXdNVlZpUjA1cFlWVndhMXBzUlRsUVZuaDFTV3d4T1Z4dUlsMTlcbiJdfQ==
