!function(t){t.fn.circliful=function(i,e){var a=t.extend({fgcolor:"#556b2f",bgcolor:"#eee",fill:!1,width:15,dimension:200,fontsize:15,percent:50,animationstep:1,iconsize:"20px",iconcolor:"#999",border:"default",complete:null},i);return this.each(function(){function e(i,e,a){t("<span></span>").appendTo(i).addClass(e).text(s).prepend(r).css({"line-height":a+"px","font-size":l.fontsize+"px"})}function n(i,e){t("<span></span>").appendTo(i).addClass("circle-info-half").css("line-height",l.dimension*e+"px")}function o(i){t.each(h,function(e,n){void 0!=i.data(n)?l[n]=i.data(n):l[n]=t(a).attr(n),"fill"==n&&void 0!=i.data("fill")&&(m=!0)})}function d(e){x.clearRect(0,0,v.width,v.height),x.beginPath(),x.arc(g,y,w,M,P,!1),x.lineWidth=l.width+1,x.strokeStyle=l.bgcolor,x.stroke(),m&&(x.fillStyle=l.fill,x.fill()),x.beginPath(),x.arc(g,y,w,-k,C*e-k,!1),"outline"==l.border?x.lineWidth=l.width+13:"inline"==l.border&&(x.lineWidth=l.width-13),x.strokeStyle=l.fgcolor,x.stroke(),p>z&&(z+=I,requestAnimationFrame(function(){d(Math.min(z,p)/100)},f)),z==p&&S&&"undefined"!=typeof i&&t.isFunction(i.complete)&&(i.complete(),S=!1)}var s,c,h=["fgcolor","bgcolor","fill","width","dimension","fontsize","animationstep","endPercent","icon","iconcolor","iconsize","border"],l={},r="",p=0,f=t(this),m=!1;if(f.addClass("circliful"),o(f),void 0!=f.data("text")&&(s=f.data("text"),void 0!=f.data("icon")&&(r=t("<i></i>").addClass("fa "+t(this).data("icon")).css({color:l.iconcolor,"font-size":l.iconsize})),void 0!=f.data("type")?(F=t(this).data("type"),"half"==F?e(f,"circle-text-half",l.dimension/1.45):e(f,"circle-text",l.dimension)):e(f,"circle-text",l.dimension)),void 0!=t(this).data("total")&&void 0!=t(this).data("part")){var u=t(this).data("total")/100;percent=(t(this).data("part")/u/100).toFixed(3),p=(t(this).data("part")/u).toFixed(3)}else void 0!=t(this).data("percent")?(percent=t(this).data("percent")/100,p=t(this).data("percent")):percent=a.percent/100;void 0!=t(this).data("info")&&(c=t(this).data("info"),void 0!=t(this).data("type")?(F=t(this).data("type"),"half"==F?n(f,.9):n(f,1.25)):n(f,1.25)),t(this).width(l.dimension+"px");var v=t("<canvas></canvas>").attr({width:l.dimension,height:l.dimension}).appendTo(t(this)).get(0),x=v.getContext("2d"),g=v.width/2,y=v.height/2,b=360*l.percent,w=(b*(Math.PI/180),v.width/2.5),P=2.3*Math.PI,M=0,z=0===l.animationstep?p:0,I=Math.max(l.animationstep,0),C=2*Math.PI,k=Math.PI/2,F="",S=!0;void 0!=t(this).data("type")&&(F=t(this).data("type"),"half"==F&&(P=2*Math.PI,M=3.13,C=1*Math.PI,k=Math.PI/.996)),d(z/100)})}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMvYW5pbWF0ZS1jaXJjbGUvanF1ZXJ5LmNpcmNsaWZ1bC5taW4uanMiXSwibmFtZXMiOlsidCIsImZuIiwiY2lyY2xpZnVsIiwiaSIsImUiLCJhIiwiZXh0ZW5kIiwiZmdjb2xvciIsImJnY29sb3IiLCJmaWxsIiwid2lkdGgiLCJkaW1lbnNpb24iLCJmb250c2l6ZSIsInBlcmNlbnQiLCJhbmltYXRpb25zdGVwIiwiaWNvbnNpemUiLCJpY29uY29sb3IiLCJib3JkZXIiLCJjb21wbGV0ZSIsInRoaXMiLCJlYWNoIiwiYXBwZW5kVG8iLCJhZGRDbGFzcyIsInRleHQiLCJzIiwicHJlcGVuZCIsInIiLCJjc3MiLCJsaW5lLWhlaWdodCIsImZvbnQtc2l6ZSIsImwiLCJuIiwibyIsImgiLCJkYXRhIiwiYXR0ciIsIm0iLCJkIiwieCIsImNsZWFyUmVjdCIsInYiLCJoZWlnaHQiLCJiZWdpblBhdGgiLCJhcmMiLCJnIiwieSIsInciLCJNIiwiUCIsImxpbmVXaWR0aCIsInN0cm9rZVN0eWxlIiwic3Ryb2tlIiwiZmlsbFN0eWxlIiwiayIsIkMiLCJwIiwieiIsIkkiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJNYXRoIiwibWluIiwiZiIsIlMiLCJpc0Z1bmN0aW9uIiwiYyIsImNvbG9yIiwiRiIsInUiLCJ0b0ZpeGVkIiwiZ2V0IiwiZ2V0Q29udGV4dCIsImIiLCJQSSIsIm1heCIsImpRdWVyeSJdLCJtYXBwaW5ncyI6IkNBQUMsU0FBU0EsR0FBR0EsRUFBRUMsR0FBR0MsVUFBVSxTQUFTQyxFQUFFQyxHQUFHLEdBQUlDLEdBQUVMLEVBQUVNLFFBQVFDLFFBQVEsVUFBVUMsUUFBUSxPQUFPQyxNQUFLLEVBQUdDLE1BQU0sR0FBR0MsVUFBVSxJQUFJQyxTQUFTLEdBQUdDLFFBQVEsR0FBR0MsY0FBYyxFQUFFQyxTQUFTLE9BQU9DLFVBQVUsT0FBT0MsT0FBTyxVQUFVQyxTQUFTLE1BQU1mLEVBQUcsT0FBT2dCLE1BQUtDLEtBQUssV0FBVyxRQUFT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RSxFQUFFSyxLQUFLYSxHQUFHbkIsRUFBRU0sS0FBS2EsR0FBRyxPQUFPbkMsRUFBRW1CLEVBQUUsU0FBU2tCIiwiZmlsZSI6InNjcmlwdHMvYW5pbWF0ZS1jaXJjbGUvanF1ZXJ5LmNpcmNsaWZ1bC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24odCl7dC5mbi5jaXJjbGlmdWw9ZnVuY3Rpb24oaSxlKXt2YXIgYT10LmV4dGVuZCh7Zmdjb2xvcjpcIiM1NTZiMmZcIixiZ2NvbG9yOlwiI2VlZVwiLGZpbGw6ITEsd2lkdGg6MTUsZGltZW5zaW9uOjIwMCxmb250c2l6ZToxNSxwZXJjZW50OjUwLGFuaW1hdGlvbnN0ZXA6MSxpY29uc2l6ZTpcIjIwcHhcIixpY29uY29sb3I6XCIjOTk5XCIsYm9yZGVyOlwiZGVmYXVsdFwiLGNvbXBsZXRlOm51bGx9LGkpO3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGksZSxhKXt0KFwiPHNwYW4+PC9zcGFuPlwiKS5hcHBlbmRUbyhpKS5hZGRDbGFzcyhlKS50ZXh0KHMpLnByZXBlbmQocikuY3NzKHtcImxpbmUtaGVpZ2h0XCI6YStcInB4XCIsXCJmb250LXNpemVcIjpsLmZvbnRzaXplK1wicHhcIn0pfWZ1bmN0aW9uIG4oaSxlKXt0KFwiPHNwYW4+PC9zcGFuPlwiKS5hcHBlbmRUbyhpKS5hZGRDbGFzcyhcImNpcmNsZS1pbmZvLWhhbGZcIikuY3NzKFwibGluZS1oZWlnaHRcIixsLmRpbWVuc2lvbiplK1wicHhcIil9ZnVuY3Rpb24gbyhpKXt0LmVhY2goaCxmdW5jdGlvbihlLG4pe3ZvaWQgMCE9aS5kYXRhKG4pP2xbbl09aS5kYXRhKG4pOmxbbl09dChhKS5hdHRyKG4pLFwiZmlsbFwiPT1uJiZ2b2lkIDAhPWkuZGF0YShcImZpbGxcIikmJihtPSEwKX0pfWZ1bmN0aW9uIGQoZSl7eC5jbGVhclJlY3QoMCwwLHYud2lkdGgsdi5oZWlnaHQpLHguYmVnaW5QYXRoKCkseC5hcmMoZyx5LHcsTSxQLCExKSx4LmxpbmVXaWR0aD1sLndpZHRoKzEseC5zdHJva2VTdHlsZT1sLmJnY29sb3IseC5zdHJva2UoKSxtJiYoeC5maWxsU3R5bGU9bC5maWxsLHguZmlsbCgpKSx4LmJlZ2luUGF0aCgpLHguYXJjKGcseSx3LC1rLEMqZS1rLCExKSxcIm91dGxpbmVcIj09bC5ib3JkZXI/eC5saW5lV2lkdGg9bC53aWR0aCsxMzpcImlubGluZVwiPT1sLmJvcmRlciYmKHgubGluZVdpZHRoPWwud2lkdGgtMTMpLHguc3Ryb2tlU3R5bGU9bC5mZ2NvbG9yLHguc3Ryb2tlKCkscD56JiYoeis9SSxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKXtkKE1hdGgubWluKHoscCkvMTAwKX0sZikpLHo9PXAmJlMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBpJiZ0LmlzRnVuY3Rpb24oaS5jb21wbGV0ZSkmJihpLmNvbXBsZXRlKCksUz0hMSl9dmFyIHMsYyxoPVtcImZnY29sb3JcIixcImJnY29sb3JcIixcImZpbGxcIixcIndpZHRoXCIsXCJkaW1lbnNpb25cIixcImZvbnRzaXplXCIsXCJhbmltYXRpb25zdGVwXCIsXCJlbmRQZXJjZW50XCIsXCJpY29uXCIsXCJpY29uY29sb3JcIixcImljb25zaXplXCIsXCJib3JkZXJcIl0sbD17fSxyPVwiXCIscD0wLGY9dCh0aGlzKSxtPSExO2lmKGYuYWRkQ2xhc3MoXCJjaXJjbGlmdWxcIiksbyhmKSx2b2lkIDAhPWYuZGF0YShcInRleHRcIikmJihzPWYuZGF0YShcInRleHRcIiksdm9pZCAwIT1mLmRhdGEoXCJpY29uXCIpJiYocj10KFwiPGk+PC9pPlwiKS5hZGRDbGFzcyhcImZhIFwiK3QodGhpcykuZGF0YShcImljb25cIikpLmNzcyh7Y29sb3I6bC5pY29uY29sb3IsXCJmb250LXNpemVcIjpsLmljb25zaXplfSkpLHZvaWQgMCE9Zi5kYXRhKFwidHlwZVwiKT8oRj10KHRoaXMpLmRhdGEoXCJ0eXBlXCIpLFwiaGFsZlwiPT1GP2UoZixcImNpcmNsZS10ZXh0LWhhbGZcIixsLmRpbWVuc2lvbi8xLjQ1KTplKGYsXCJjaXJjbGUtdGV4dFwiLGwuZGltZW5zaW9uKSk6ZShmLFwiY2lyY2xlLXRleHRcIixsLmRpbWVuc2lvbikpLHZvaWQgMCE9dCh0aGlzKS5kYXRhKFwidG90YWxcIikmJnZvaWQgMCE9dCh0aGlzKS5kYXRhKFwicGFydFwiKSl7dmFyIHU9dCh0aGlzKS5kYXRhKFwidG90YWxcIikvMTAwO3BlcmNlbnQ9KHQodGhpcykuZGF0YShcInBhcnRcIikvdS8xMDApLnRvRml4ZWQoMykscD0odCh0aGlzKS5kYXRhKFwicGFydFwiKS91KS50b0ZpeGVkKDMpfWVsc2Ugdm9pZCAwIT10KHRoaXMpLmRhdGEoXCJwZXJjZW50XCIpPyhwZXJjZW50PXQodGhpcykuZGF0YShcInBlcmNlbnRcIikvMTAwLHA9dCh0aGlzKS5kYXRhKFwicGVyY2VudFwiKSk6cGVyY2VudD1hLnBlcmNlbnQvMTAwO3ZvaWQgMCE9dCh0aGlzKS5kYXRhKFwiaW5mb1wiKSYmKGM9dCh0aGlzKS5kYXRhKFwiaW5mb1wiKSx2b2lkIDAhPXQodGhpcykuZGF0YShcInR5cGVcIik/KEY9dCh0aGlzKS5kYXRhKFwidHlwZVwiKSxcImhhbGZcIj09Rj9uKGYsLjkpOm4oZiwxLjI1KSk6bihmLDEuMjUpKSx0KHRoaXMpLndpZHRoKGwuZGltZW5zaW9uK1wicHhcIik7dmFyIHY9dChcIjxjYW52YXM+PC9jYW52YXM+XCIpLmF0dHIoe3dpZHRoOmwuZGltZW5zaW9uLGhlaWdodDpsLmRpbWVuc2lvbn0pLmFwcGVuZFRvKHQodGhpcykpLmdldCgwKSx4PXYuZ2V0Q29udGV4dChcIjJkXCIpLGc9di53aWR0aC8yLHk9di5oZWlnaHQvMixiPTM2MCpsLnBlcmNlbnQsdz0oYiooTWF0aC5QSS8xODApLHYud2lkdGgvMi41KSxQPTIuMypNYXRoLlBJLE09MCx6PTA9PT1sLmFuaW1hdGlvbnN0ZXA/cDowLEk9TWF0aC5tYXgobC5hbmltYXRpb25zdGVwLDApLEM9MipNYXRoLlBJLGs9TWF0aC5QSS8yLEY9XCJcIixTPSEwO3ZvaWQgMCE9dCh0aGlzKS5kYXRhKFwidHlwZVwiKSYmKEY9dCh0aGlzKS5kYXRhKFwidHlwZVwiKSxcImhhbGZcIj09RiYmKFA9MipNYXRoLlBJLE09My4xMyxDPTEqTWF0aC5QSSxrPU1hdGguUEkvLjk5NikpLGQoei8xMDApfSl9fShqUXVlcnkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk5qY21sd2RITXZZVzVwYldGMFpTMWphWEpqYkdVdmFuRjFaWEo1TG1OcGNtTnNhV1oxYkM1dGFXNHVhbk1pWFN3aWJtRnRaWE1pT2xzaWRDSXNJbVp1SWl3aVkybHlZMnhwWm5Wc0lpd2lhU0lzSW1VaUxDSmhJaXdpWlhoMFpXNWtJaXdpWm1kamIyeHZjaUlzSW1KblkyOXNiM0lpTENKbWFXeHNJaXdpZDJsa2RHZ2lMQ0prYVcxbGJuTnBiMjRpTENKbWIyNTBjMmw2WlNJc0luQmxjbU5sYm5RaUxDSmhibWx0WVhScGIyNXpkR1Z3SWl3aWFXTnZibk5wZW1VaUxDSnBZMjl1WTI5c2IzSWlMQ0ppYjNKa1pYSWlMQ0pqYjIxd2JHVjBaU0lzSW5Sb2FYTWlMQ0psWVdOb0lpd2lZWEJ3Wlc1a1ZHOGlMQ0poWkdSRGJHRnpjeUlzSW5SbGVIUWlMQ0p6SWl3aWNISmxjR1Z1WkNJc0luSWlMQ0pqYzNNaUxDSnNhVzVsTFdobGFXZG9kQ0lzSW1admJuUXRjMmw2WlNJc0ltd2lMQ0p1SWl3aWJ5SXNJbWdpTENKa1lYUmhJaXdpWVhSMGNpSXNJbTBpTENKa0lpd2llQ0lzSW1Oc1pXRnlVbVZqZENJc0luWWlMQ0pvWldsbmFIUWlMQ0ppWldkcGJsQmhkR2dpTENKaGNtTWlMQ0puSWl3aWVTSXNJbmNpTENKTklpd2lVQ0lzSW14cGJtVlhhV1IwYUNJc0luTjBjbTlyWlZOMGVXeGxJaXdpYzNSeWIydGxJaXdpWm1sc2JGTjBlV3hsSWl3aWF5SXNJa01pTENKd0lpd2llaUlzSWtraUxDSnlaWEYxWlhOMFFXNXBiV0YwYVc5dVJuSmhiV1VpTENKTllYUm9JaXdpYldsdUlpd2laaUlzSWxNaUxDSnBjMFoxYm1OMGFXOXVJaXdpWXlJc0ltTnZiRzl5SWl3aVJpSXNJblVpTENKMGIwWnBlR1ZrSWl3aVoyVjBJaXdpWjJWMFEyOXVkR1Y0ZENJc0ltSWlMQ0pRU1NJc0ltMWhlQ0lzSW1wUmRXVnllU0pkTENKdFlYQndhVzVuY3lJNklrTkJRVU1zVTBGQlUwRXNSMEZCUjBFc1JVRkJSVU1zUjBGQlIwTXNWVUZCVlN4VFFVRlRReXhGUVVGRlF5eEhRVUZITEVkQlFVbERMRWRCUVVWTUxFVkJRVVZOTEZGQlFWRkRMRkZCUVZFc1ZVRkJWVU1zVVVGQlVTeFBRVUZQUXl4TlFVRkxMRVZCUVVkRExFMUJRVTBzUjBGQlIwTXNWVUZCVlN4SlFVRkpReXhUUVVGVExFZEJRVWRETEZGQlFWRXNSMEZCUjBNc1kwRkJZeXhGUVVGRlF5eFRRVUZUTEU5QlFVOURMRlZCUVZVc1QwRkJUME1zVDBGQlR5eFZRVUZWUXl4VFFVRlRMRTFCUVUxbUxFVkJRVWNzVDBGQlQyZENMRTFCUVV0RExFdEJRVXNzVjBGQlZ5eFJRVUZUYUVJc1IwRkJSVVFzUlVGQlJVTXNSVUZCUlVNc1IwRkJSMHdzUlVGQlJTeHBRa0ZCYVVKeFFpeFRRVUZUYkVJc1IwRkJSMjFDTEZOQlFWTnNRaXhIUVVGSGJVSXNTMEZCUzBNc1IwRkJSME1zVVVGQlVVTXNSMEZCUjBNc1MwRkJTME1zWTBGQlkzWkNMRVZCUVVVc1MwRkJTM2RDTEZsQlFWbERMRVZCUVVWc1FpeFRRVUZUTEU5QlFVOHNVVUZCVTIxQ0xFZEJRVVUxUWl4RlFVRkZReXhIUVVGSFNpeEZRVUZGTEdsQ1FVRnBRbkZDTEZOQlFWTnNRaXhIUVVGSGJVSXNVMEZCVXl4dlFrRkJiMEpMTEVsQlFVa3NZMEZCWTBjc1JVRkJSVzVDTEZWQlFWVlFMRVZCUVVVc1RVRkJUU3hSUVVGVE5FSXNSMEZCUlRkQ0xFZEJRVWRJTEVWQlFVVnZRaXhMUVVGTFlTeEZRVUZGTEZOQlFWTTNRaXhGUVVGRk1rSXNSMEZCUnl4UlFVRlJOVUlzUlVGQlJTdENMRXRCUVV0SUxFZEJRVWRFTEVWQlFVVkRMRWRCUVVjMVFpeEZRVUZGSzBJc1MwRkJTMGdzUjBGQlIwUXNSVUZCUlVNc1IwRkJSeTlDTEVWQlFVVkxMRWRCUVVjNFFpeExRVUZMU2l4SFFVRkhMRkZCUVZGQkxFZEJRVWNzVVVGQlVUVkNMRVZCUVVVclFpeExRVUZMTEZWQlFWVkZMRWRCUVVVc1MwRkJUU3hSUVVGVFF5eEhRVUZGYWtNc1IwRkJSMnRETEVWQlFVVkRMRlZCUVZVc1JVRkJSU3hGUVVGRlF5eEZRVUZGT1VJc1RVRkJUVGhDTEVWQlFVVkRMRkZCUVZGSUxFVkJRVVZKTEZsQlFWbEtMRVZCUVVWTExFbEJRVWxETEVWQlFVVkRMRVZCUVVWRExFVkJRVVZETEVWQlFVVkRMRWRCUVVVc1IwRkJTVllzUlVGQlJWY3NWVUZCVlc1Q0xFVkJRVVZ3UWl4TlFVRk5MRVZCUVVVMFFpeEZRVUZGV1N4WlFVRlpjRUlzUlVGQlJYUkNMRkZCUVZFNFFpeEZRVUZGWVN4VFFVRlRaaXhKUVVGSlJTeEZRVUZGWXl4VlFVRlZkRUlzUlVGQlJYSkNMRXRCUVVzMlFpeEZRVUZGTjBJc1VVRkJVVFpDTEVWQlFVVkpMRmxCUVZsS0xFVkJRVVZMTEVsQlFVbERMRVZCUVVWRExFVkJRVVZETEVkQlFVZFBMRVZCUVVWRExFVkJRVVZzUkN4RlFVRkZhVVFzUjBGQlJTeEhRVUZKTEZkQlFWZDJRaXhGUVVGRllpeFBRVUZQY1VJc1JVRkJSVmNzVlVGQlZXNUNMRVZCUVVWd1FpeE5RVUZOTEVkQlFVY3NWVUZCVlc5Q0xFVkJRVVZpTEZOQlFWTnhRaXhGUVVGRlZ5eFZRVUZWYmtJc1JVRkJSWEJDTEUxQlFVMHNTVUZCU1RSQ0xFVkJRVVZaTEZsQlFWbHdRaXhGUVVGRmRrSXNVVUZCVVN0Q0xFVkJRVVZoTEZOQlFWTkpMRVZCUVVWRExFbEJRVWxCTEVkQlFVZERMRVZCUVVWRExITkNRVUZ6UWl4WFFVRlhja0lzUlVGQlJYTkNMRXRCUVV0RExFbEJRVWxLTEVWQlFVVkVMRWRCUVVjc1RVRkJUVTBzU1VGQlNVd3NSMEZCUjBRc1IwRkJSMDhzUjBGQlJ5eHRRa0ZCYjBJelJDeEpRVUZIU0N4RlFVRkZLMFFzVjBGQlZ6VkVMRVZCUVVWbExGbEJRVmxtTEVWQlFVVmxMRmRCUVZjMFF5eEhRVUZGTEVkQlFVa3NSMEZCU1hSRExFZEJRVVYzUXl4RlFVRkZMMElzUjBGQlJ5eFZRVUZWTEZWQlFWVXNUMEZCVHl4UlFVRlJMRmxCUVZrc1YwRkJWeXhuUWtGQlowSXNZVUZCWVN4UFFVRlBMRmxCUVZrc1YwRkJWeXhWUVVGVlNDeExRVUZMU2l4RlFVRkZMRWRCUVVjMlFpeEZRVUZGTEVWQlFVVk5MRVZCUVVVM1JDeEZRVUZGYlVJc1RVRkJUV2xDTEVkQlFVVXNRMEZCUnl4SlFVRkhlVUlzUlVGQlJYWkRMRk5CUVZNc1lVRkJZVlVzUlVGQlJUWkNMRWRCUVVjc1VVRkJVVUVzUlVGQlJUTkNMRXRCUVVzc1ZVRkJWVllzUlVGQlJYRkRMRVZCUVVVelFpeExRVUZMTEZGQlFWRXNVVUZCVVRKQ0xFVkJRVVV6UWl4TFFVRkxMRlZCUVZWU0xFVkJRVVV4UWl4RlFVRkZMRmRCUVZkelFpeFRRVUZUTEUxQlFVMTBRaXhGUVVGRmJVSXNUVUZCVFdVc1MwRkJTeXhUUVVGVFVDeExRVUZMYzBNc1RVRkJUVzVETEVWQlFVVmtMRlZCUVZWaExGbEJRVmxETEVWQlFVVm1MRmxCUVZrc1VVRkJVVGhETEVWQlFVVXpRaXhMUVVGTExGTkJRVk5uUXl4RlFVRkZiRVVzUlVGQlJXMUNMRTFCUVUxbExFdEJRVXNzVVVGQlVTeFJRVUZSWjBNc1JVRkJSVGxFTEVWQlFVVjVSQ3hGUVVGRkxHMUNRVUZ0UWk5Q0xFVkJRVVZ1UWl4VlFVRlZMRTFCUVUxUUxFVkJRVVY1UkN4RlFVRkZMR05CUVdNdlFpeEZRVUZGYmtJc1dVRkJXVkFzUlVGQlJYbEVMRVZCUVVVc1kwRkJZeTlDTEVWQlFVVnVRaXhaUVVGWkxGRkJRVkZZTEVWQlFVVnRRaXhOUVVGTlpTeExRVUZMTEZWQlFWVXNVVUZCVVd4RExFVkJRVVZ0UWl4TlFVRk5aU3hMUVVGTExGRkJRVkVzUTBGQlF5eEhRVUZKYVVNc1IwRkJSVzVGTEVWQlFVVnRRaXhOUVVGTlpTeExRVUZMTEZOQlFWTXNSMEZCU1hKQ0xGVkJRVk5pTEVWQlFVVnRRaXhOUVVGTlpTeExRVUZMTEZGQlFWRnBReXhGUVVGRkxFdEJRVXRETEZGQlFWRXNSMEZCUjJJc1IwRkJSM1pFTEVWQlFVVnRRaXhOUVVGTlpTeExRVUZMTEZGQlFWRnBReXhIUVVGSFF5eFJRVUZSTEU5QlFWRXNVMEZCVVhCRkxFVkJRVVZ0UWl4TlFVRk5aU3hMUVVGTExGbEJRVmx5UWl4UlFVRlJZaXhGUVVGRmJVSXNUVUZCVFdVc1MwRkJTeXhYUVVGWExFbEJRVWx4UWl4RlFVRkZka1FzUlVGQlJXMUNMRTFCUVUxbExFdEJRVXNzV1VGQldYSkNMRkZCUVZGU0xFVkJRVVZSTEZGQlFWRXNSMEZCU1N4VFFVRlJZaXhGUVVGRmJVSXNUVUZCVFdVc1MwRkJTeXhWUVVGVk9FSXNSVUZCUldoRkxFVkJRVVZ0UWl4TlFVRk5aU3hMUVVGTExGRkJRVkVzVVVGQlVXeERMRVZCUVVWdFFpeE5RVUZOWlN4TFFVRkxMRk5CUVZOblF5eEZRVUZGYkVVc1JVRkJSVzFDTEUxQlFVMWxMRXRCUVVzc1VVRkJVU3hSUVVGUlowTXNSVUZCUlc1RExFVkJRVVU0UWl4RlFVRkZMRWxCUVVrNVFpeEZRVUZGT0VJc1JVRkJSU3hQUVVGUE9VSXNSVUZCUlRoQ0xFVkJRVVVzVDBGQlR6ZEVMRVZCUVVWdFFpeE5RVUZOVkN4TlFVRk5iMElzUlVGQlJXNUNMRlZCUVZVc1MwRkJUU3hKUVVGSk5rSXNSMEZCUlhoRExFVkJRVVVzY1VKQlFYRkNiVU1zVFVGQlRYcENMRTFCUVUxdlFpeEZRVUZGYmtJc1ZVRkJWVGhDTEU5QlFVOVlMRVZCUVVWdVFpeFpRVUZaVlN4VFFVRlRja0lzUlVGQlJXMUNMRTlCUVU5clJDeEpRVUZKTEVkQlFVY3ZRaXhGUVVGRlJTeEZRVUZGT0VJc1YwRkJWeXhOUVVGTk1VSXNSVUZCUlVvc1JVRkJSVGxDTEUxQlFVMHNSVUZCUlcxRExFVkJRVVZNTEVWQlFVVkRMRTlCUVU4c1JVRkJSVGhDTEVWQlFVVXNTVUZCU1hwRExFVkJRVVZxUWl4UlFVRlJhVU1zUjBGQlIzbENMRWRCUVVkYUxFdEJRVXRoTEVkQlFVY3NTMEZCUzJoRExFVkJRVVU1UWl4TlFVRk5MRXRCUVV0elF5eEZRVUZGTEVsQlFVbFhMRXRCUVV0aExFZEJRVWQ2UWl4RlFVRkZMRVZCUVVWVExFVkJRVVVzU1VGQlNURkNMRVZCUVVWb1FpeGpRVUZqZVVNc1JVRkJSU3hGUVVGRlJTeEZRVUZGUlN4TFFVRkxZeXhKUVVGSk0wTXNSVUZCUldoQ0xHTkJRV01zUjBGQlIzZERMRVZCUVVVc1JVRkJSVXNzUzBGQlMyRXNSMEZCUjI1Q0xFVkJRVVZOTEV0QlFVdGhMRWRCUVVjc1JVRkJSVTRzUlVGQlJTeEhRVUZIU2l4SFFVRkZMRU5CUVVjc1UwRkJVVGxFTEVWQlFVVnRRaXhOUVVGTlpTeExRVUZMTEZWQlFWVm5ReXhGUVVGRmJFVXNSVUZCUlcxQ0xFMUJRVTFsTEV0QlFVc3NVVUZCVVN4UlFVRlJaME1zU1VGQlNXeENMRVZCUVVVc1JVRkJSVmNzUzBGQlMyRXNSMEZCUjNwQ0xFVkJRVVVzUzBGQlMwOHNSVUZCUlN4RlFVRkZTeXhMUVVGTFlTeEhRVUZIYmtJc1JVRkJSVTBzUzBGQlMyRXNSMEZCUnl4UFFVRlBia01zUlVGQlJXMUNMRVZCUVVVc1UwRkJVMnRDSWl3aVptbHNaU0k2SW5OamNtbHdkSE12WVc1cGJXRjBaUzFqYVhKamJHVXZhbkYxWlhKNUxtTnBjbU5zYVdaMWJDNXRhVzR1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SWhablZ1WTNScGIyNG9kQ2w3ZEM1bWJpNWphWEpqYkdsbWRXdzlablZ1WTNScGIyNG9hU3hsS1h0MllYSWdZVDEwTG1WNGRHVnVaQ2g3Wm1kamIyeHZjanBjSWlNMU5UWmlNbVpjSWl4aVoyTnZiRzl5T2x3aUkyVmxaVndpTEdacGJHdzZJVEVzZDJsa2RHZzZNVFVzWkdsdFpXNXphVzl1T2pJd01DeG1iMjUwYzJsNlpUb3hOU3h3WlhKalpXNTBPalV3TEdGdWFXMWhkR2x2Ym5OMFpYQTZNU3hwWTI5dWMybDZaVHBjSWpJd2NIaGNJaXhwWTI5dVkyOXNiM0k2WENJak9UazVYQ0lzWW05eVpHVnlPbHdpWkdWbVlYVnNkRndpTEdOdmJYQnNaWFJsT201MWJHeDlMR2twTzNKbGRIVnliaUIwYUdsekxtVmhZMmdvWm5WdVkzUnBiMjRvS1h0bWRXNWpkR2x2YmlCbEtHa3NaU3hoS1h0MEtGd2lQSE53WVc0K1BDOXpjR0Z1UGx3aUtTNWhjSEJsYm1SVWJ5aHBLUzVoWkdSRGJHRnpjeWhsS1M1MFpYaDBLSE1wTG5CeVpYQmxibVFvY2lrdVkzTnpLSHRjSW14cGJtVXRhR1ZwWjJoMFhDSTZZU3RjSW5CNFhDSXNYQ0ptYjI1MExYTnBlbVZjSWpwc0xtWnZiblJ6YVhwbEsxd2ljSGhjSW4wcGZXWjFibU4wYVc5dUlHNG9hU3hsS1h0MEtGd2lQSE53WVc0K1BDOXpjR0Z1UGx3aUtTNWhjSEJsYm1SVWJ5aHBLUzVoWkdSRGJHRnpjeWhjSW1OcGNtTnNaUzFwYm1adkxXaGhiR1pjSWlrdVkzTnpLRndpYkdsdVpTMW9aV2xuYUhSY0lpeHNMbVJwYldWdWMybHZiaXBsSzF3aWNIaGNJaWw5Wm5WdVkzUnBiMjRnYnlocEtYdDBMbVZoWTJnb2FDeG1kVzVqZEdsdmJpaGxMRzRwZTNadmFXUWdNQ0U5YVM1a1lYUmhLRzRwUDJ4YmJsMDlhUzVrWVhSaEtHNHBPbXhiYmwwOWRDaGhLUzVoZEhSeUtHNHBMRndpWm1sc2JGd2lQVDF1SmlaMmIybGtJREFoUFdrdVpHRjBZU2hjSW1acGJHeGNJaWttSmlodFBTRXdLWDBwZldaMWJtTjBhVzl1SUdRb1pTbDdlQzVqYkdWaGNsSmxZM1FvTUN3d0xIWXVkMmxrZEdnc2RpNW9aV2xuYUhRcExIZ3VZbVZuYVc1UVlYUm9LQ2tzZUM1aGNtTW9aeXg1TEhjc1RTeFFMQ0V4S1N4NExteHBibVZYYVdSMGFEMXNMbmRwWkhSb0t6RXNlQzV6ZEhKdmEyVlRkSGxzWlQxc0xtSm5ZMjlzYjNJc2VDNXpkSEp2YTJVb0tTeHRKaVlvZUM1bWFXeHNVM1I1YkdVOWJDNW1hV3hzTEhndVptbHNiQ2dwS1N4NExtSmxaMmx1VUdGMGFDZ3BMSGd1WVhKaktHY3NlU3gzTEMxckxFTXFaUzFyTENFeEtTeGNJbTkxZEd4cGJtVmNJajA5YkM1aWIzSmtaWEkvZUM1c2FXNWxWMmxrZEdnOWJDNTNhV1IwYUNzeE16cGNJbWx1YkdsdVpWd2lQVDFzTG1KdmNtUmxjaVltS0hndWJHbHVaVmRwWkhSb1BXd3VkMmxrZEdndE1UTXBMSGd1YzNSeWIydGxVM1I1YkdVOWJDNW1aMk52Ykc5eUxIZ3VjM1J5YjJ0bEtDa3NjRDU2SmlZb2VpczlTU3h5WlhGMVpYTjBRVzVwYldGMGFXOXVSbkpoYldVb1puVnVZM1JwYjI0b0tYdGtLRTFoZEdndWJXbHVLSG9zY0Nrdk1UQXdLWDBzWmlrcExIbzlQWEFtSmxNbUpsd2lkVzVrWldacGJtVmtYQ0loUFhSNWNHVnZaaUJwSmlaMExtbHpSblZ1WTNScGIyNG9hUzVqYjIxd2JHVjBaU2ttSmlocExtTnZiWEJzWlhSbEtDa3NVejBoTVNsOWRtRnlJSE1zWXl4b1BWdGNJbVpuWTI5c2IzSmNJaXhjSW1KblkyOXNiM0pjSWl4Y0ltWnBiR3hjSWl4Y0luZHBaSFJvWENJc1hDSmthVzFsYm5OcGIyNWNJaXhjSW1admJuUnphWHBsWENJc1hDSmhibWx0WVhScGIyNXpkR1Z3WENJc1hDSmxibVJRWlhKalpXNTBYQ0lzWENKcFkyOXVYQ0lzWENKcFkyOXVZMjlzYjNKY0lpeGNJbWxqYjI1emFYcGxYQ0lzWENKaWIzSmtaWEpjSWwwc2JEMTdmU3h5UFZ3aVhDSXNjRDB3TEdZOWRDaDBhR2x6S1N4dFBTRXhPMmxtS0dZdVlXUmtRMnhoYzNNb1hDSmphWEpqYkdsbWRXeGNJaWtzYnlobUtTeDJiMmxrSURBaFBXWXVaR0YwWVNoY0luUmxlSFJjSWlrbUppaHpQV1l1WkdGMFlTaGNJblJsZUhSY0lpa3NkbTlwWkNBd0lUMW1MbVJoZEdFb1hDSnBZMjl1WENJcEppWW9jajEwS0Z3aVBHaytQQzlwUGx3aUtTNWhaR1JEYkdGemN5aGNJbVpoSUZ3aUszUW9kR2hwY3lrdVpHRjBZU2hjSW1samIyNWNJaWtwTG1OemN5aDdZMjlzYjNJNmJDNXBZMjl1WTI5c2IzSXNYQ0ptYjI1MExYTnBlbVZjSWpwc0xtbGpiMjV6YVhwbGZTa3BMSFp2YVdRZ01DRTlaaTVrWVhSaEtGd2lkSGx3WlZ3aUtUOG9SajEwS0hSb2FYTXBMbVJoZEdFb1hDSjBlWEJsWENJcExGd2lhR0ZzWmx3aVBUMUdQMlVvWml4Y0ltTnBjbU5zWlMxMFpYaDBMV2hoYkdaY0lpeHNMbVJwYldWdWMybHZiaTh4TGpRMUtUcGxLR1lzWENKamFYSmpiR1V0ZEdWNGRGd2lMR3d1WkdsdFpXNXphVzl1S1NrNlpTaG1MRndpWTJseVkyeGxMWFJsZUhSY0lpeHNMbVJwYldWdWMybHZiaWtwTEhadmFXUWdNQ0U5ZENoMGFHbHpLUzVrWVhSaEtGd2lkRzkwWVd4Y0lpa21Kblp2YVdRZ01DRTlkQ2gwYUdsektTNWtZWFJoS0Z3aWNHRnlkRndpS1NsN2RtRnlJSFU5ZENoMGFHbHpLUzVrWVhSaEtGd2lkRzkwWVd4Y0lpa3ZNVEF3TzNCbGNtTmxiblE5S0hRb2RHaHBjeWt1WkdGMFlTaGNJbkJoY25SY0lpa3ZkUzh4TURBcExuUnZSbWw0WldRb015a3NjRDBvZENoMGFHbHpLUzVrWVhSaEtGd2ljR0Z5ZEZ3aUtTOTFLUzUwYjBacGVHVmtLRE1wZldWc2MyVWdkbTlwWkNBd0lUMTBLSFJvYVhNcExtUmhkR0VvWENKd1pYSmpaVzUwWENJcFB5aHdaWEpqWlc1MFBYUW9kR2hwY3lrdVpHRjBZU2hjSW5CbGNtTmxiblJjSWlrdk1UQXdMSEE5ZENoMGFHbHpLUzVrWVhSaEtGd2ljR1Z5WTJWdWRGd2lLU2s2Y0dWeVkyVnVkRDFoTG5CbGNtTmxiblF2TVRBd08zWnZhV1FnTUNFOWRDaDBhR2x6S1M1a1lYUmhLRndpYVc1bWIxd2lLU1ltS0dNOWRDaDBhR2x6S1M1a1lYUmhLRndpYVc1bWIxd2lLU3gyYjJsa0lEQWhQWFFvZEdocGN5a3VaR0YwWVNoY0luUjVjR1ZjSWlrL0tFWTlkQ2gwYUdsektTNWtZWFJoS0Z3aWRIbHdaVndpS1N4Y0ltaGhiR1pjSWowOVJqOXVLR1lzTGprcE9tNG9aaXd4TGpJMUtTazZiaWhtTERFdU1qVXBLU3gwS0hSb2FYTXBMbmRwWkhSb0tHd3VaR2x0Wlc1emFXOXVLMXdpY0hoY0lpazdkbUZ5SUhZOWRDaGNJanhqWVc1MllYTStQQzlqWVc1MllYTStYQ0lwTG1GMGRISW9lM2RwWkhSb09td3VaR2x0Wlc1emFXOXVMR2hsYVdkb2REcHNMbVJwYldWdWMybHZibjBwTG1Gd2NHVnVaRlJ2S0hRb2RHaHBjeWtwTG1kbGRDZ3dLU3g0UFhZdVoyVjBRMjl1ZEdWNGRDaGNJakprWENJcExHYzlkaTUzYVdSMGFDOHlMSGs5ZGk1b1pXbG5hSFF2TWl4aVBUTTJNQ3BzTG5CbGNtTmxiblFzZHowb1lpb29UV0YwYUM1UVNTOHhPREFwTEhZdWQybGtkR2d2TWk0MUtTeFFQVEl1TXlwTllYUm9MbEJKTEUwOU1DeDZQVEE5UFQxc0xtRnVhVzFoZEdsdmJuTjBaWEEvY0Rvd0xFazlUV0YwYUM1dFlYZ29iQzVoYm1sdFlYUnBiMjV6ZEdWd0xEQXBMRU05TWlwTllYUm9MbEJKTEdzOVRXRjBhQzVRU1M4eUxFWTlYQ0pjSWl4VFBTRXdPM1p2YVdRZ01DRTlkQ2gwYUdsektTNWtZWFJoS0Z3aWRIbHdaVndpS1NZbUtFWTlkQ2gwYUdsektTNWtZWFJoS0Z3aWRIbHdaVndpS1N4Y0ltaGhiR1pjSWowOVJpWW1LRkE5TWlwTllYUm9MbEJKTEUwOU15NHhNeXhEUFRFcVRXRjBhQzVRU1N4clBVMWhkR2d1VUVrdkxqazVOaWtwTEdRb2VpOHhNREFwZlNsOWZTaHFVWFZsY25rcE8xeHVMeThqSUhOdmRYSmpaVTFoY0hCcGJtZFZVa3c5WkdGMFlUcGhjSEJzYVdOaGRHbHZiaTlxYzI5dU8yTm9ZWEp6WlhROWRYUm1PRHRpWVhObE5qUXNaWGxLTWxwWVNucGhWemwxU1dwdmVreERTbnBpTTFaNVdUSldla2xxY0dKSmJrNXFZMjFzZDJSSVRYWlpWelZ3WWxkR01GcFRNV3BoV0VwcVlrZFZkbUZ1UmpGYVdFbzFURzFPY0dOdFRuTmhWMW94WWtNMWRHRlhOSFZoYmsxcFdGTjNhV0p0Um5SYVdFMXBUMnh6YVdSRFNYTkpiVnAxU1dsM2FWa3liSGxaTW5od1dtNVdjMGxwZDJsaFUwbHpTVzFWYVV4RFNtaEphWGRwV2xob01GcFhOV3RKYVhkcFdtMWthbUl5ZUhaamFVbHpTVzFLYmxreU9YTmlNMGxwVEVOS2JXRlhlSE5KYVhkcFpESnNhMlJIWjJsTVEwcHJZVmN4YkdKdVRuQmlNalJwVEVOS2JXSXlOVEJqTW13MldsTkpjMGx1UW14amJVNXNZbTVSYVV4RFNtaGliV3gwV1ZoU2NHSXlOWHBrUjFaM1NXbDNhV0ZYVG5aaWJrNXdaVzFWYVV4RFNuQlpNamwxV1RJNWMySXpTV2xNUTBwcFlqTkthMXBZU1dsTVEwcHFZakl4ZDJKSFZqQmFVMGx6U1c1U2IyRllUV2xNUTBwc1dWZE9iMGxwZDJsWldFSjNXbGMxYTFaSE9HbE1RMHBvV2tkU1JHSkhSbnBqZVVselNXNVNiR1ZJVVdsTVEwcDZTV2wzYVdOSVNteGpSMVoxV2tOSmMwbHVTV2xNUTBwcVl6Tk5hVXhEU25OaFZ6VnNURmRvYkdGWFpHOWtRMGx6U1cxYWRtSnVVWFJqTW13MldsTkpjMGx0ZDJsTVEwcDFTV2wzYVdKNVNYTkpiV2RwVEVOS2ExbFlVbWhKYVhkcFdWaFNNR05wU1hOSmJUQnBURU5LYTBscGQybGxRMGx6U1cxT2MxcFhSbmxWYlZacVpFTkpjMGx1V1dsTVEwcHZXbGRzYm1GSVVXbE1RMHBwV2xka2NHSnNRbWhrUjJkcFRFTkthR050VFdsTVEwcHVTV2wzYVdWVFNYTkpibU5wVEVOS1RrbHBkMmxWUTBselNXMTRjR0p0VmxoaFYxSXdZVU5KYzBsdVRqQmpiVGx5V2xaT01HVlhlR3hKYVhkcFl6TlNlV0l5ZEd4SmFYZHBXbTFzYzJKR1RqQmxWM2hzU1dsM2FXRjVTWE5KYTAxcFRFTktkMGxwZDJsbGFVbHpTV3RyYVV4RFNubGFXRVl4V2xoT01GRlhOWEJpVjBZd1lWYzVkVkp1U21oaVYxVnBURU5LVGxsWVVtOUphWGRwWWxkc2RVbHBkMmxhYVVselNXeE5hVXhEU25Cak1Gb3hZbTFPTUdGWE9YVkphWGRwV1hsSmMwbHRUblppUnpsNVNXbDNhVkpwU1hOSmJsVnBURU5LTUdJd1duQmxSMVpyU1dsM2FWb3lWakJKYVhkcFdqSldNRkV5T1hWa1IxWTBaRU5KYzBsdFNXbE1RMHBSVTFOSmMwbHRNV2hsUTBselNXMXdVbVJYVm5sbFUwcGtURU5LZEZsWVFuZGhWelZ1WTNsSk5rbHJUa0pSVlUxelZUQkdRbFV3UlhOU01FWkNVakJGYzFKVlJrSlNWVTF6VWpCR1FsSXdUWE5XVlVaQ1ZsTjRWRkZWUmxSUmVYaEdVVlZHUmxGNWVFaFJWVVpJVEVWa1FsRlZiRVJNUldSQ1VWVldUVXhGVmtKUlZWWk9URVpHUWxGV1JrUk1Sa1pDVVZaRmMxWlZSa0pXVlUxelZWVkdRbFZUZUZCUlZVWlFVWGw0VGxGVlJreE1SVlpDVVZWa1JFeEZNVUpSVlRCelVqQkdRbEl3VFhOV1ZVWkNWbE40U2xGVlJrcFJlWGhVVVZWR1ZFeEZaRUpSVldSRVRFWkdRbEZXUlhOU01FWkNVakJOYzFrd1JrSlplWGhHVVZWR1JsRjVlRlJSVlVaVVRFVTVRbEZWT1VSTVJsWkNVVlpWYzFRd1JrSlVNRTF6VkRCR1FsUjVlRlpSVlVaV1VYbDRWRkZWUmxSTVJURkNVVlV4YlV4RlZrSlJWV056VkRCR1FsUXlaRU5NUlRGQ1VWVjBSRXhGZEVKUlZYTnpWakJHUWxaNWVGSlJWVVpVWVVWSmMxSXdSa0pTVlZGelVsVkdRbEpWVFhOU1ZVWkNVbFZOYzFJd1JrSlNNSGR6VWxWR1FsSlRlSEJSYTBaQ1lWVktlRkZwZUZSUlZVWlVZa1ZKYzFJd1JrSlNNakZEVEVaT1FsRldUbk5SYVhoSVVWVkdTR0pWU1hOVE1FWkNVekJOYzFJd1JrSlNNRTF6VlZWR1FsVlZUWE5TTUVaQ1VqQk5jMU13UmtKVE1FMXpXVEJHUWxreldrTk1SVlpDVVZWVmMxTXdSa0pUTTJSRFRFWnNRbEZXYkVSTVJWWkNVVlZXYzFGcGVGUlJWVVpVVEVVNVFsRlZPSE5WVlVaQ1ZUSXhRMHhGWkVKUlZWVXhVV2w0UmxGVlJrWlJlWGhJVVZWR1NGTnBlRVpSVlVaR1RFZHNRMUZWUm5CUmJrWkRURVpPUWxGV1RuTlJhWGhJVVZWR1NHSlZTWE5WTUVaQ1ZYbDRkbEZyUmtKaU1FcE1URVZzUWxGVmEzTlpNRVpDV1RCamMxSlZSa0pTVnpWRFRFWldRbEZXVmxGTVJWWkNVVlZWYzFSVlJrSlVVM2hTVVZWR1ZFNUZTWE5TTUVaQ1VsUmtRMHhGWkVKUlZXUkpURVZXUWxGVlZuWlJhWGhNVVZWR1RGbFRlRVpSVlVaR1RFWk9RbEZXVFROUmFYaEdVVlZHUmsxclNYTlNNRVpDVW5sNFVsRlZSbEpPVlVselVsVkdRbEpUZEVOTVJYUkNVVlYwU1V4RlpFSlJWV1JGVEVWV1FsRlZWa1JNUldSQ1VWVmpNVkZwZUVaUlZVWkdTekJKYzFNd1JrSlRNR2R6VWpCR1FsSXdVWE5TVlVaQ1VsVk5jMUl3UmtKU2VUbERURVZXUWxGVlZreE1SV1JDVVZWak5GRnBlRXhSVlVaTVUybDRTRkZWUmtoTVJrWkNVVlpHUWt4RlpFSlJWV056VlZWR1FsVlVWa05NUlZaQ1VWVlZjbEZwZUV4UlZVWk1URVpXUWxGV1ZrWk1SV1JDVVZWVmMxTXdSa0pVVTNoU1VWVkdWRkY1ZUVoUlZVWkdZV3ROYzFJd1JrSlNNblJFVEVWV1FsRlZWa1JNUmxaQ1VWWlZjMUpWUmtKU1UzaEdVVlZHUmxGNWVFWlJWVVpHVDFWSmMxUlZSa0pVVkdoRFRFVldRbEZWVmtSTVJrWkNVVlpHU1V4RlZrSlJWVlpLVEVac1FsRldiRXRNUlZaQ1VWVldURXhGYkVKUlZXeEVURVZXUWxGVlZrUk1SVlpDVVZWV1JFeEZWa0pSVlZaRVRFVldRbEZWVmtSTVJXUkNVVlZWYzFJd1JrSlRWbGx6VWxWR1FsSldZM05XVlVaQ1ZsYzFRMHhGVmtKUlZWWjNVV2w0VGxGVlJrNU1SVlpDVVZWVk1GRnBlRVpSVlVaR1YxTjRXbEZWUmxwalJVbHpVbFZHUWxKWVVrTk1Sa1pDVVZaRk5GRnBlRVpSVlVaR1dWTjRWRkZWUmxSYWFYaEtVVlZHU2xKVGVFWlJWVVpHV1hsNFZsRlZSbFprUlVselVsVkdRbEpZU2tOTVJYUkNVVlZ6TWxGcGVFWlJWVVpHVGpCSmMxVlZSa0pWVkZwRFRFVldRbEZWVmtwTVJteENVVlpzUzB4RlZrSlJWVlpNVEVWc1FsRlZiRVJNUlZaQ1VWVldSRXhGVmtKUlZWWkVURVZrUWxGVlpGQk1SVlpDVVZWV1JFeEZWa0pSVlZaelVrTjRSbEZWUmtaaFZWRnpVakJHUWxKVGVFaFJWVVpLVEVaa1FsRldaREpSYVhoR1VWVkdSbGxwZUZCUlZVWlFZMVZKYzFKVlJrSlNWbU56VmxWR1FsWlhOVU5NUlZaQ1VWVldkMUZwZUU1UlZVWk9URVZrUWxGVlkzTldWVVpDVmxjNVEweEZWa0pSVlZacFRFWk9RbEZXVG5oUmFYaEdVVlZHUmxaNWVGWlJWVVpXWW10SmMxSlZSa0pTV0VKRFRFVXhRbEZWTUhOVFZVWkNVMVJTUTB4RlZrSlJWVlphVEVac1FsRldiSGRSYVhoR1VWVkdSbVJyU1hOVlZVWkNWVk4wUTB4RlZrSlJWVlpvVEVaT1FsRldUa3BNUlZaQ1VWVldSRXhGYkVKUlZXeENURVZrUWxGVlpFUk1SVlpDVVZWV1JFeElUa05SVlVaNlVXbDRXRkZWUmxoamEwbHpVbFZHUWxKWVRrTk1SWFJDVVZWMFJFeEZiRUpSVld4TFRFVldRbEZWVmtWTVJXUkNVVlZqYzFSVlJrSlVWVEJ6VTFWR1FsTlZkM05TTUVaQ1VqQlJjMUl3UmtKU01EaHpVakJHUWxKNWVIUlJhMFpDWWpCSmVsSkRlRXBSVlVaSVUwTjRSbEZWUmtaTE1GRnpWakJHUWxaNlZrVk1SVlpDVVZWV2JFeEdiRUpSVm14dFRFVldRbEZWVm14TVJtUkNVVlpqTUZGNWVFaFJWVVpHVEVWa1FsRlZhM05TTUVaQ1UxaFNSRXhGWkVKUlZWWXpVWGw0UmxGVlJrWk1NRWx6VWpCR1FsSjVlRlpSVlVaV1RFWldRbEZXVlhOVU1FWkNWSGw0VWxGVlJsSk1SbXhDVVZacmMxWXdSa0pXZVhodVVXdEdRbG93U1hOWlZVWkNXVk40VUZGVlJsQk1SbXhDVVZacmMxWXdSa0pXZVhoV1VWVkdWbE5EZUV4UlZVWk1VMmw0UmxGVlJrWk1SV1JDVVZWak1sRnBlRVpSVlVaR1RFVldRbEZWVms1TVJWWkNVVlZWTTFKRGVFWlJWVVpHWWxWSmMxUlZSa0pVVjJ4RFRFVmtRbEZWVlhOUk1FWkNVbmw0U2xGVlJraGxWVWx6VWxWR1FsSllXa1JNUms1Q1VWWk5jMWxWUmtKWlZsVnpVbFZHUWxKVVdrTk1SV1JDVVZWamMxVlZSa0pWVlVWelVsVkdRbEpVVGtOTVJYUkNVVlZ6YzFaVlJrSldWbGx6VWxWR1FsSllSa1JNUlZaQ1VWVlZlbEZwZUV4UlZVWk1URVpHUWxGV1JYTlZWVVpDVlZSS1EweEZWa0pSVlZWNlVXbDRURkZWUmt4TVJsWkNVVlpXVTB4RlZrSlJWVlY0VVdsNFJsRlZSa1pNUm1SQ1VWWmtlbEZwZUZSUlZVWlVURVV4UWxGVk1UQlJhWGhHVVZWR1JtSlZTWE5VVlVaQ1ZGZFZjMU13UmtKVGVYaFVVVlZHVkZWRGVFeFJWVVpNWXpCTmMxUlZSa0pVVnpWRVRFVldRbEZWVm10TVJsWkNVVlpXYUV4R2JFSlJWbXhFVEVWV1FsRlZWbTFNUm14Q1VWWnJjMVZWUmtKVlZHaEVURVZXUWxGVlZYcFJhWGhNVVZWR1RFeEdUa0pSVms1dVVYbDRSbEZWUmtaaVJWVnpVbFZHUWxKWE1VTk1SVEZDVVZVeGJFeEZkRUpSVlhOelZWVkdRbFZUZUZKUlZVWlNXakJOYzFKVlJrSlNWR3hGVEVWV1FsRlZWalZTUTNoR1VWVkdSa3hITVVOUlZVWjBVV2s1UTB4RlZrSlJWVloxVVdsNFZsRlZSbFpNUlRGQ1VWVXhVVXhGVmtKUlZWWTFVa040UmxGVlJrWk1SMDVDVVZkTmRsRnBlRVpSVlVaR1ltdEpjMWRWUmtKWFZrRnpVbFZHUWxKWWJFVk1SVlpDVVZWVmMxa3dSa0paZVRsRFRFVldRbEZWVm5WUmFYaGFVVlZHV2t4R1JrSlJWa1paVEVWV1FsRlZWblJSYVhoT1VWVkdUbHBUZUV4UlZVWk1URVpXUWxGV1ZYTlZWVVpDVlZkNFJFeEZWa0pSVlZaMFVXbDRUbEZWUms1YVUzaE1VVlZHVEV4R1JrSlJWa1Z6VVRCR1FsRjVlRWhSVlVaS1lWVk5jMUl3UmtKU1Z6VkdURVZXUWxGVlZuUlJhWGhPVVZWR1RscFRlRXhSVlVaTVRFWk9RbEZXVFhOU01FWkNVMWhLUTB4R1ZrSlJWazVwVEVWV1FsRlZWblJSYVhoT1VWVkdUbHBUZUV4UlZVWk1URVpHUWxGV1JuQlJlWGhHVVZWR1JreEZkRUpSVlhSRVRFWkdRbEZXUlhOU01FWkNVakpKYzFJd1JrSlNNMXBGVEVWV1FsRlZWblJSYVhoT1VWVkdUbHBUZUV4UlZVWk1URVpHUWxGV1JuQlJlWGhJVVZWR1NGRjVlRkpSVlVaU1RFVTVRbEZXUlhOVk1FWkNWVmhDUmt4RlZrSlJWVlowVVdsNFRsRlZSazVhVTNoTVVWVkdURXhHYkVKUlZteDVVV2w0VWxGVlJsSlphWGhHVVZWR1JtSlZTWE5VVlVaQ1ZGZFZjMU13UmtKVGVYaFlVVlZHV0V4RmJFSlJWV3g0VVdsNFJsRlZSa1prYTFGelVsVkdRbEpYTVVOTVJURkNVVlV4YkV4RmRFSlJWWE56VjFWR1FsZFlTa05NUmtaQ1VWWkdVMHhGVmtKUlZWWlNURVpHUWxGV1JYTlNNRVpDVTFONFZGRlZSbEpaYVhoR1VWVkdSbUpWU1hOVVZVWkNWRmRWYzFNd1JrSlRlWGhXVVZWR1ZrOUZTWE5TVlVaQ1VsZG9Sa3hGVmtKUlZWWjBVV2w0VGxGVlJrNWFVM2hNVVZWR1RFeEdSa0pSVmtWelZWVkdRbFZYZUVSTVJWWkNVVlZXZEZGcGVFNVJWVVpPV2xONFRGRlZSa3hNUms1Q1VWWk9ibEY1ZUVaUlZVWkdZa1ZWYzFKVlJrSlNWekZEVEVVeFFsRlZNV3hNUlhSQ1VWVnpjMVZWUmtKVlUzaFNVVlZHVWxvd1RYTlNWVVpDVWxjMVJFeEZWa0pSVlZVMFVXbDRSbEZWUmtaTVJXeENVVlZyTlZGcGVFWlJWVVpHVDBWSmMxSlZSa0pTVTNoUVVWVkdVRTlWU1hOU1ZVWkNVbFJvUTB4RlZrSlJWVlZ6VkRCR1FsUjZaRVZNUlZaQ1VWVldkRkZwZUU1UlZVWk9Wa040VGxGVlJrNWlNRWx6VWxWR1FsSlhOVU5NUmxaQ1VWWlZjMU13UmtKVVUzaEtVVlZHU2s1clNYTlNNRVpDVWxob1JFeEZWa0pSVlZWelkxVktRbEZZUmtOaVZVMXpWRlZHUWxSWWNFTk1SVEZDVVZVeGRsRnBlRVpSVlVaR1ltdEpjMVpWUmtKV1ZHaERURVU1UWxGVk9WbE1SVlpDVVZWV2RWRnBlRnBSVlVaYVZsTjRWRkZWUmxSamEwbHpVbFZHUWxKWE1VTk1SVGxDVVZVNWNsSkRlRXBSVlVaS1RFVmtRbEZWWTNaUmFYaEdVVlZHUmxKVGVFWlJWVVpHVDBWSmMxWXdSa0pXZVhoT1VWVkdUazFWU1hOU1ZVWkNVbFZ2YzFKVlJrSlNWR3hEVEVVeFFsRlZNSE5TVlVaQ1VsY3hSRXhGVmtKUlZWWk5URVZXUWxGVlZrUk1SVGxDVVZVNGMxSlZSa0pTVkdoRFRFVldRbEZWVlhOVFZVWkNVMWh3UkV4RlZrSlJWVlp4VVdsNFVsRlZSbEpoVlUxelVqQkdRbEl6YkVOTVJXUkNVVlZrWVV4RmRFSlJWWFJvVEVWa1FsRlZZM05UTUVaQ1V6Sm9SRXhGVmtKUlZWVTFVV2w0VGxGVlJrNU1SWFJDVVZWMGVsRjVlRVpSVlVaR1RFVnNRbEZWYkZoTVJYUkNVVlYwYUV4RlpFSlJWV1EyVVdsNFJsRlZSa1pNUlZaQ1VWVldWRXhGVmtKUlZWVnpVMVZHUWxOVVJrTk1SVlpDVVZWV2IxRnBlR3BSVlVacVpWVk5jMUpWUmtKU1UzaEdVVlZHUmxKVGVFWlJWVVpHVWxONFRGRlZSa3haZVhoS1VWVkdTazB3VFhOU1ZVWkNVbGRvUTB4SFRrSlJWMDF6VWpCR1FsSXpaRVJNUlZaQ1VWVlZjMUpWUmtKU1ZYTnpVekJHUWxNeVJYTlNNRVpDVWpJMVEweEZWa0pSVlZaT1RFVjBRbEZWZEdoTVJXUkNVVlZqYzFKVlJrSlNWVFJ6VWxWR1FsSlRlRWhSVlVaSVUybDRTRkZWUmtaTVJVNUNVVlZqYzFVd1JrSlZWR3hGVEVWV1FsRlZWblJSYVhoT1VWVkdUbHBUZUV4UlZVWk1URVpXUWxGV1ZtNVJlWGhHVVZWR1JtSkZWWE5TVlVaQ1VsY3hRMHhGTVVKUlZURnNURVYwUWxGVmMzTlZWVVpDVlZONFVsRlZSbEphTUUxelUxVkdRbE5YZUVOTVJWWkNVVlZWYzFKVlJrSlNWbU56VXpCR1FsTXlSWE5TTUVaQ1VqTndRMHhGVmtKUlZWVnpVekJHUWxNd09ITlNWVVpDVWxONFJsRlZSa1pUZVhoTVVWVkdURmxUZUVoUlZVWklZbXRKYzFKVlJrSlNWVEJ6VXpCR1FsTXlSWE5TTUVaQ1VubDRVRkZWUmxCaWEwMXpVbFZHUWxKWE1VTk1SVlpDVVZWVmMxVXdSa0pWTW5SRFNXbDNhVnB0YkhOYVUwazJTVzVPYW1OdGJIZGtTRTEyV1ZjMWNHSlhSakJhVXpGcVlWaEthbUpIVlhaaGJrWXhXbGhLTlV4dFRuQmpiVTV6WVZkYU1XSkROWFJoVnpSMVlXNU5hVXhEU25waU0xWjVXVEpXZWxFeU9YVmtSMVoxWkVOSk5sZDVTV2hhYmxaMVdUTlNjR0l5Tkc5a1EydzNaRU0xYldKcE5XcGhXRXBxWWtkc2JXUlhkemxhYmxaMVdUTlNjR0l5Tkc5aFUzaHNTMWgwTWxsWVNXZFpWREV3VEcxV05HUkhWblZhUTJnM1dtMWthbUl5ZUhaamFuQmpTV2xOTVU1VVdtbE5iVnBqU1dsNGFWb3lUblppUnpsNVQyeDNhVWt5Vm14YVZuZHBURWRhY0dKSGR6WkpWRVZ6WkRKc2EyUkhaelpOVkZWeldrZHNkRnBYTlhwaFZ6bDFUMnBKZDAxRGVHMWlNalV3WXpKc05scFViM2hPVTNoM1dsaEthbHBYTlRCUGFsVjNURWRHZFdGWE1XaGtSMngyWW01T01GcFlRVFpOVTNod1dUSTVkV015YkRaYVZIQmpTV3BKZDJOSWFHTkphWGh3V1RJNWRWa3lPWE5pTTBrMldFTkphazlVYXpWWVEwbHpXVzA1ZVZwSFZubFBiSGRwV2tkV2JWbFlWbk5rUm5kcFRFZE9kbUpZUW5OYVdGSnNUMjAxTVdKSGVEbE1SMnR3VHpOS2JHUklWbmxpYVVJd1lVZHNla3h0Vm1oWk1tZHZXbTVXZFZrelVuQmlNalJ2UzFoMGJXUlhOV3BrUjJ4MlltbENiRXRIYTNOYVUzaG9TMWgwTUV0R2QybFFTRTUzV1ZjMEsxQkRPWHBqUjBaMVVHeDNhVXRUTldoalNFSnNZbTFTVldKNWFIQkxVelZvV2tkU1JHSkhSbnBqZVdoc1MxTTFNRnBZYURCTFNFMXdURzVDZVZwWVFteGliVkZ2WTJscmRWa3pUbnBMU0hSalNXMTRjR0p0VlhSaFIxWndXakpvTUZoRFNUWlpVM1JqU1c1Q05GaERTWE5ZUTBwdFlqSTFNRXhZVG5CbGJWWmpTV3B3YzB4dFduWmlibEo2WVZod2JFc3hkMmxqU0doalNXNHdjR1pYV2pGaWJVNHdZVmM1ZFVsSE5HOWhVM2hzUzFoME1FdEdkMmxRU0U1M1dWYzBLMUJET1hwalIwWjFVR3gzYVV0VE5XaGpTRUpzWW0xU1ZXSjVhSEJMVXpWb1drZFNSR0pIUm5wamVXaGpTVzFPY0dOdFRuTmFVekZ3WW0xYWRreFhhR2hpUjFwalNXbHJkVmt6VG5wTFJuZHBZa2RzZFZwVE1XOWFWMnh1WVVoU1kwbHBlSE5NYlZKd1lsZFdkV015YkhaaWFYQnNTekYzYVdOSWFHTkphV3c1V201V2RWa3pVbkJpTWpSbllubG9jRXRZZERCTWJWWm9XVEpuYjJGRGVHMWtWelZxWkVkc2RtSnBhR3hNUnpSd1pUTmFkbUZYVVdkTlEwVTVZVk0xYTFsWVVtaExSelJ3VURKNFltSnNNRGxoVXpWcldWaFNhRXRITkhCUGJYaGlZbXd3T1dSRGFHaExVelZvWkVoU2VVdEhOSEJNUm5kcFdtMXNjMkpHZDJsUVZERjFTbWxhTW1JeWJHdEpSRUZvVUZkcmRWcEhSakJaVTJoalNXMWFjR0pIZUdOSmFXdHRTbWxvZEZCVFJYZExXREJ3WmxkYU1XSnRUakJoVnpsMVNVZFJiMXBUYkRkbFF6VnFZa2RXYUdOc1NteFpNMUZ2VFVOM2QweElXWFZrTW14clpFZG5jMlJwTlc5YVYyeHVZVWhSY0V4SVozVlpiVlp1WVZjMVVWbFlVbTlMUTJ0elpVTTFhR050VFc5YWVYZzFURWhqYzFSVGVGRk1RMFY0UzFONE5FeHRlSEJpYlZaWVlWZFNNR0ZFTVhOTWJtUndXa2hTYjB0NlJYTmxRelY2WkVoS2RtRXlWbFJrU0d4eldsUXhjMHh0U201Wk1qbHpZak5KYzJWRE5YcGtTRXAyWVRKVmIwdFRlSFJLYVZsdlpVTTFiV0ZYZUhOVk0xSTFZa2RWT1dKRE5XMWhWM2h6VEVobmRWcHRiSE5pUTJkd1MxTjRORXh0U214YU1teDFWVWRHTUdGRFozQk1TR2QxV1ZoS2FrdEhZM05sVTNnelRFTXhja3hGVFhGYVV6RnlURU5GZUV0VGVHTkpiVGt4WkVkNGNHSnRWbU5KYWpBNVlrTTFhV0l6U210YVdFa3ZaVU0xYzJGWE5XeFdNbXhyWkVkbk9XSkROVE5oVjFJd1lVTnplRTE2Y0dOSmJXeDFZa2RzZFZwV2QybFFWREZ6VEcxS2RtTnRVbXhqYVZsdFMwaG5kV0pIYkhWYVZtUndXa2hTYjFCWGQzVmtNbXhyWkVkbmRFMVVUWEJNU0dkMVl6TlNlV0l5ZEd4Vk0xSTFZa2RWT1dKRE5XMWFNazUyWWtjNWVVeElaM1ZqTTFKNVlqSjBiRXREYTNOalJEVTJTbWxaYjJWcGN6bFRVM2g1V2xoR01WcFlUakJSVnpWd1lsZEdNR0ZYT1hWU2JrcG9ZbGRWYjFwdVZuVlpNMUp3WWpJMGIwdFlkR3RMUlRGb1pFZG5kV0pYYkhWTFNHOXpZME5yZGsxVVFYZExXREJ6V21scmNFeEliemxRV0VGdFNteE5iVXBzZDJsa1Z6VnJXbGRhY0dKdFZtdFlRMGxvVUZoU05XTkhWblphYVVKd1NtbGFNRXh0YkhwU2JsWjFXVE5TY0dJeU5HOWhVelZxWWpJeGQySkhWakJhVTJ0dFNtbG9jRXh0VG5aaVdFSnpXbGhTYkV0RGEzTlZlakJvVFZOc09XUnRSbmxKU0UxeldYbDRiMUJXZEdOSmJWcHVXVEk1YzJJelNtTkphWGhqU1cxS2Jsa3lPWE5pTTBwalNXbDRZMGx0V25CaVIzaGpTV2w0WTBsdVpIQmFTRkp2V0VOSmMxaERTbXRoVnpGc1ltNU9jR0l5TldOSmFYaGpTVzFhZG1KdVVucGhXSEJzV0VOSmMxaERTbWhpYld4MFdWaFNjR0l5Tlhwa1IxWjNXRU5KYzFoRFNteGliVkpSV2xoS2FscFhOVEJZUTBseldFTktjRmt5T1hWWVEwbHpXRU5LY0ZreU9YVlpNamx6WWpOS1kwbHBlR05KYld4cVlqSTFlbUZZY0d4WVEwbHpXRU5LYVdJelNtdGFXRXBqU1d3d2MySkVNVGRtVTNoNVVGWjNhVmhEU1hOalJEQjNURWRaT1dSRGFEQmhSMng2UzFONGRGQlRSWGhQTW14dFMwZFpkVmxYVW10Uk1uaG9Zek5OYjFoRFNtcGhXRXBxWWtkc2JXUlhlR05KYVd0ellubG9iVXRUZURKaU1teHJTVVJCYUZCWFdYVmFSMFl3V1ZOb1kwbHVVbXhsU0ZKalNXbHJiVXBwYUhwUVYxbDFXa2RHTUZsVGFHTkpibEpzWlVoU1kwbHBhM05rYlRsd1drTkJkMGxVTVcxTWJWSm9aRWRGYjFoRFNuQlpNamwxV0VOSmNFcHBXVzlqYWpFd1MwWjNhVkJIYXl0UVF6bHdVR3gzYVV0VE5XaGFSMUpFWWtkR2VtTjVhR05KYlZwb1NVWjNhVXN6VVc5a1IyaHdZM2xyZFZwSFJqQlpVMmhqU1cxc2FtSXlOV05KYVd0d1RHMU9lbU41YURkWk1qbHpZak5KTm1KRE5YQlpNamwxV1RJNWMySXpTWE5ZUTBwdFlqSTFNRXhZVG5CbGJWWmpTV3B3YzB4dGJHcGlNalY2WVZod2JHWlRhM0JNU0ZwMllWZFJaMDFEUlRsYWFUVnJXVmhTYUV0R2QybGtTR3gzV2xaM2FVdFVPRzlTYWpFd1MwaFNiMkZZVFhCTWJWSm9aRWRGYjFoRFNqQmxXRUpzV0VOSmNFeEdkMmxoUjBaeldteDNhVkJVTVVkUU1sVnZXbWw0WTBsdFRuQmpiVTV6V2xNeE1GcFlhREJNVjJob1lrZGFZMGxwZUhOTWJWSndZbGRXZFdNeWJIWmlhVGg0VEdwUk1VdFVjR3hMUjFseldFTkthbUZZU21waVIxVjBaRWRXTkdSR2QybE1SM2QxV2tkc2RGcFhOWHBoVnpsMVMxTnJObHBUYUcxTVJuZHBXVEpzZVZreWVHeE1XRkpzWlVoU1kwbHBlSE5NYlZKd1lsZFdkV015YkhaaWFXdHdURWhhZG1GWFVXZE5RMFU1WkVOb01HRkhiSHBMVXpWcldWaFNhRXRHZDJsa1J6a3dXVmQ0WTBscGEyMUtibHAyWVZkUlowMURSVGxrUTJnd1lVZHNla3RUTld0WldGSm9TMFozYVdOSFJubGtSbmRwUzFOc04yUnRSbmxKU0ZVNVpFTm9NR0ZIYkhwTFV6VnJXVmhTYUV0R2QybGtSemt3V1ZkNFkwbHBhM1pOVkVGM1R6TkNiR050VG14aWJsRTVTMGhSYjJSSGFIQmplV3QxV2tkR01GbFRhR05KYmtKb1kyNVNZMGxwYTNaa1V6aDRUVVJCY0V4dVVuWlNiV3cwV2xkUmIwMTVhM05qUkRCdlpFTm9NR0ZIYkhwTFV6VnJXVmhTYUV0R2QybGpSMFo1WkVaM2FVdFRPVEZMVXpVd1lqQmFjR1ZIVm10TFJFMXdabGRXYzJNeVZXZGtiVGx3V2tOQmQwbFVNVEJMU0ZKdllWaE5jRXh0VW1oa1IwVnZXRU5LZDFwWVNtcGFWelV3V0VOSmNGQjVhSGRhV0VwcVdsYzFNRkJZVVc5a1IyaHdZM2xyZFZwSFJqQlpVMmhqU1c1Q2JHTnRUbXhpYmxKalNXbHJkazFVUVhkTVNFRTVaRU5vTUdGSGJIcExVelZyV1ZoU2FFdEdkMmxqUjFaNVdUSldkV1JHZDJsTFUyczJZMGRXZVZreVZuVmtSREZvVEc1Q2JHTnRUbXhpYmxGMlRWUkJkMDh6V25aaFYxRm5UVU5GT1dSRGFEQmhSMng2UzFNMWExbFlVbWhMUm5kcFlWYzFiV0l4ZDJsTFUxbHRTMGROT1dSRGFEQmhSMng2UzFNMWExbFlVbWhMUm5kcFlWYzFiV0l4ZDJsTFUzZ3lZakpzYTBsRVFXaFFXRkZ2WkVkb2NHTjVhM1ZhUjBZd1dWTm9ZMGx1VWpWalIxWmpTV2xyTDB0RldUbGtRMmd3WVVkc2VrdFROV3RaV0ZKb1MwWjNhV1JJYkhkYVZuZHBTMU40WTBsdGFHaGlSMXBqU1dvd09WSnFPWFZMUjFselRHcHJjRTl0Tkc5YWFYZDRUR3BKTVV0VGF6WmlhV2h0VEVSRmRVMXFWWEJMVTNnd1MwaFNiMkZZVFhCTWJtUndXa2hTYjB0SGQzVmFSMngwV2xjMWVtRlhPWFZMTVhkcFkwaG9ZMGxwYXpka2JVWjVTVWhaT1dSRGFHTkphbmhxV1ZjMU1sbFlUU3RRUXpscVdWYzFNbGxZVFN0WVEwbHdURzFHTUdSSVNXOWxNMlJ3V2toU2IwOXRkM1ZhUjJ4MFdsYzFlbUZYT1hWTVIyaHNZVmRrYjJSRWNITk1iVkp3WWxkV2RXTXliSFppYmpCd1RHMUdkMk5IVm5WYVJsSjJTMGhSYjJSSGFIQmplV3R3VEcxa2JHUkRaM2RMVTNnMFVGaFpkVm95VmpCUk1qbDFaRWRXTkdSRGFHTkpha3ByV0VOSmNFeEhZemxrYVRVellWZFNNR0ZET0hsTVNHczVaR2sxYjFwWGJHNWhTRkYyVFdsNGFWQlVUVEpOUTNCelRHNUNiR050VG14aWJsRnpaSG93YjFscGIyOVVWMFl3WVVNMVVWTlRPSGhQUkVGd1RFaFpkV1F5Ykd0a1IyZDJUV2swTVV0VGVGRlFWRWwxVFhsd1RsbFlVbTlNYkVKS1RFVXdPVTFEZURaUVZFRTVVRlF4YzB4dFJuVmhWekZvWkVkc2RtSnVUakJhV0VFdlkwUnZkMHhGYXpsVVYwWXdZVU0xZEZsWVoyOWlRelZvWW0xc2RGbFlVbkJpTWpWNlpFZFdkMHhFUVhCTVJVMDVUV2x3VGxsWVVtOU1iRUpLVEVkek9WUlhSakJoUXpWUlUxTTRlVXhGV1RsWVEwcGpTV2w0VkZCVFJYZFBNMXAyWVZkUlowMURSVGxrUTJnd1lVZHNla3RUTld0WldGSm9TMFozYVdSSWJIZGFWbmRwUzFOWmJVdEZXVGxrUTJnd1lVZHNla3RUTld0WldGSm9TMFozYVdSSWJIZGFWbmRwUzFONFkwbHRhR2hpUjFwalNXb3dPVkpwV1cxTFJrRTVUV2x3VGxsWVVtOU1iRUpLVEVVd09VMTVOSGhOZVhoRVVGUkZjVlJYUmpCaFF6VlJVMU40Y2xCVk1XaGtSMmQxVlVWcmRreHFhelZPYVd0d1RFZFJiMlZwT0hoTlJFRndabE5zT1daVGFIRlZXRlpzWTI1cmNFOHhlSFZNZVRocVNVaE9kbVJZU21wYVZURm9ZMGhDY0dKdFpGWlZhM2M1V2tkR01GbFVjR2hqU0VKellWZE9hR1JIYkhaaWFUbHhZekk1ZFU4eVRtOVpXRXA2V2xoUk9XUllVbTFQUkhScFdWaE9iRTVxVVhOYVdHeExUV3h3V1ZOdWNHaFdlbXd4VTFkd2RtVnJlRVJUYm5CcFRURmFOVmRVU2xkbGEyeHhZMGRLU21Kck5YRlpNakZ6WkRKU1NWUllXbHBXZWxaM1dXeGtSMDFHY0ZSTlYzQm9WMFZ3Y1ZsclpGWmtiVVoxVW1wR1lWZEZiekZVUnpGUFkwZE9kRlJ1VG1oV01XOTRXV3ROTVdSSFJsaE9TRlpvWW1zeGNGZEdUak5oVjBwMFVtNVNZVmRGTVhCVU1uaDZZVmRTUkZOWVRrcGlWbkF4VTFkc00yRldhM2xpU0d4YVRXNW9kMWR0TlZkak1HeHdaREpzYUZVd2JIcFRWekZXWVZWNFJGTnRhRXBoV0dSd1YyeG9iMDFHY0ZoT1YzUktZVmhrY0ZkdE1XdGhiVWw1WlVoYWFtRlZiSHBUVnpGTFlteHJlVTlZVG1sTk1HeHdWRVZPUzJKWFJsaGxTRTVLWVZoa2NGcEVTbk5oTWxKSVdqSnNUVkV3Y0hKWlZtTjRZa2RLZFZSdVFtbE5hbEp3VkVWT1MySlhTWGxPVkVKcVRXMTNNbGRzVGtwak1HeDFVVzE0YW1KVk5YTlpiVFZTWVZWNFJGTnRhR2xpVjNnd1YxWm9VMk5IU1hsT1dIQnJVakZhTTFOWGJETmhWMFpZVkc1YWFXSnJOWGRhVnpGV1lWVjRSRk51UWxwTmFtd3hWMVJKTldNeVNYcFRWMnhOVVRCd2NGbHFUa3RoTVhCWlUxZHNUVkV3Y0hGWmFrbDRaREpLU0ZacVFtRlZNR3g2VTFjMVUySXlSbGxVVjJ4TlVUQndjMWRXWkU5aU1HeHdaREpzV2xkRlNqTlhiR014WVRGYVNFOUhiRTFSTUhCdlYydGtVMUpIU2toU2JuQnFaVlZzZWxOWE5WTmlSMVpKVlZkc1RWRXdjRFpUVjJ3ellWZE9TVk50ZUdwU01Wb3hWMnRPU21Nd2JIVlRWMnhOVVRCd2NWbDZUazVoVlhoRVUyNU9hRlo2Vm5OVVJtUnZZa2RHV0ZwSE9XdFJNR3g2VTFjeFlXUnRTblZWV0ZKcVRXMTNNbGRzVGtwak1HeDBaREpzVFZFd2NERlRWMnd6WVZkS05WTllUa3BpVjJSd1ZFVk9TMkV4YkZsVmJXaEtZVmhrY0ZkV2FGTk5SMDV3VTFoT1NtSlVRbkJVUlU1TFlUQnNjR1F5Ykd4Uk1HeDZVMWN4VDJNeGNGaFNibXhXWWxaYWNWcEZUa3BqTUd4MVYxZHNUVkV3Y0haWGJHUnpZbTFHU1ZWWGJFMVJNSEJ3VjJ4a2EyTkhTbk5SYldoclVqSmtjRlJGVGt0aFIwNTBWRmRzVFZFd2NIVlRWMnd6WVZkV1ZGTllUa3BpYlU1d1ZFVk9TMVJyYkhCa01teFdVVEJzZWxOWE1UUmpSMHAwVm14b2FGWXhTWGRaVlU1S1l6QnNkVlJxUW1waVZHeDVWMnhhVDAxSFZsaGxSM2hLWVZoa2NGbDZUbE5sVjBsNVpFZDRTbUZZWkhCWGJURnpZekpLUjFScVFteFdNMmh6VTFkc00yRlhSalZUV0U1S1lUQXhjRlJGVGt0a01HeHdaREpzYkdGVmJIcFRWM1J5WVZWNFJGTnViR0ZYUlZsNFYyeG9UMDFHUmxoT1dFSnBWakJaZDFsV1l6VmtWa3AxVTIxb2FWWXhWbkJVUlU1TFZHeHNXVlZ0T1VwaFdHUndXV3hrYzJSVmJIQmtNbXhoWVZWc2VsTlhlRTVoVlhoRVUyNUNhazFHYjNoWmJURlBUVWRHV0U5WVZrcGhXR1J3VjFoc1NtTXdiSFJVYmxwcFVucHNOVk5YYkROaFZrcHdVMWhPU21Kc1ZuQlVSVTVMVFVkSmQxZHVRbXhTTVZweVUxZHNNMkZXYjNsV2FrSktZVmhrY0ZkcVNsZE5Sa1Y1VDFoV2ExSXhXVEJhUlU1S1l6QnNkRk5YYkUxUk1IQlNWVEZPU21Nd2JIUk5WMmhzVVRCc2VsTlhNWGRWYlZKWVZtNXNiRlV3Y0d0VVJVNUxaRVpzV1ZGdVpHaFdlbFoxV1ROc1NrNXJiSEpVYTBwU1ZsVXhlbFpVUWtkUmJGVjNVbGhPVTAxRldrTlZha0pHWXpGS1ZsSnJTbE5XVlRGNlZXcENSMUZzU1hkVVdFNVhWbFZhUTFac1RqUldSa1pXVW14U1VtVllhRWRWVmxaSFVteEdOV1ZGYUZKV1ZWcEpWRVZXYTFGc1JsWmlSVkpOVWxkU1ExVldWbGRVVlhoR1ZtdEtVbFpXV2s5VVJWcEhVV3hHVjFKclVrMVNhMXBEVlZaYVJtTXhXbFpTYTBwWFZsVXhlbFpXVmtkUmJGWlVaVVpDVWxaVldsRlZXR3cwVkd4R1ZsSnJlRTFTVmxwRFZWWldhMUpGZUVaTlZVcFNWbFJDZWxWcVFrZFJiRWwzVkZoT1YxWlZXa05XYkU0MFUyeEdWbEpyY0ZKbFdHaFZWVlpXUjFaRmVFWmFSVXBTVmxkU1JWUkZXa2RSYkVaWFVsaE9VMDFGV2tOVmFrSk9ZekZyZDFKclNscGxXR2hIVlZaV1IxSnNSalZsUmxKU1ZsVmFWVlJGVlRWUmJFWldUMVZTVFZKc1drTlZWbHBXWXpGUmQxSnJTbFZOUlRGNlZrUkNSMUZzVWpWbFJscFNWbFZhVjFWWWJEUldSa1pXVW14U1RWSlVSa05WVmxWNFlsVjRSbFpyU2xKV1YwNTZWa1JDUjFGc1VYbGFSVTVOVWxSR1ExVldWakJTUlhoR1pFVktVbFpZVG5wV2FrSkhVV3hhTldWR1NsSldWVnBWV1ZWV1NtTXhTWGRTYTBwVFZsWkdlbFZzVmtkUmJFcFdWRmhPVTFaVldrTlZiRlpPWXpGSmQxSnJTbE5OU0dSNlZXeFdSMUZzU2xSbFNFSlNZVEJhUTFsV1ZrdGxSa1p3WlVaU1VsWlZXbFZaYTFaS1l6RkpkMUpyU2xOTmFrWkVWRVZhVDFGc1JsZFViazVTWVZob1NWVldWa2RUUjBwV1UxaE9WRTFGV2tOVmVrSk9ZekZKZDFKclNsTk5SVEY2VmxaV1IxRnNWbFpVV0U1VFRVVmFRMVZxUWs1ak1VMTNVbXRLVkUxRk1YcFhWRUpIVVd4cmVsZHJUazFTVmxwRFZWWldWbU14VFhkU2EwcFVUVEpTUkZSRlduTlJiRVpYWWtWU1RWSldXa05WVmxaWFl6RkdjR1ZHVWxKV1ZWcFZWRVZWTlZGc1JsWlBTRTVXVmxWYVExWlVTWGhSTUhoR1drVktVbFpXVlhoVlYydzBVbXhHVmxKcldsSmxXR2hKVlZaV1IxTkdUbkJsUlZwU1ZsVmFSMVJGWkhOUk1VWldVbTVDVW1KcldrUlVSVnBQVVd4R1YxUnVUbEpoV0doSlZWWldSMU5IU2xaVFdFNVdUVVZhUTFaWWJEUmtiRVp5VW10S2FVMUZjRTFVUlZaelVXeEdWbUV6VGxwTlJWcERWMVJDYW1NeFNsWlNhMHBUVm5wV1JGUkZXbGRSYkVaWFZteEdUVkpXV2tOVlZsWldZekZTVmxKclNsVlZNMmhUVlZaV1IxWkZOVVpUV0U1VFRVVmFRMVZzVW10Uk1IaEdXa1ZLVWxaWFVrcFVSVlpYVVd4R1ZsWnVXbEpoV0doTlZWWldSMVJHYkZSbFJWcFNWbFZhUjFSRldrOVJiRVpYVkZST1VtRllhRWRWVmxaSFVtc3hjbE5ZVGxOTlJWcERWVzVzTkZWc1JsWlNiRXBQVmxWc2VsVnNWa2RSYkVwVVpFVk9UVkpZVWtOVlZsWXdVMVY0UmxwRlNsSldWMUpHVkVWV1YxRnNSbFpXYTFKTlVsZFNRMVZXVm1wTlZrWndaVVZhVWxaVldrZFRla0pLWXpGTmQxSnJTbFJOUjJSNlZXcENSMUZzU1hkVldFNVRWbFZhUTFWc1ZrNWpNVWwzVW10S1UyVlViRVJVUlZaWFVXeEdWbFpyZUUxU1YxSkRWVlpXYWs1R1JuQmxSWGhTVmxWYVRWVXliRFJUUmtaV1VtdG9UVkpyV2tOVlZscEhVV3Q0UmxwRlNsSldWMDU2VmxaV1IxRnNWbFZXYTA1TlVsWmFRMVZXVmxaamJFWndaVVY0VWxaVldrMVVSVnBYVVd4R1YxWnJXazFTVjFKRFZWWldWbU14VFhkU2EwcFZWVE5vVTFWV1ZrZFdSa1kxWlVWb1VsWlZXa2RaVjNST1l6RkpkMUpyU2xOTmJsSkZWRVZXVjFGc1JsWldhMUpOVW14YVExVldXbFpqTVVwV1VtdEtVMVV6YUVkVlZsWkhVbXhHTldWRldsSldWVnBIVkRGV1NtTXhVbFpTYTBwVlZrZG9SRlJGVmxkUmJFWldWbXRTVFZKcldrTlZWbHBIVTFWNFJsWnJTbEpXVmxwTFZFVmFjMUZzUmxkaVJYUk5VbFphUTFWV1ZsZFVSWGhHWWtWS1VsWlhlRVZVUlZaWFVXeEdWbFpyVWsxU1ZscERWVlpXVjFKRmVFWldhMHBTVmxaYVJWUkZWbGRSYkVaV1ZtdFNUVkpYVWtOVlZsWldZekZKZDFKclNsUldiR3g2Vld4V1IxRnNTbGRaTTA1WFZsVmFRMVpzWXpGUk1IaEdWbXRLVWxaV1dqTlZWMncwVkd4R1ZsSnJOVTFTVmxwRFZWWldWazFHUm5CbFJWcFNWbFZhUjFZeFRqUlhiRVpXVW14d2FsSlZiSHBWYkZaSFVXeEtXVlZyVGsxU2ExcERWVlphUms1R1JuQmxSVnBTVmxWYVIxZFdUalJXUmtaV1VteFNZV0ZZYUV0VlZsWkhVMnhLVkdWRldsSldWVnBIVjFoc05GWnNSbFpTYkZwclVsVnNlbFZzVmtkUmJFcFpVMnRPVFZKWVVrTlZWbFo2VFd4R2NHVkZXbEpXVlZwSFZHcENTbU14VmxaU2EwcFdWa1p3UkZSRlZsZFJiRVpXVm10d1RWSnRlRU5WVmxwelV6QjRSbFpyU2xKV1ZscE5WRVZXYzFGc1JsWmlSVkpOVWxaYVExVldWbGRTUlhoR1ZtdEtVbFpXV2tWVVJWWnJVV3hHVmxwR1FrMVNWbHBEVlZaV1YxSkZlRVpXYTBwU1ZsWmFlbFZyVGpSU2JFWldVbXRhYUZaV1JucFZha0pIVVd4S1ZHVkZhRkpXVlZwTFZFVmFhMUZzUmxkYVJFcFNZVmhvUjFWV1ZrZFNiR3h3WlVaQ1VsWlZXbEZaTVZaS1l6RktWbEpyU2xOV2JVNTZWbXhXUjFGc1dsaE9WVTVOVWxaYVExVldWbGRrTVVad1pVVTFVbFpWV2s5VVJWWnJVV3hHVmxrelRsZFdWVnBEVm14ak5WRXdlRVpXYTBwU1ZsWmFjRlJGV2s5UmJFWlhWRzVvVW1GWWFFZFZWbFpIVW14YU5XVkdXbEpXVlZwWFdXMTBTbU14U2xaU2EwcFRWMFZLUkZSRlZYaFJiRVpXVFVoT1ZGWlZXa05WTVZKVFVUQjRSbFpyU2xKV1ZscGhWRVZhYzFGc1JsZGlTR1JTWVZob1IxVldWa2RTYlZKeVUxaE9WbFpWV2tOV1ZrNHdVVEI0UmxaclNsSldWbHB2VkVWYVQxRnNSbGRVYTNCTlVsWmFRMVZXVmxkU1JYaEdZa1ZLVWxaWGVFTlVSVlpyVVd4R1ZscEZVazFTVmxwRFZWWldWMUpGZUVsVWEwNVNWbFZhTmxWWGJEUlhSa1pXVW14b2FtRXdiSHBWYkZaSFVXeEtXVlJyVGsxU1dGSkRWVlpXTUZKRmVFWmlSVXBTVmxkNFRGUkZWbGRSYkVaV1ZtdFdUVkpYVWtOVlZsWnFZekZTVmxKclNsVldWRUo2VlRGV1IxRnNUbFprTTA1VFRVVmFRMVZxUWxKak1VbDNVbXRLVTAxRWFIcFZha0pIVVd4S05XVklVbEpoTUZwRFdXcENTbVZzU2tSbFJYQlNWbFZhU1ZVd1RqUlNiRVpXVW10YVRFMUdSbnBXYWtKSFVXeGFObFpyVmsxU1ZscERWVlpXVjJKRmVFZGlSVXBTVm0xNGRGUkZWbGRSYkVaV1ZtMTRUVkp0VWtOVlZscHFUVVpHTldWRmFGSldWVnBIVkVWV2ExRnNSbFpoTTA1VFRVVmFRMVV4YUZOU1JYaEdXa1ZLVWxaV1dYcFZXR3cwVW14R1ZsSnJXazFOUld4NlZXcENSMUZzU2pWbFJscFNWbFZhVjFSRldsZFJiRVpYVmxoT1ZVMUZXa05XU0d3MFZXeEdWbEpzU2sxU2JYaERWVlphY21NeFdYZFNhMHBYWlZob2RWVlhkRWRSYkc5M1UxaE9XbFpWV2tOWFZrNDBWVVpHVmxKc1FrMVNiWGhEVlZaYWNtTXhXWGRTYTBwWFpWaG9WMVZXVmtkV2JFNUVaVVY0VWxaVldrMVZNbXcwVW14R1ZsSnJXazFTVjFKRFZWWldhazFzUm5CbFJWcFNWbFZhUjFSRlZsZFJiRVpXVm1zMVRWSldXa05WVmxaV1RURktSR1ZGV2xKV1ZWcEhXV3hXU21NeFVsWlNhMHBWVmpKNFJGUkZWbXRSYkVaV1ZsaE9VazFGV2tOVmJtdzBVMnhHVmxKcmFHeFdWV3g2Vld4V1IxRnNTbGxYYTFKTlVtczFRMVZXV2s1ak1XeFdVbXRLV2xac1ZucFZiRlpIVVd4S1ZWZHJUazFTVjFKRFZWWldhbU14VmxaU2EwcFdWbFZXZWxWc1ZrZFJiRXBWVkd0T1RWSllVa05WVmxaNll6RmFWbEpyU2xkV2JHeDZWV3hXUjFGc1NsbFNhMUpOVWxaYVExVldWbFpsYkVad1pVVjRVbFpWV2sxVVJWcEhVV3hHVjFKWVRsWldWVnBEVmxaU1MxRXdlRVpXYTBwU1ZsWldObFZYYkRSVVJrWldVbXQ0VFZKc1drTlZWbHBYVlRCNFJsWnJTbEpXVmxZMFZWZHNORkpzUmxaU2ExcE5VbTFTUTFWV1dtdGxiRVp3WlVaU1VsWlZXbFZVUlZWNFVXeEdWazFVUWxKaFdHaEhWVlpXUjFKdFNsWlRXRTVWVmxWYVExWkdaRlpqTVUxM1VtdEtWR1ZZYUZWVlZsWkhWa1pXUkdWRmVGSldWVnBOV1hwQ1RtTXhVbFpTYTBwVlZucFdSVlJGVmxkUmJFWldWbTEwVFZKc1drTlZWbHBYWVVWNFIySkZTbEpXYlhoRlZFVldWMUZzUmxaV2JURk5VbTE0UTFWV1duSmpNVlpXVW10S1ZsWkhhRVZVUlZaWFVXeEdWbFpZY0ZKaFdHaE5WVlpXUjFSRmVFZFVhMHBTVm1zMWRWVlliRFJTYkVaV1VtdGFhVkpXVm5wVmJGWkhVV3hLV0UxVlRrMVNWRVpEVlZaVmVHSkZlRVprUlVwU1ZsaE9lbFpXVmtkUmJGWlVaVVpLVWxaVldsTlhha0pPWXpGS1ZsSnJTbE5XUjNoR1ZFVldWMUZzUmxaV2FsWlRVVE5vUjFWV1ZrZFNhM2hJVFZWT1VsWlZXakJWVjJzMVVUQjRSbFpyU2xKV1Zsb3hWVmRzTkZac1JsWlNiRnBOVWxSR1ExVldWWGhWVlhoR1ZtdEtVbFpXV1RGVmEwNDBVbXhHVmxKcldrMVNNRFZEVlZaa1RtUnNSbkJsUlZwU1ZsVmFSMWx0ZEVwak1XUldVbXRLV0ZaclJucFZiRlpIVVd4S1dXSkZWazFTVmxwRFZWWldWbU14YTNkU2EwcGFaVlJzUkZSRlZsZFJiRVpXVm01V1VtRllhR0ZWVmxaSFYydDRSMUpyU2xKV2ExcGFWRVZXVjFGc1JsWldibEpTWVZob1QxVldWa2RVYkhCVVpVVjRVbFpWV2sxVVJWcFhVV3hHVjFaWVRsWldWVnBEVmxaa05GSkZlRVpXYTBwU1ZsWmFNRlZYYkRSVWJFWldVbXMxWVZVemFFMVZWbFpIVkVWNFIxSnJTbEpXYTFaNlZWUkNSMUZzUmpWbFJXaFNWbFZhUzFsV1ZrNWpNVWwzVW10S1UxWjZWa2RVUlZaWFVXeEdWbFp1VWxKaFdHaFBWVlpXUjFSc2NGUmxSWGhTVmxWYVRWUkZXazlSYkVaWFZGaE9VMDFGV2tOVk1XaExVVEI0UjFaclNsSldhelZ3VkVWV1YxRnNSbFpXYmxKU1lWaG9UMVZXVmtkVWJIQlVaVVY0VWxaVldrMVVSVnBIVVd4R1YxSnVRbEpsV0doSFZWWldSMUpyZUVaa1JVcFNWbGhTUlZSRldrZFJiRVpYVWxoT1UwMUZXa05WYWtwS1l6RkpkMUpyU2xOTk1YQkdWRVZXVjFGc1JsWldibEpTWVZob1QxVldWa2RVYkhCVVpVVjRVbFpWV2sxVVJWcEhVV3hHVjFKdVFsSmxXR2hKVlZaV1IxTkdSalZsUmtwU1ZsVmFVMVJGVlRWUmJFWlhVbGhPVmsxRldrTldWbWhEVW10NFJsWnJTbEpXVmxvd1ZWZHNORlJzUmxaU2F6VmhWVE5vVFZWV1ZrZFVSWGhIWWtWS1VsWnRlRFZWVjJ3MFZXeEdWbEpzU2xwaFdHaEhWVlpXUjFKdFNsWlRXRTVWVmxWYVExWkdaRlpqTVUxM1VtdEtWR1ZZYUZsVlZsWkhWMFY0Um1KRlNsSldWM2cwVlZkc05GSnNSbFpTYTFwcllURkdlbFZzVmtkUmJFcFlUVlZPVFZKVVJrTlZWbFY0WWtWNFJtUkZTbEpXV0U1NlZqRldSMUZzWkZsVGEwNU5VbXRhUTFWV1drZFZNSGhHVm10S1VsWldXbE5VUlZwSFVXeEdWMUpZVGxOTlJWcERWVEZPTkZaR1JsWlNiRXBhWVZob1IxVldWa2RTYlVwV1UxaE9WVlpWV2tOV1JtUldZekZOZDFKclNsUmxXR2hYVlZaV1IxWnJPVVpUV0U1VFZsVmFRMVZzWkc5U2EzaEdWbXRLVWxaV1dqQlZWMncwVkd4R1ZsSnJOV0ZWTTJoTlZWWldSMVJGZUVkU2EwcFNWbXRXZWxaV1ZrZFJiRlpZWlVWU1RWSldXa05WVmxaWFpFWkdjR1ZGTlZKV1ZWcFBWMnhPTkZSR1JsWlNhM2hOVW1zMVExVldXazlpYkVZMVpVVmFVbFpWV2tkWmExWldZekZLVmxKclNsTldla1pFVkVWVmVGRnNSbFpOVjNoTlVsaFNRMVZXVm5wak1WWldVbXRLVmxVemFGTlZWbFpIVld4dmQxUllUbE5XVlZwRFZXeGpNVkpGZUVaV2EwcFNWbFpWTUZWWGJEUlNiRVpXVW10YVRWSlhlRU5WVmxaeVRsWkdjR1ZGV2xKV1ZWcEhWREJXU21NeFNsWlNhMHBUVlROb1VWVldWa2RWUlRsV1UxaE9VMVpWV2tOVmJGSnZVVEI0UmxaclNsSldWbFo2VmtSQ1IxRnNValphUlZaTlVsWmFRMVZXVmxka1JrWndaVVUxVWxaVldrOVdhMDQwVkd4R1ZsSnJOV2xOUld4NlZXeFdSMUZzU2xoT1ZVNU5VbXhhUTFWV1dsWmpNVTEzVW10S1ZWVXphRXRWVmxaSFUyczFjbE5ZVGxOTlJWcERWV3hvYjFKRmVFWldhMHBTVmxaV2Vsa3hWa3RSYkVaWlVtdE9hVlpWTVhwV1JsWkhVV3hTV1dORlRrMVNWRVpEVlZaVmVHUnNSbkJsUlZwU1ZsVmFSMWx0ZEVwak1WcFdVbXRLVjFaSGFFUlVSVlUxVVd4R1ZrOVdiRTFTVmxwRFZWWldWMlJXUm5CbFJuQlNWbFZhWVZac1RqUldSa1pXVW14U2FtRXdiSHBWYkZaSFVXeEtXRTFWVGsxU1ZHeERWVlpWTldOc1NrUmxSWEJTVmxWYVMxUkZWbXRSYkVaV1dUTmFVbUZZYUVkVlZsWkhVbXhLVkdWRldsSldWVnBIVkRCV1NtTXhXWGRTYTBwWFpWaG9UMVZXVmtkVWF6RldVMWhPVTFaVldrTlZiRloyWXpGS1ZsSnJTbE5XUjNoRVZFVlZlRkZzUmxaTlNFNVRWbFZhUTFWc1kzaFNSWGhHVm10S1VsWldXazVVUlZaWFVXeEdWbFpyVWsxU1ZHeERWVlpWTkdNeFNsWlNhMHBUVmtkb1JGUkZWbGRSYkVaV1ZsaE9WRlpWV2tOVk1XaDNVa1Y0UmxaclNsSldWbHA0VlZkc05GVnNSbFpTYkVwb1ZsVXhlbFZxUWtkUmJFbDZZa1ZPVFZKWFVrTlZWbFpyV1ZWNFJtUkZTbEpXV0ZKdlZFVldhMUZzUmxaWk0wNVVUVVZhUTFWNlNtOVNSWGhHVm10S1VsWldWVEZWVjJ3MFZHeEdWbEpyTlUxU1dGSkRWVlpXTUdWc1JqVmxSVnBTVmxWYVIxUkZWbk5SYkVaV1lrWm9UVkpZVWtOVlZsWXdZVVY0UmxwRlNsSldWMUV5VlZkc05GSnNSbFpTYTFwTlVsWmFRMVZXVmxkV1JYaEdWbXRLVWxaV1ZucFZNVlpIVVd4T1ZWSnJUazFTVmxwRFZWWldWMkl4Um5CbFIzQlNWbFZhY1ZwV1ZrNWpNVXBXVW10S1UxVXphRWRWVmxaSFVteEtWR1ZGV2xKV1ZWcEhWV3hPTkZSR1JsWlNhM2hhWlZob1MxVldWa2RUYXpCM1ZGaE9VMVpWV2tOVmJHUnZVVEI0U0ZSclNsSldNREY2VldwQ1IxRnNTWHBhUlZKTlVsWmFRMVZXVmxaak1VcFdVbXRLVTFaWVRucFZla0pIVVd4TmVWSllUbE5OUlZwRFZXcEpNVkV3ZUVaV2EwcFNWbFphVDFSRlZqQlJiRVpXWkVkb1RWSlhVa05WVmxacVl6RktWbEpyU2xOV1ZGSjZWV3hXUjFGc1NsUmxSV2hTVmxWYVNWVXliRFJUUmtaV1VtdGFUVkpWTlVOVlZsWnFZekZWZDFKclNsWldSM2hHVkVWV1YxRnNSbFpXYmxKU1lWaG9UMVZXVmtkVWJIQlVaVVY0VWxaVldrMVVSVnBYVVd4R1YxWnROVkpsV0doSFZWWldSMUp0U2taV1dFNVRWbFZhUTFWc1kzaFJNSGhHVFZWS1VsWlVSbk5VUlZZd1VXeEdWbU16VGxaV1ZWcERWbFpPTkZWc1JsWlNiRXBoVFVVeGVsVXhWa2RSYkU1WVpVVk9UVkpXV2tOVlZsWldZekZLVmxKclNsTldiVTU2VlhwQ1IxRnNUWGxTV0U1VFRVVmFRMVZxVG5kUk1IaEdWbXRLVWxaV1ZucFZla0pIVVd4TmQwOUlUbE5XVlZwRFZXeE9ORkpzUmxaU2ExcFVaVmhvVFZWV1ZrZFVSbXhVWlVWb1VsWlZXa2xaYlhSS1l6RktWbEpyU2xOV1ZFSjZWWHBDUjFGc1RYbFNXRTVUVFVWYVExVnViRFJWUmtaV1VteENhV0V3TVhwVmJGWkhVV3hLV0UxVlRrMVNWbHBEVlZaV1ZtTXhWWGRTYTBwV1RXNVNSRk5YYkROaFZuQjBZa2hPWVZVd2F6SlRWelZQWVcxT2RHSklaR3RUUlRFeVYxWmpNV05IU2xoU2FrSmhWWHBHY1ZsV2FFdGhiVXBJVmxoYWFHSnJXWGhYYkdoTFRsVjRkRlJ1UW1waVZUVjZXVlprWVUxWFNrUk9XRkpvVm5wU01WbFhOVTVoVlhoRVUyNXdhVTB4V2pWWFZFcFhaV3hGZVU5WVZtdFNNVm94V2tWT1NrNXNaRFZUVjJoaFlteGFNVmRVVGxOalIwbDVUa2M1YTFFeWR6TmFSVTB4WWxkS2NFNVhjR2hYUlhCeFdXdGtjMkpYVWxoa2VteGhZbXhhTVZkVVRsTmpSMGw1VGtjNWFGVXphSE5UTVdnd1RXeHNXVk5YWkZwV1JFVjNWRWN4VjA1SFVraFdibFpoVVRKbk0xZHRNV3RoYlVsNVpVaGFhbUZ1UW1wVFYyeE9UVlUxVlZkdGJFNWlWbkJxVTFkc05HRldiM2xVYmxwcFVucHNOVlF5ZUROaFZXdDVWbTE0WVZadVpIQlVSV1JoWTBkS1NHUjZXa3BXUlZaNldrUktjMkV5VWtoYWVscE9Wa1pXZWxkclpITmtSbkJZVGxod2FGWjZiREZVTW5CS1pEQXhSR1ZITVdsTmFsVjNXWHBLYzA1c2NGVmlNMmhQVlROb00xZHNhRXRoYkhCWVRsUkNVR0ZzVmpOVVJXUkhaRmRHV0UxWGFHdFNNbmd5V1cwMVQwMUdjRmxSVkZwT1ZUTm9kMWRVU1RWa1YwMTVZa1JhWVZaSVFtcFRWM0JLWkRKT1NXRkhUa3BoV0doM1YxUkpOV1JXYTNsUFdFNXBUVEJyTWxkRlRrcGhhemxWWVhwV1dWRXdiSHBYVnpBMVpWWndTRlp1YkZCaVNHUndWMnRrVjJKV2JGbFdiazVyVW01a2NGUkZaRTlrYlVwWlVXNU9ZVmRHU25OVU1qQXhUVmRLU0dWRWJFMVNNblIzVkhwT1MySkhVa2xXYm14cFlWVkpkMWxWWkhObGEzaDBWbTFvV2sxdFpIWlhiVFZYWkZacmVsVnVRbWxOYWxKMlV6Rm9NR0pYVWxoT1YzQnJVako0TWxsdGJFTmlSWFJJWVROT1lWVXphRzlUTVdnd1RVVjBSMlF5YkZGVFJUVXpWMVpqTUVzeFFrUlBXSEJxVWpCYU1WVkhlRE5oVlhSVVRsZG9hbE5GU25OWmJURlRWbGRLTldGSVFreFZlbFp2VjJ0a1UxSkhTa2hTYm5CcVpWZG9jMU14VFRGTlJuQlpZVVJDVEZORk1YZFVSelZEWlZad1dWRnRlR2xpVmtaMldUSnNjbVJXYTNwVWJuQk1VMGhTYWxOWE1UUmpSMHAwVmxoU2FGSXhXbmRYYWtwdlRVWm9SRk5VV2xwVk0xSnFVMWMxUTA1R2FFUlRXRTVaVVRCd2RGbHFTVEZOUlhoWlZHNUNiR0pXV21wVFYzQjNZekI0ZEZkdVdtbGliRW8yV1Zab2QySkZjM2hrTW14cVUwZG9hbE5YTkhkalIxcFlWMnBHYVdKVk5IZFpWbU0xWkZWc1NFNUhPV2hWTTJoelV6Rm9NRTFGZEVka01teFJVMFUxTTFkV1l6QkxNVUpFVDFod2FsSXdXakZWUjNnellWVjBWRTVYYUdwVFJVcHpXVzB4VTFaWFNqVmhTRUpNVlhwV2IxZHJaRk5TUjBwSVVtNXdhbVZYYUdwVFZ6RlBZMGRPZEZSdVRtRlZla1ozV1cweFlXUnJlRmhoUjJocFVqRndhbE5YYkhKa1ZtdDZWRzV3VEZKdVpIQlphMlJ6WkZad1ZFMVhPV0ZXTW5oMVdWVm9VMWt3YkhCbFNFNU5ZbFpLZDFsc1pGZGtWMDE1WWtoYWFXRllRbk5UZWtZellWZE9TV0ZIVGtwaFYzYzFWMjAxVjJSV2EzcFZia0pwVFdwU2JsbHViRzlqUlhSWlpFUkNUV0pXV205WFZFcHVZakpHUkdWSE1XdFdlbFp4V2tWa2MyUnRTbkJoUjNoTlVucFNkMXBVVG1Ga2JVWllWVmRrVGxFd1ZUVlpWazB4WVRGc1dWVnRhRXhTZWxKM1ZVUktORmx0U25OTlJHeG9WWHBXY2xkV2FGTmhSWFJJVGtoQ1VHSllhR2xaYlhkM1QxZFNSR0ZIYUV4VmVsWnZXa1ZvVTJWVmRFaE9TRUpOVW01a2NGZHRNWE5qTWtwSFpESnNVVlpFUmpGVGJXeGhUVzFKZVdKSGRFcFNSVVp2VlVaa2NtUldjRWhTYWtKYVZUSm9hbE5YTVdGalIwcElaVWRPU21GWGRIUlRiV3h2WkVaQ1ZGSllaRXhYUkVKM1dteGtZVTFYU25SVWFrSm9WbnBzTVZOVlpGSmlNWEJVWWtSa2JGRjZWbkZaYTJSWFlVZE9jMU50ZUZwTk1VWjJWRlZPTTJRd2VFbFhXRlpyVFcxNGNscEZaRzVqTWxKd1RsYzVZVll5ZUhWWlZXaFNZMFY0U1ZvelZscGlWbHAxV1Zaak1WVldiRmxWYlRsTVVUSjBlbHBWVFRGaFIwNTBWRmM1WVdWWVp6RlVSV2hxWXpGU1ZHVkdSazFSTUZZMFV6Rk9ORTVGZUhSbFNFSnBZbFphV1ZsV1pGTk5SMFpGVFZoT1RXSnRVbmRYYTJoVFlqQjBObEpZVG14UmVsWTJXa1ZvUzJSdFJYbFdiRkpyVTBkNGVsZHNVWGhqTUhoMFUyMDFXazFxYkhwWmFrNUtZekpXUkU1WWNHdFRSWEF5V1ZSS1ZtSXdkRlJsU0ZKTFlWWnNkbHBWVFRGaVYwWllaVWhPVmsweFNURlphMlJXVDFkS1JFNVhNV2hXTTJoNlZFVm9ibVJXY0hSaVNFNXBVVEprZDFNeFRqUk9SWGgwVTIxNFlVMXRlREZXVldSSFRVZEdSRm96UWsxVFIyUXhWMVpvUzJGcmRFaFpNMDVzVlRObmVsUkZUWGhqYTNoR1ZGaEdZVlY2Um5sVVJVNUdaVVYwVkdWSFRrcGlWR3Q0V2tWa05HTkhTblJXYlU1S1lXcEJOVmxyVFRGaFYwbDZVMjEwWVZkRmEzWmFWVTB4WXpKR1dFNVhlRmROYlhoeVdrVmtiazlYU2tST1ZFNW9WakZKZDFsVlRucGxSVEUyWTBkT1NtSlhlREZaYTJSelpGWndWMlF5YkZGV1JFWjZWRWN4UzJSdFRuUlZiWGhxWVZac2RGTXdhRzVrVjBwSVlraFdZVlp0VW5kWGEyaFRZakZDV0dRelZtdE5iWGh5V2tWa2JtUkZNVlZVV0VKTlUwZGtNVmw2VGxObFYwbDVaRWQ0VmsweFNURlphMlJXVDFkS1JFNVhNV0ZOYXpVeVdXdGpOV1ZWZUVsYU0xWnFUVEZLTlZscVNqQmlSWFJFWVROT2FsSkVWVEpUYld4YVlqSldjR042YkZSVk0yZzFWMnhvUjAxV2NGbFVha0pTVm5wV2QxbHNaRWROUjBaWVQxaFdVMkpyY0c5WmJHUldZakZ3ZFZadVZscE5NVXAzV1dwSk1HSXdkRmxrUjNSTVVsUkdiMXBGWkc1a1YwcFlZa2hXVEZOSE9YcFpNRTV5WkdzeFZWRllaRXhYUkVKNlYyMXNjbU5GZUVsaWVteFJWMFZHZEZOdGVFNWlWWEJ6WkRKc2ExWjZWbkpYYkdSaFkwZEtkRlp0ZEZsUk1HeHZWVVpvVTA1WFRraFdibHBoWVZWS2QxTnRiR0ZOUlhoMFlraHdVMkpzV2pGWFZFNVRZMGRKZVU1SE9XaFZlbFp4V1dwSmVHUXlTa2hXYWtKaFZUSjBkRk50Ykc5alJYaDBWRzVhYVZkRlNucFhiR2hUWWtWMFJHRXpUbFpsYWtKdlZGWk9jMDlYVW5SU2JteEtVMFV4ZWxkWWJEUmlNVUpYWkVkT1NtSldjSFZYVkVrMVl6SkplbE50VGtwaFdHaHFVMWN4UzJKc2EzbFBXRTVwVFRCd2FsTlhiRFJaTUd4MFYyNUNhVkl6YUdwVFYydzBXVEJzZFZwSVFtRlRSa3AyVjBWT1NtTXhhRVJUYlhSb1ZucEdjMWx0TlU5alIwbDVUbGRPU21GWWFHcFRWekZoWkcxS2RWVnVjR2hYU0VKelYwVk9TbU14YUVSVGJXaHBZbGQ0TUZkV2FGTmpSMGw1VGxod2ExSXhXak5YUlU1S1l6Rm9SRk50ZUdsaVZrcFNWMnhvUzJGc2NGaE9WRUpaVVRCc2VsZEZUa3RqUm10NVQxaFdXVkV3YkhwWFJVNUxZMFpyZVU5WVZscE5hbXg2V1dwT1Mxa3diSEJsUjA1S1lsZDRjVmxxU1RGbGJVWlpZMGQ0V1ZFd2JIcFhSVTVMWVZkSmVsTnRkR0ZYUlhCcVUxZDNkMk15U2tWTlZHUnRWVE5vTlZWR1dqTmhWbWhFVTFoT2FsSkVRak5VUldSYVQxZFNSR0ZFUW1oU01uZzJVekZPTkdSR1FsUlNXR2hRVFcxNGRGTXdaRnBrVm14WVZXMTBVazF1YUc5WmVrNU9ZakZvUkZOdGNHaFhSWEJ4V1d0a2MySlhVbGhsUjA1S1lWZDBlbGx1Ykc5aVZYUlVaVVJLYVUxdGVISlRWVkpDWVVaQ1dGZFlWbUZTTUZsM1YxWk9iMWt3YkhWVmJYaHNVMFpLYWxOWGJISmlWWEJ3WVVod1VWWXhiREZYYTJSSFRVWnNWR0ZIVGtwaWJFcHpXbFZvVTFrd2JIQmhNMDVyWWxSc2QxZHJUa0prTUd4VlRWY3hUV0pXU205YVJXUkdZakZvUkZOdVFscE5hbXd4VjBWT1NtTkZjSEJYVnpscVlXcEZkMU13V2pOaFZrSklZWGwwVVZGNmJIZFZSM2d6WVZWMFZFNVhhR0ZTTVVwRldXdGtSMlZ0VGpWaFIwNUtZbFp3YjFOVldqTmhWWE42VlZjNWExSXlhSGRaTTJ4eVpGWndTRkpxUWxwVk1taHFVMWN4YzJGdFNYbE9WMDVLWVZkMGQxUkhNVTlsYlU0MVlVUmtXazFxYkhwWmFrNUtUbTFLUkU1WVFscE5hbXd4VjFSSk5XTXlTWHBUV0U1WlVUQndkRmxxU1RGTlJYaFpWRzVDYkdKV1dtcFRWM0IzWXpCNGRHSkhjR2xOYWxZMldWWm9kMkpIV2xSaE0wSk5VMFp3TWxsV1pGSmFNREZFVWxSc1lXRlVWbkpYVm1oVFlVVjBSMlF5Ykd0VFIzZ3pWMnhhTTJGVmRGVlBSemxUWVdwRmQxTXdhRk5pTWtaWlZGaENUV0pXU205YVJXUkdZakZvUkZOcVFteFhSVXB6VjBWT1NtTkZlRWRrTW14b1VqQmFlbGR0ZUROaFZrSlZUVlZrVVUxc1ZuWlhiV3cwV1RCc2RGUnVRbXBpVlRWNlYyeE5lRTFHY0ZsaFJFSk5WakpvYjFsclpHRlpNR3h3WlVoT1RXSldTbmRaYkdSWFpGZE5lV0pJV21saFZHZzBWRWR3VWsxVmRGVmpSM2hNVWpGc2VsZEZUa3RoYlVaWlUyMXdhVkl4VmpCYVJXUlhUa2RTUjJReWJFMVNNMlF4VjJ0a2MyUkdjRmhPV0hCb1ZucHNNVk14VG5KT2JIQlVZVWN4VFZKdVpIQlhWRXB6WlZacmVXVkhlRTFYUmtweldsVm9VMWt3YkhCbFNFNU5ZbFpLZDFsc1pGZGtWMDE1WWtoYWFXRlhkSGRVUldoaFpHMUdXRlZYWkU1Uk1GVTFXa1ZPYjAxSFJraGlTSEJNVlhwV2NsZFdhRk5oUlhSSFpESnNhMUo2YTNkWFZtUTBXVEJzY0dFeU1VdGliSEF5V1Zaa1Vsb3dNVVJTVkd4clVUSm5kMWxWWkhObGEzUlVUbGQwV2xkR1NtOVRNRm96WVZkT1NGSnViR3RTYm1Sd1V6Rk9jMDR5VW5SU2JteEtVMFpWTlZwRlRtOU5SMFpJWWtod1RGVjZWbkpYVm1oVFlVVjBSMlF5Ykd0U2VtdDNWMVprTkZrd2JIQmhNMXBPVmtWR00xUjZUa05pUjA1MFZHMTRhV0pzUlRWVE1HaFNZakpTU0dGSVFtcGxWM1F4VjJ0a1IwMUdiRlJoUjA1S1ltdEtiMWt5TlZOWk1HeHdZVE5hYTFWNmFEUlVWVkpDWTBWNGRWVnVXbE5pVjNjd1YyeGtVbUl3TVRWaE0wNXFVa1JDZGxwRlRtOU5SMFpJWWtod1RGVjZWbkpYVm1oVFlVVjBSMlF5YkdwU01GbzFXa1ZhTTJGVmRGUlBWRVpNVlhwVmQxbHFRbUZqUjFaSVZtMTBURkpGTVhkYWJHUlhZekpOZVZaWFpHdGlWR3gzVjJ0T1FtUXdiRlZOVkVKTVUwWktkbGxXYUU1alJYaDBWVzFvYTFJd1ZuWlhSVTVMWkRGd1dWTnRjR0ZXZWxWM1YwVk9TbU5HUWpWaFNHUmhWMFZ3Y1Zkc1l6Rk5Sa0paVlZjNWExSXlhSGRaTTJ4eVpGWndTRkpxUWxwVk1taHFVMWMxUTJKSFRuUlViWGhwWW14S2FsTlhiSEprYXpGVlVWaGtUVk5GUlRWYVJVNXZUVWRHU0dKSWNFeFZlbFp5VjFab1UyRkZkRWRrTW14cVVqRmFOVmRVU2xka1YxSkhaREpzVEZVeWN6SlpNR1JYWlZacmVWWnVWbXRTUkVadlZFYzFRMkpIVG5SVWJYaHBZbXhHTWxSV1VrSmtNRGg2VjI1YWFGWXhSbTVVVlU1R1QxZFNSR0ZFUW1oU01uZzJVekZOTVdFeGJGbFZiV2hNVW01a2NGbFdZekZpVjBsNFpESnNURlV4YkhSVE1HUk9UMWRTUkdGRVFtaFNNbmcyVXpGTk1XRXhiRmxWYldoTVVtNWtjRmxXWXpGaVYwbDRaREpzVEZVelozbFpha3B6WVRCc1JWRlhhRkZYUmtaMldrVmtiMk5IVGpWaE0xWmhVakJaZDFkV1RtOVpNR3gxVldwV2FsSXhXbXBUVjJ4eVREQjBSbGRVYkd0Uk1tZDNXVlZrYzJWcmRGUk9WM1JhVjBaS2IxTXdXak5oVjFKSllraGtZVlp1WkhCVE1VNDBXVEJzZEdGSGFHbFNNWEJxVTFkdmQwOVdTbkZQV0ZaTVVqRnNlbFJIY0hKalJUbDBUa2M1WVdGWVpEUlVSM0JLVFZWMFZHRjZXbWxoVjJoMFZFVlNSbVJWTVhGV1dFSk1WVE5uZDFNd2FGTmlNa1paVkZoQ1RXSnRVbmRYYTJoVFlqQjBTR1F6Vm1GU01uZ3dWMnhqTVdWdFJsaFBXRlpNVFZoa2NGa3dhRzlaTUd4d1lYcGthMkpWV2pWVFZXaGFUMWRTUkdGSFRrcGhibWh4VjFaak1VMXNiRmxVVTNSUlVYcHNjVmRXWXpGTmJHeFpWRk4wV1ZFd2JIZFVSekZIVFVkU1NWTlhPV3hOTWxKM1YydG9VMkl3T1hSa00xWmhVako0TUZkc1l6RmxiVVpZVDFoV1RWSXlhSE5aVm1ScllqSlNSV05JVGsxaVZrcDNXV3hrVjJSWFRYbGlTRnBwWW1wQ2QxUkhNVWRrTWs1SVZtNVdZVkpzU2pKVE1HaFNZakpTU0dGSVFtcGxWM1IzVkVjeGEySkhVa1JhTTJSTVZUTm5NRlZHYUZwa1ZtOTVWbXBDVWsxcWJERmFSV1JYVGtkU1JHRkhUa3BoYTNCeVYwVk9TbU5GZUVoWmVteHJZVlJWZWxsV1pGTk5SMFpFVDBoc1RWTkhjelZhUjJzeFlqRndXR0pITldoVFJrWXlWRmRzTkdGV1FsVlVWRXBPVVROQ2VsUkhOVU5pUjA1MFZHMTRhV0pzUm5wYVNHOTNZakZzY0dJeU9WVldNRmwzV1ZWTk1WVldUbFJQU0doUVVrVkdkMVJGYUZwa1YxRjVZa2QwYTFJeVpESlVWMnN3VFZWMFZHVkdSbEZXUld3eFZGaHNkMVJzYkZsVmJUbE5Za1ZLUzFSRlZYZFBWVEZFWlVSYVVWWkZSVFZWUmxGNFl6QjRkRkp1Vm1oV2VrWnZXa1ZrYzJSdFNuVlVha0poVjBWRmRsa3dVblprTUhoR1lYcHNWVll3V1hkWlZVMHhaRVpzV1ZveU9XbFJlbFp2V1cweGMyUkdiRmxWYmtKcFRXcFdObHBGWkZka01IaEZVVmhDVFZKVk1EVlVWMngzVkd4c1dWVnRPVTFpUlVwTFZFVmtlazlXVWxoU2FrSm9VWHBXVWxVeFRUUmxWWGhHVjFSc1dWRXdjR3BUVjJ3MFZrWkNWRkpZWkZCTk1YQXlXVlprVWxvd01VUlNWR3hyVVRKbmQxbFZaSE5sYTNSVVRsZDBXbGRHU205VE1Gb3pZVmRTU1dKSVpHRldibVJ3VXpGT1dtSlZkRVpYVkd4clVUSm5kMWxWWkhObGEzUlVUbGQwV2xkR1NtOVRNRm96WVZkU1NXSklaR0ZXYm1Sd1V6Rk9ORmt3YkhSaFIyaHBVakZ3YWxOWGIzZFBWa3B3VjFjeFRGSnJSVFZVVjJ4M1ZHeHNXVlZ0T1UxaVJVcExWRVZWZDA5Vk1UVk9TR2hPWlZob1JWVkdVa1pqVmxKWVVtcENhRkY2VmxKVk1VNDBZMnhDVmsxWGFHdFNNbVF4VmxWV2NtUnJlSEZoZWxaUFlWZDBkMVJGWkZKaU1sWndUMGhvVGxKRlJuZGFiRTV6VDFkYVZHRklSbFpYUmxweldUSTFjbU5GT1RWVGJWSnRWVlF3T1ZoSE5HbFlXREE5WEc0aVhYMD1cbiJdfQ==
